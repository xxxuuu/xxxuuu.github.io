{"pageProps":{"NOTION_CONFIG":{"LINK":"https://xxxuuu.me","THEME":"autumn","KEYWORDS":"分布式系统,存储,云原生","AUTHOR":"xxxuuu","BIO":"xxxuuu","CUSTOM_MENU":"true","CUSTOM_RIGHT_CLICK_CONTEXT_MENU":"false","LANG":"zh-CN","SINCE":"2018","POST_TITLE_ICON":"false"},"notice":null,"siteInfo":{"title":"x³u³","description":"🗒 碎碎念","pageCover":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fa9af1d6b-f284-4734-ba06-990353cf3f84%2FElaina.jpg?table=collection&id=0bb2e606-8d0c-4f7c-aca9-70986e90c055&t=0bb2e606-8d0c-4f7c-aca9-70986e90c055&width=800&cache=v2","icon":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F49b4570c-b2f0-457b-81b7-b68e2693a471%2Favatar.png?table=collection&id=0bb2e606-8d0c-4f7c-aca9-70986e90c055&t=0bb2e606-8d0c-4f7c-aca9-70986e90c055&width=800&cache=v2","link":"https://xxxuuu.me"},"allNavPages":[{"title":"译：使 Rust library 兼容 no_std","pageCoverThumbnail":"","category":null,"tags":["Rust"],"summary":"Effective Rust Item 33","slug":"post/rust-no-std","href":"/post/rust-no-std","pageIcon":"","lastEditedDate":"2024-09-21T10:57:48.427Z","publishDate":1726876800000,"ext":{},"short_id":"4e5d7fc0"},{"title":"Infra 窘境","pageCoverThumbnail":"","category":null,"tags":["碎碎念"],"summary":"前段时间秋招也陆续开始了，偶尔有师弟问我不想写业务，怎么才能做 infra，其实我是劝退的。算下来我毕业正式工作也一年多了，趁机从个人角度发表点暴论","slug":"post/infra-dilemma","href":"/post/infra-dilemma","pageIcon":"","lastEditedDate":"2024-09-12T13:38:22.109Z","publishDate":1725321600000,"ext":{},"short_id":"5b4b2d85"},{"title":"迁移博客到 Notion","pageCoverThumbnail":"","category":null,"tags":["折腾"],"summary":"Make Notion Great Again！","slug":"post/migrate-blog-to-notion","href":"/post/migrate-blog-to-notion","pageIcon":"","lastEditedDate":"2024-09-24T10:44:58.281Z","publishDate":1724544000000,"ext":{},"short_id":"a06c26b2"},{"title":"Longhorn 浅析","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc3967b7e-bde2-4b5b-b5f6-97de21642f16%2Flonghorn.png?table=block&id=bde25ba8-2381-4da6-bb5e-5787ace45def&t=bde25ba8-2381-4da6-bb5e-5787ace45def&width=800&cache=v2","category":null,"tags":["存储","分布式系统"],"summary":"Longhorn 是一个 Go 实现的 Cloud Native Storage，比较好奇作为一个提供块存储的分布式存储系统，使用 Go 实现，会面临哪些挑战，性能方面要又要如何优化","slug":"post/longhorn","href":"/post/longhorn","pageIcon":"","lastEditedDate":"2024-09-14T04:21:06.938Z","publishDate":1723075200000,"ext":{},"short_id":"bde25ba8"},{"title":"从 Linux 内核看读写锁设计","pageCoverThumbnail":"","category":null,"tags":["Linux","内核"],"summary":"前段时间看了《Linux内核设计与实现》，第 10 章「内核同步方法」中提到了几种内核中的读写锁。它们分别代表了几种比较典型的读写锁设计，非常值得学习，这里记录一下，讨论是基于 2.6 内核和 x86 体系结构的基础上进行的","slug":"post/kernel-rwlock","href":"/post/kernel-rwlock","pageIcon":"","lastEditedDate":"2024-08-27T15:25:28.206Z","publishDate":1704326400000,"ext":{},"short_id":"0e96a78e"},{"title":"2023 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9e8551ce-463f-41bc-b07f-5a8362a94846%2F2023summary.jpg?table=block&id=d26ce18a-fa8d-4df4-8b82-69c419c5b621&t=d26ce18a-fa8d-4df4-8b82-69c419c5b621&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":null,"slug":"post/2023summary","href":"/post/2023summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:27.095Z","publishDate":1703980800000,"ext":{},"short_id":"d26ce18a"},{"title":"混乱的软中断概念","pageCoverThumbnail":"","category":null,"tags":["Linux","内核"],"summary":"软中断（softirq）和软件中断（software interrupt）","slug":"post/softirq-and-software-interrupt","href":"/post/softirq-and-software-interrupt","pageIcon":"","lastEditedDate":"2024-08-27T15:25:25.736Z","publishDate":1692144000000,"ext":{},"short_id":"3327d648"},{"title":"PVE8 上启用 12 代 Intel CPU 核显 SR-IOV","pageCoverThumbnail":"","category":null,"tags":["折腾"],"summary":"拯救我的 Galgame 和追番体验～","slug":"post/pve8-intel-sr-iov","href":"/post/pve8-intel-sr-iov","pageIcon":"","lastEditedDate":"2024-08-27T15:25:24.786Z","publishDate":1691280000000,"ext":{},"short_id":"d5fd419b"},{"title":"容器标准和生态","pageCoverThumbnail":"","category":null,"tags":["Cloud Native"],"summary":null,"slug":"post/container-spec-ecosystem","href":"/post/container-spec-ecosystem","pageIcon":"","lastEditedDate":"2024-08-27T15:25:22.390Z","publishDate":1689120000000,"ext":{},"short_id":"deaccfa2"},{"title":"Vim as an IDE","pageCoverThumbnail":"","category":null,"tags":["折腾","Vim"],"summary":"记录 Vim 入教过程和折腾记录","slug":"post/vim-as-an-ide","href":"/post/vim-as-an-ide","pageIcon":"","lastEditedDate":"2024-08-27T15:25:23.390Z","publishDate":1687392000000,"ext":{},"short_id":"f26f0a34"},{"title":"Kubernetes CSI","pageCoverThumbnail":"","category":null,"tags":["Cloud Native","Kubernetes"],"summary":null,"slug":"post/kubernetes-csi","href":"/post/kubernetes-csi","pageIcon":"","lastEditedDate":"2024-08-27T15:25:21.307Z","publishDate":1686960000000,"ext":{},"short_id":"a23d61e0"},{"title":"2022 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F967f6a03-c26f-451c-971a-3b507ae769f3%2Ftencent_badge.jpg?table=block&id=cc463e20-63ea-4132-acea-84fc7307dde8&t=cc463e20-63ea-4132-acea-84fc7307dde8&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":null,"slug":"post/2022summary","href":"/post/2022summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:20.451Z","publishDate":1672444800000,"ext":{},"short_id":"cc463e20"},{"title":"The Google File System 论文概览","pageCoverThumbnail":"","category":null,"tags":["论文阅读","分布式系统"],"summary":null,"slug":"post/gfs-paper","href":"/post/gfs-paper","pageIcon":"","lastEditedDate":"2024-08-27T15:25:15.003Z","publishDate":1644796800000,"ext":{},"short_id":"1eecd7c4"},{"title":"MIT6.824 Lab1 MapReduce","pageCoverThumbnail":"","category":null,"tags":["分布式系统"],"summary":null,"slug":"post/mit6824-lab1-mapreduce","href":"/post/mit6824-lab1-mapreduce","pageIcon":"","lastEditedDate":"2024-08-27T15:25:13.836Z","publishDate":1644624000000,"ext":{},"short_id":"514ae2e3"},{"title":"蒟蒻的 2021 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd8a67659-bb3d-447e-b70f-7aa9f7987b88%2Fgpnu.jpeg?table=block&id=7b0eb02d-8b44-45f3-b593-52c0a62f4595&t=7b0eb02d-8b44-45f3-b593-52c0a62f4595&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":"落落落落的一年","slug":"post/2021summary","href":"/post/2021summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:12.636Z","publishDate":1640908800000,"ext":{},"short_id":"7b0eb02d"},{"title":"蒟蒻的 2020 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F1dc80ee3-5c1d-4af8-a284-d7896174816a%2Ficpc%25E5%258D%2597%25E4%25BA%25AC.png?table=block&id=37c4cfd9-62a3-41bb-9989-f9df38c45d04&t=37c4cfd9-62a3-41bb-9989-f9df38c45d04&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":"转眼三年已经过去，我也迎来了毕业","slug":"post/2020summary","href":"/post/2020summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:11.370Z","publishDate":1610236800000,"ext":{},"short_id":"37c4cfd9"},{"title":"蒟蒻的 2019 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2fdfd260-e2c8-42ea-9d8d-6fd6795797dc%2Flanqiao.jpeg?table=block&id=8aa3f594-ff5d-4f99-b0a2-fa09bb32ba84&t=8aa3f594-ff5d-4f99-b0a2-fa09bb32ba84&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":"随着2019年最后一晚的落幕，21世纪的10年代也结束了，今年的我无论是在技术上还是别的方面，都成长了许多。以本文记录我的技术路程，迎接新的一年","slug":"post/2019summary","href":"/post/2019summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:09.504Z","publishDate":1577836800000,"ext":{},"short_id":"8aa3f594"},{"title":"蒟蒻的 2018 年度总结","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff362b439-342f-451a-b70e-41ec07d86ab3%2F2018summary.jpeg?table=block&id=806f9f46-c738-4c87-9957-e73d11ec44bd&t=806f9f46-c738-4c87-9957-e73d11ec44bd&width=800&cache=v2","category":null,"tags":["碎碎念"],"summary":"又是一年过去了，2018算是人生中最重要的转折点之一，总结一下今年的经历和感想，也算是记录我的技术路程","slug":"post/2018summary","href":"/post/2018summary","pageIcon":"","lastEditedDate":"2024-08-27T15:25:07.408Z","publishDate":1546214400000,"ext":{},"short_id":"806f9f46"}],"tagOptions":[{"name":"碎碎念","color":"red","count":7},{"name":"分布式系统","color":"gray","count":3},{"name":"折腾","color":"blue","count":3},{"name":"Linux","color":"purple","count":2},{"name":"内核","color":"blue","count":2},{"name":"Cloud Native","color":"brown","count":2},{"name":"存储","color":"default","count":1},{"name":"Vim","color":"pink","count":1},{"name":"论文阅读","color":"orange","count":1},{"name":"Kubernetes","color":"green","count":1},{"name":"Rust","color":"orange","count":1}],"categoryOptions":[],"customNav":[{"icon":"fas fa-link","name":"友链","href":"/links","target":"_self","show":true},{"icon":null,"name":"关于","href":"/about","target":"_self","show":true}],"customMenu":[{"date":{"start_date":"2023-03-23"},"type":"Menu","slug":"/","title":"🏠 首页","status":"Published","category":"","comment":"","publishDate":1679529600000,"publishDay":"2023-3-23","lastEditedDate":"2024-08-29T13:50:49.016Z","lastEditedDay":"2024-8-29","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"href":"/","name":"🏠 首页","target":"_self","password":"","show":true},{"date":{"start_date":"2024-08-24","date_format":"relative"},"type":"Menu","slug":"/archive","title":"📃 归档","status":"Published","category":"","comment":"","publishDate":1724457600000,"publishDay":"2024-8-24","lastEditedDate":"2024-08-25T14:25:34.971Z","lastEditedDay":"2024-8-25","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"href":"/archive","name":"📃 归档","target":"_self","password":"","show":true},{"date":{"start_date":"2023-03-23"},"type":"Menu","slug":"/links","summary":"跳转到/links","title":"👬 友链","status":"Published","category":"","comment":"","publishDate":1679529600000,"publishDay":"2023-3-23","lastEditedDate":"2024-08-29T13:50:37.252Z","lastEditedDay":"2024-8-29","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"href":"/links","name":"👬 友链","target":"_self","password":"","show":true},{"date":{"start_date":"2023-03-23"},"type":"Menu","slug":"/about","summary":"跳转到/about","title":"👤 关于","status":"Published","category":"","comment":"","publishDate":1679529600000,"publishDay":"2023-3-23","lastEditedDate":"2024-08-29T13:50:43.389Z","lastEditedDay":"2024-8-29","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"href":"/about","name":"👤 关于","target":"_self","password":"","show":true}],"postCount":18,"latestPosts":[{"id":"a06c26b2-5941-43ea-a89e-d0bebab47add","date":{"start_date":"2024-08-25","date_format":"relative"},"type":"Post","slug":"post/migrate-blog-to-notion","tags":["折腾"],"summary":"Make Notion Great Again！","title":"迁移博客到 Notion","status":"Published","category":"","comment":"","publishDate":1724544000000,"publishDay":"2024-8-25","lastEditedDate":"2024-09-24T10:44:58.281Z","lastEditedDay":"2024-9-24","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"折腾","color":"blue"}],"href":"/post/migrate-blog-to-notion","target":"_self","password":""},{"id":"4e5d7fc0-68d5-4165-ba12-b2d8bfc7d92c","date":{"start_date":"2024-09-21","date_format":"relative"},"type":"Post","slug":"post/rust-no-std","tags":["Rust"],"summary":"Effective Rust Item 33","title":"译：使 Rust library 兼容 no_std","status":"Published","category":"","comment":"","publishDate":1726876800000,"publishDay":"2024-9-21","lastEditedDate":"2024-09-21T10:57:48.427Z","lastEditedDay":"2024-9-21","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"Rust","color":"orange"}],"href":"/post/rust-no-std","target":"_self","password":""},{"id":"bde25ba8-2381-4da6-bb5e-5787ace45def","date":{"start_date":"2024-08-08","date_format":"relative"},"type":"Post","slug":"post/longhorn","tags":["存储","分布式系统"],"summary":"Longhorn 是一个 Go 实现的 Cloud Native Storage，比较好奇作为一个提供块存储的分布式存储系统，使用 Go 实现，会面临哪些挑战，性能方面要又要如何优化","title":"Longhorn 浅析","status":"Published","category":"","comment":"","publishDate":1723075200000,"publishDay":"2024-8-8","lastEditedDate":"2024-09-14T04:21:06.938Z","lastEditedDay":"2024-9-14","fullWidth":false,"pageIcon":"","pageCover":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc3967b7e-bde2-4b5b-b5f6-97de21642f16%2Flonghorn.png?table=block&id=bde25ba8-2381-4da6-bb5e-5787ace45def&t=bde25ba8-2381-4da6-bb5e-5787ace45def&width=800&cache=v2","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc3967b7e-bde2-4b5b-b5f6-97de21642f16%2Flonghorn.png?table=block&id=bde25ba8-2381-4da6-bb5e-5787ace45def&t=bde25ba8-2381-4da6-bb5e-5787ace45def&width=800&cache=v2","ext":{},"tagItems":[{"name":"存储","color":"default"},{"name":"分布式系统","color":"gray"}],"href":"/post/longhorn","target":"_self","password":""},{"id":"5b4b2d85-43c0-4edb-ad2d-0f14d79b4c4b","date":{"start_date":"2024-09-03","date_format":"relative"},"type":"Post","slug":"post/infra-dilemma","tags":["碎碎念"],"summary":"前段时间秋招也陆续开始了，偶尔有师弟问我不想写业务，怎么才能做 infra，其实我是劝退的。算下来我毕业正式工作也一年多了，趁机从个人角度发表点暴论","title":"Infra 窘境","status":"Published","category":"","comment":"","publishDate":1725321600000,"publishDay":"2024-9-3","lastEditedDate":"2024-09-12T13:38:22.109Z","lastEditedDay":"2024-9-12","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"碎碎念","color":"red"}],"href":"/post/infra-dilemma","target":"_self","password":""},{"id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","date":{"start_date":"2024-01-04","date_format":"relative"},"type":"Post","slug":"post/kernel-rwlock","tags":["Linux","内核"],"summary":"前段时间看了《Linux内核设计与实现》，第 10 章「内核同步方法」中提到了几种内核中的读写锁。它们分别代表了几种比较典型的读写锁设计，非常值得学习，这里记录一下，讨论是基于 2.6 内核和 x86 体系结构的基础上进行的","title":"从 Linux 内核看读写锁设计","status":"Published","category":"","comment":"","publishDate":1704326400000,"publishDay":"2024-1-4","lastEditedDate":"2024-08-27T15:25:28.206Z","lastEditedDay":"2024-8-27","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"Linux","color":"purple"},{"name":"内核","color":"blue"}],"href":"/post/kernel-rwlock","target":"_self","password":""},{"id":"d26ce18a-fa8d-4df4-8b82-69c419c5b621","date":{"start_date":"2023-12-31","date_format":"relative"},"type":"Post","slug":"post/2023summary","tags":["碎碎念"],"title":"2023 年度总结","status":"Published","category":"","comment":"","publishDate":1703980800000,"publishDay":"2023-12-31","lastEditedDate":"2024-08-27T15:25:27.095Z","lastEditedDay":"2024-8-27","fullWidth":false,"pageIcon":"","pageCover":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9e8551ce-463f-41bc-b07f-5a8362a94846%2F2023summary.jpg?table=block&id=d26ce18a-fa8d-4df4-8b82-69c419c5b621&t=d26ce18a-fa8d-4df4-8b82-69c419c5b621&width=800&cache=v2","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9e8551ce-463f-41bc-b07f-5a8362a94846%2F2023summary.jpg?table=block&id=d26ce18a-fa8d-4df4-8b82-69c419c5b621&t=d26ce18a-fa8d-4df4-8b82-69c419c5b621&width=800&cache=v2","ext":{},"tagItems":[{"name":"碎碎念","color":"red"}],"href":"/post/2023summary","target":"_self","password":""}],"post":{"id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","date":{"start_date":"2024-01-04","date_format":"relative"},"type":"Post","slug":"post/kernel-rwlock","tags":["Linux","内核"],"summary":"前段时间看了《Linux内核设计与实现》，第 10 章「内核同步方法」中提到了几种内核中的读写锁。它们分别代表了几种比较典型的读写锁设计，非常值得学习，这里记录一下，讨论是基于 2.6 内核和 x86 体系结构的基础上进行的","title":"从 Linux 内核看读写锁设计","status":"Published","category":"","comment":"","publishDate":1704326400000,"publishDay":"2024-1-4","lastEditedDate":"2024-08-27T15:25:28.206Z","lastEditedDay":"2024-8-27","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"Linux","color":"purple"},{"name":"内核","color":"blue"}],"href":"/post/kernel-rwlock","target":"_self","password":"","blockMap":{"block":{"0e96a78e-dec9-4620-b0e8-a2b889017cb7":{"value":{"id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","version":1111,"type":"page","content":["2bb0e815-dc84-4c36-9fe6-0a51dff19bc3","647ee4a1-79d7-44bd-809e-bc915f053b47","4b004ed9-2c30-4b24-91f5-38a1bf165989","7f68489a-411a-4f89-8f73-98af47202b8e","86cec0d3-4f30-4dab-b465-72a6d90f7d70","9956efea-c4f3-4338-9e59-a89f9bc0a788","1dffa3a0-d775-4fd3-a840-8610c872efcc","c04c15f8-950d-4885-98de-33514806f240","d7fa72a4-6a5e-410b-badb-6dc9fb0cf9ae","102b3b42-41e8-4393-a6ff-53455f411da9","c3e8a162-f3d2-4a4b-82a8-fd03688ddefa","4698c868-4f33-401e-8433-878c49debfb6","6f7e2be4-462c-428c-b4c8-8412234fcea8","b1d421c3-1168-448c-a86f-e631622f546c","2c7c25c2-9278-4825-b76d-7ba231153a54","7fd6b198-dda3-4e42-b8eb-d1581a9b5f38","8aa14d55-3d48-4a2d-8e28-614ac870aeb2","c2cf7300-48ea-4931-b18b-4897a8af5cce","ebdbc9bd-a7a0-4ddb-9613-f4dd61fda07c","042e17f9-ecce-4180-a058-16c8b4cdadbb","013143f2-1be0-43ea-9c9d-64f6da3e886f","9ec7d567-db12-4c30-9f43-92db09f1ed6f","5498661b-8f52-481e-b32e-baeddb9ed4b7","879748e3-6969-4137-82ab-57c7def4e3a3","dd69239e-8dfa-4f2e-9b25-cd74fa2882c5","dc9da1ee-7b0f-407a-965d-e94eef946f0c","b77e7413-135e-4ef0-9bb6-7ebe7a8d8689","638e5194-992d-44e4-a338-7ce229464bfa","ed8985cc-2e16-42c8-85f5-f8f327348a46","c4aa4ccd-cdc9-4630-8911-870731a73f0d","dae97109-d781-472c-b1d0-94851ac8120d","8fd5f188-5848-4057-8836-87e2321ee997","df5219d6-9a7b-4da6-8f31-05ce4522a251","a4f15e84-d359-4890-b40a-1da77b0b2a03","f12b26e9-c32b-4674-bb18-108035373cf4","2c290ddc-1e4f-497f-b028-492ba05e539c","9c431ea8-a967-4ec9-bbc6-2f1fc28400c8","e0a16190-e65d-4940-8304-4360e1625439","54b51ac1-90e1-4079-8b17-8b1fc7b51361","6617e139-5273-4749-a887-430e499e4b6a","8e70c463-7780-4396-bfa1-0b65ffd519ec","6b8515bb-62f5-4f66-b1ec-e847ebe9c53c","963410a7-6430-48b0-af06-50842568d3d8","fbb1a546-3ea6-4df0-a75a-f8e459aefd24","eb28d4c8-b33f-47ed-934a-2133f1818ea3","e1ceebcb-e6cf-4f64-a8fa-180e805617b0","fdec602b-399c-4734-a4c4-72b535503bf0","399a4b93-19bc-41d5-a5a9-2ff777f2c419","1b1540ef-43d8-4bd9-b8b7-ac09aae8cc9a","5d14d1fa-fd42-4b7d-ad2e-108131fe5fbf","fef94772-9570-4487-8c6f-47791d9601df"],"format":{"page_font":"mono","block_locked":false,"block_locked_by":"919e7400-5a69-4402-b2e1-f7d99cc48131","copied_from_pointer":{"id":"2eace25c-842c-46fd-9ccb-e9190981b6c3","table":"block","spaceId":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"page_cover_position":0.6,"social_media_image_preview_url":"https://prod-files-secure.s3.us-west-2.amazonaws.com/4cc04375-345a-4a1e-bdf0-3a7c88ef0425/deabf9b0-ed9e-4c90-aacd-422b1608cf8d/SocialMediaPreviewImage.png"},"created_time":1724598319568,"last_edited_time":1724772328206,"parent_id":"0bb2e606-8d0c-4f7c-aca9-70986e90c055","parent_table":"collection","alive":true,"copied_from":"2eace25c-842c-46fd-9ccb-e9190981b6c3","file_ids":["deabf9b0-ed9e-4c90-aacd-422b1608cf8d"],"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"0dc306ca-50a6-4917-9b5a-85a61f0f66f5":{"value":{"id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","version":144,"type":"collection_view_page","content":["c12d1fcb-2e22-4dc3-a5f5-b5010c63059a"],"view_ids":["2efe7048-0d5f-4e04-8b4e-2a3793ad6aef","55d7f55d-3bd1-4a1a-97c9-a6c8354ecd3d","8dfd415c-71af-41f9-b984-e7182bf2210b","3c2f93d8-6810-42a1-87da-55f1ecda9bca"],"collection_id":"0bb2e606-8d0c-4f7c-aca9-70986e90c055","format":{"site_id":"cd684fc1-aa3f-4897-8f3a-ec903e77f063","block_locked":false,"block_locked_by":"27074aef-7216-41ed-baef-d9b53addd870","collection_pointer":{"id":"0bb2e606-8d0c-4f7c-aca9-70986e90c055","table":"collection","spaceId":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"copied_from_pointer":{"id":"02ab3b86-7800-4aa6-9e9e-415905ef32a5","table":"block","spaceId":"6c096b44-beb9-48ee-8f92-1efdde47f3a3"},"page_cover_position":0.5,"social_media_image_preview_url":"https://prod-files-secure.s3.us-west-2.amazonaws.com/4cc04375-345a-4a1e-bdf0-3a7c88ef0425/16412a4f-3220-4021-b553-56a010794a94/SocialMediaPreviewImage.png"},"permissions":[{"role":"editor","type":"user_permission","user_id":"919e7400-5a69-4402-b2e1-f7d99cc48131"},{"role":"reader","type":"public_permission","added_timestamp":1724420656606,"allow_duplicate":false}],"created_time":1724383978099,"last_edited_time":1726915203161,"parent_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425","parent_table":"space","alive":true,"copied_from":"02ab3b86-7800-4aa6-9e9e-415905ef32a5","file_ids":["49b4570c-b2f0-457b-81b7-b68e2693a471","708d7d1d-6233-408b-952f-594bb2831de7","145cea07-09d7-4146-bcf5-bebd1518488c","a9af1d6b-f284-4734-ba06-990353cf3f84","20ee2bf3-8f75-4cd7-9d6e-e1a780d5f17c","16412a4f-3220-4021-b553-56a010794a94"],"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"2bb0e815-dc84-4c36-9fe6-0a51dff19bc3":{"value":{"id":"2bb0e815-dc84-4c36-9fe6-0a51dff19bc3","version":9,"type":"text","properties":{"title":[["前段时间看了《Linux内核设计与实现》，第 10 章「内核同步方法」中提到了几种内核中的读写锁。它们分别代表了几种比较典型的读写锁设计，非常值得学习，这里记录一下，讨论是基于 2.6 内核和 x86 体系结构的基础上进行的"]]},"created_time":1724598670609,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"647ee4a1-79d7-44bd-809e-bc915f053b47":{"value":{"id":"647ee4a1-79d7-44bd-809e-bc915f053b47","version":9,"type":"sub_header","properties":{"title":[["读/写自旋锁"]]},"created_time":1724598670610,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"4b004ed9-2c30-4b24-91f5-38a1bf165989":{"value":{"id":"4b004ed9-2c30-4b24-91f5-38a1bf165989","version":9,"type":"text","properties":{"title":[["内核代码中，要定义读/写自旋锁，通过下面的宏进行初始化："]]},"created_time":1724598670611,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"7f68489a-411a-4f89-8f73-98af47202b8e":{"value":{"id":"7f68489a-411a-4f89-8f73-98af47202b8e","version":9,"type":"code","properties":{"title":[["DEFINE_RWLOCK(mr_rwlock);"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670614,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"86cec0d3-4f30-4dab-b465-72a6d90f7d70":{"value":{"id":"86cec0d3-4f30-4dab-b465-72a6d90f7d70","version":9,"type":"text","properties":{"title":[["使用上读锁和写锁是分开加锁的"]]},"created_time":1724598670615,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"9956efea-c4f3-4338-9e59-a89f9bc0a788":{"value":{"id":"9956efea-c4f3-4338-9e59-a89f9bc0a788","version":21,"type":"code","properties":{"title":[["read_lock(&mr_rwlock);\n// 只读临界区\nread_unlock(&mr_rwlock);\n\nwrite_lock(&mr_rwlock);\n// 读写临界区\nwrite_unlock(&mr_rwlock);"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670615,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"1dffa3a0-d775-4fd3-a840-8610c872efcc":{"value":{"id":"1dffa3a0-d775-4fd3-a840-8610c872efcc","version":9,"type":"text","properties":{"title":[["不能",[["b"]]],["像这样将一个读锁升级成写锁，这会导致死锁；并且写锁也是不可重入的："]]},"created_time":1724598670616,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"c04c15f8-950d-4885-98de-33514806f240":{"value":{"id":"c04c15f8-950d-4885-98de-33514806f240","version":11,"type":"code","properties":{"title":[["read_lock(&mr_rwlock);\nwrite_lock(&mr_rwlock);"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670617,"last_edited_time":1724599312484,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"d7fa72a4-6a5e-410b-badb-6dc9fb0cf9ae":{"value":{"id":"d7fa72a4-6a5e-410b-badb-6dc9fb0cf9ae","version":3,"type":"text","created_time":1724598761273,"last_edited_time":1724598761274,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"102b3b42-41e8-4393-a6ff-53455f411da9":{"value":{"id":"102b3b42-41e8-4393-a6ff-53455f411da9","version":9,"type":"text","properties":{"title":[["读/写自旋锁的汇编级别实现比较类似信号量，都是在寄存器上对值做增减，但为了区分读锁和写锁，读锁是固定减 1，写锁则是固定减去一个很大的 magic number，通过结果值比较就能判断锁持有情况"]]},"created_time":1724598670617,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"c3e8a162-f3d2-4a4b-82a8-fd03688ddefa":{"value":{"id":"c3e8a162-f3d2-4a4b-82a8-fd03688ddefa","version":9,"type":"text","properties":{"title":[["代码分别位于 "],["include/asm-x86_64/rwlock.h",[["a","https://elixir.bootlin.com/linux/v2.6.0/source/include/asm-x86_64/rwlock.h"]]],[" 和 "],["/include/asm-x86_64/spinlock.h",[["a","https://elixir.bootlin.com/linux/v2.6.0/source/include/asm-x86_64/spinlock.h"]]],[" 中，这两块涉及的核心代码融合一下大致如下："]]},"created_time":1724598670619,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"4698c868-4f33-401e-8433-878c49debfb6":{"value":{"id":"4698c868-4f33-401e-8433-878c49debfb6","version":12,"type":"code","properties":{"title":[["#define RW_LOCK_BIAS 0x01000000\n\n// 初始化时设置这个值为 magic number\n#define rwlock_init(x)\tdo { *(x) = RW_LOCK_UNLOCKED; } while(0)\n\n// 获取读锁\n// 将eax寄存器指向的地址，也就是变量rw的值减1（subl $1）\n// 根据结果是否小于0（js 2f）做跳转，小于0就去调用传入的helper做获取失败的处理\n// 没有写锁的情况下是不会小于0的，不可能有这么多读者能让它减到0，所以不小于0就是获取成功\n#define __build_read_lock_ptr(rw, helper)   \\\n\tasm volatile(LOCK \"subl $1,(%0)\\n\\t\" \\ \n\t\t     \"js 2f\\n\" \\ \n\t\t     \"1:\\n\" \\\n\t\t    LOCK_SECTION_START(\"\") \\\n\t\t     \"2:\\tcall \" helper \"\\n\\t\" \\\n\t\t     \"jmp 1b\\n\" \\\n\t\t    LOCK_SECTION_END \\\n\t\t     ::\"a\" (rw) : \"memory\")\n\n// 传入的helper位于arch/i386/kernel/semaphore.c\n// 这里就是一个自旋的逻辑，持续操作rw直到它是大于等于0的，相当于:\n// \n// lock_failed:\n// rw++;\n// while(rw < 1) {}\n// rw--;\n// if(rw < 0) goto lock_failed;\n// \n// 这里结尾还要判断一次，是因为前面的操作整体上不是原子或互斥的，所以decl后要再check一下\nasm(\n\".text\\n\"\n\".align\t4\\n\"\n\".globl\t__read_lock_failed\\n\"\n\"__read_lock_failed:\\n\\t\"\n\tLOCK \"incl\t(%eax)\\n\"\n\"1:\trep; nop\\n\\t\"\n\t\"cmpl\t$1,(%eax)\\n\\t\"\n\t\"js\t1b\\n\\t\"\n\tLOCK \"decl\t(%eax)\\n\\t\"\n\t\"js\t__read_lock_failed\\n\\t\"\n\t\"ret\"\n);\n\n// 获取写锁\n// eax寄存器指向的地址值，也就是rw减去magic number\n// 判断结果是否刚好为0（jnz 2f），不是则说明有读锁在占用，跳转到helper调用\n#define __build_write_lock_ptr(rw, helper) \\\n\tasm volatile(LOCK \"subl $\" RW_LOCK_BIAS_STR \",(%0)\\n\\t\" \\\n\t\t     \"jnz 2f\\n\" \\\n\t\t     \"1:\\n\" \\\n\t\t     LOCK_SECTION_START(\"\") \\\n\t\t     \"2:\\tcall \" helper \"\\n\\t\" \\\n\t\t     \"jmp 1b\\n\" \\\n\t\t     LOCK_SECTION_END \\\n\t\t     ::\"a\" (rw) : \"memory\")\n\n// 写锁传入的helper同样位于arch/i386/kernel/semaphore.c\n// 逻辑和读锁的基本一样\nasm(\n\".text\\n\"\n\".align\t4\\n\"\n\".globl\t__write_lock_failed\\n\"\n\"__write_lock_failed:\\n\\t\"\n\tLOCK \"addl\t$\" RW_LOCK_BIAS_STR \",(%eax)\\n\"\n\"1:\trep; nop\\n\\t\"\n\t\"cmpl\t$\" RW_LOCK_BIAS_STR \",(%eax)\\n\\t\"\n\t\"jne\t1b\\n\\t\"\n\tLOCK \"subl\t$\" RW_LOCK_BIAS_STR \",(%eax)\\n\\t\"\n\t\"jnz\t__write_lock_failed\\n\\t\"\n\t\"ret\"\n);\n\n// 解锁时就是加上1或magic number\n#define _raw_read_unlock(rw) asm volatile(\"lock ; incl %0\" :\"=m\" ((rw)->lock) : : \"memory\")\n#define _raw_write_unlock(rw)\tasm volatile(\"lock ; addl $\" RW_LOCK_BIAS_STR \",%0\":\"=m\" ((rw)->lock) : : \"memory\")"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670620,"last_edited_time":1724598769444,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"6f7e2be4-462c-428c-b4c8-8412234fcea8":{"value":{"id":"6f7e2be4-462c-428c-b4c8-8412234fcea8","version":9,"type":"text","properties":{"title":[["可以看出，读/写自旋锁是"],["读优先",[["b"]]],["的，会导致写饥饿。当有一个或多个读者持有读锁时，写操作无法获取锁，如果此时读锁被长时间占有，写锁将一直自旋等待，此时自旋会导致一个核心上的高昂开销"]]},"created_time":1724598670622,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"b1d421c3-1168-448c-a86f-e631622f546c":{"value":{"id":"b1d421c3-1168-448c-a86f-e631622f546c","version":3,"type":"text","created_time":1724598776091,"last_edited_time":1724598776092,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"2c7c25c2-9278-4825-b76d-7ba231153a54":{"value":{"id":"2c7c25c2-9278-4825-b76d-7ba231153a54","version":9,"type":"text","properties":{"title":[["这里有一个处理上的细节，在真正开始自旋获取到写锁之前，就已经互斥了（减去 magic number），这时候新的读锁是无法获取的，这避免了写锁和读锁的争抢，能稍微缓解下写饥饿问题，例如这样的情况："]]},"created_time":1724598670622,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"7fd6b198-dda3-4e42-b8eb-d1581a9b5f38":{"value":{"id":"7fd6b198-dda3-4e42-b8eb-d1581a9b5f38","version":9,"type":"code","properties":{"title":[["                            TIME\n─────────────────────────────────────────────────────────►\n ┌──────────────┐\n │    reader    │\n └──────────────┘\n     ┌──────────┬────────────────────┐\n     │   spin   │       writer       │\n     └──────────┴────────────────────┘\n           ┌─────────────────────────┬───────────────┐\n           │           spin          │     reader    │\n           └─────────────────────────┴───────────────┘\n                        ┌────────────┬───────────┐\n                        │    spin    │   reader  │\n                        └────────────┴───────────┘"]],"language":[["Plain Text"]]},"format":{"code_wrap":true},"created_time":1724598670623,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"8aa14d55-3d48-4a2d-8e28-614ac870aeb2":{"value":{"id":"8aa14d55-3d48-4a2d-8e28-614ac870aeb2","version":3,"type":"text","created_time":1724598778480,"last_edited_time":1724598778480,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"c2cf7300-48ea-4931-b18b-4897a8af5cce":{"value":{"id":"c2cf7300-48ea-4931-b18b-4897a8af5cce","version":9,"type":"sub_header","properties":{"title":[["读/写信号量"]]},"created_time":1724598670623,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"ebdbc9bd-a7a0-4ddb-9613-f4dd61fda07c":{"value":{"id":"ebdbc9bd-a7a0-4ddb-9613-f4dd61fda07c","version":9,"type":"text","properties":{"title":[["读/写信号量的使用上和读/写自旋锁是类似的，但功能上要强大一些，分别支持静态和动态的初始化方法"]]},"created_time":1724598670624,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"042e17f9-ecce-4180-a058-16c8b4cdadbb":{"value":{"id":"042e17f9-ecce-4180-a058-16c8b4cdadbb","version":12,"type":"code","properties":{"title":[["// 静态定义\nstatic DECLARE_RWSEM(name);\n// 动态定义\ninit_rwsem(struct rw_semaphore *sem);"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670624,"last_edited_time":1724598783551,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"013143f2-1be0-43ea-9c9d-64f6da3e886f":{"value":{"id":"013143f2-1be0-43ea-9c9d-64f6da3e886f","version":9,"type":"text","properties":{"title":[["读/写信号量支持 trylock 操作和动态地将写锁降级为读锁"]]},"created_time":1724598670625,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"9ec7d567-db12-4c30-9f43-92db09f1ed6f":{"value":{"id":"9ec7d567-db12-4c30-9f43-92db09f1ed6f","version":12,"type":"code","properties":{"title":[["static DECLARE_RWSEM(mr_rwsem);\n\ndown_read(&mr_rwsem);\n// 只读临界区\nup_read(&mr_rwsem);\n\ndown_write(&mr_rwsem);\n// 读写临界区\nup_write(&mr_rwsem);\n\ndown_write(&mr_rwsem);\n// 读写临界区\ndowngrade_write(&mr_rwsem); // 写锁降级读锁\n// 只读临界区\nup_read(&mr_rwsem);"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670625,"last_edited_time":1724598787176,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"5498661b-8f52-481e-b32e-baeddb9ed4b7":{"value":{"id":"5498661b-8f52-481e-b32e-baeddb9ed4b7","version":3,"type":"text","created_time":1724598790698,"last_edited_time":1724598790698,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"879748e3-6969-4137-82ab-57c7def4e3a3":{"value":{"id":"879748e3-6969-4137-82ab-57c7def4e3a3","version":9,"type":"text","properties":{"title":[["include/asm-x86_64/rwsem.h",[["a","https://elixir.bootlin.com/linux/v2.6.0/source/include/asm-x86_64/rwsem.h#L99"]]],[" 中定义了汇编级别上的实现，和前面读/写自旋锁是类似的，但没有自旋，这里就不细说，内核源码这里也直接附带注释了："]]},"created_time":1724598670626,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"dd69239e-8dfa-4f2e-9b25-cd74fa2882c5":{"value":{"id":"dd69239e-8dfa-4f2e-9b25-cd74fa2882c5","version":12,"type":"code","properties":{"title":[["#define RWSEM_UNLOCKED_VALUE\t\t  0x00000000\n#define RWSEM_ACTIVE_BIAS\t\t      0x00000001\n#define RWSEM_ACTIVE_MASK\t\t      0x0000ffff\n#define RWSEM_WAITING_BIAS\t\t    (-0x00010000)\n#define RWSEM_ACTIVE_READ_BIAS\t\tRWSEM_ACTIVE_BIAS\n#define RWSEM_ACTIVE_WRITE_BIAS\t\t(RWSEM_WAITING_BIAS + RWSEM_ACTIVE_BIAS)\n\n/*\n * lock for reading\n */\nstatic inline void __down_read(struct rw_semaphore *sem)\n{\n\t__asm__ __volatile__(\n\t\t\"# beginning down_read\\n\\t\"\nLOCK_PREFIX\t\"  incl      (%%rdi)\\n\\t\" /* adds 0x00000001, returns the old value */\n\t\t\"  js        2f\\n\\t\" /* jump if we weren't granted the lock */\n\t\t\"1:\\n\\t\"\n\t\tLOCK_SECTION_START(\"\") \\\n\t\t\"2:\\n\\t\"\n\t\t\"  call      rwsem_down_read_failed_thunk\\n\\t\"\n\t\t\"  jmp       1b\\n\"\n\t\tLOCK_SECTION_END \\\n\t\t\"# ending down_read\\n\\t\"\n\t\t: \"+m\"(sem->count)\n\t\t: \"D\"(sem)\n\t\t: \"memory\", \"cc\");\n}\n\n/*\n * lock for writing\n */\nstatic inline void __down_write(struct rw_semaphore *sem)\n{\n\tint tmp;\n\n\ttmp = RWSEM_ACTIVE_WRITE_BIAS;\n\t__asm__ __volatile__(\n\t\t\"# beginning down_write\\n\\t\"\nLOCK_PREFIX\t\"  xaddl      %0,(%%rdi)\\n\\t\" /* subtract 0x0000ffff, returns the old value */\n\t\t\"  testl     %0,%0\\n\\t\" /* was the count 0 before? */\n\t\t\"  jnz       2f\\n\\t\" /* jump if we weren't granted the lock */\n\t\t\"1:\\n\\t\"\n\t\tLOCK_SECTION_START(\"\")\n\t\t\"2:\\n\\t\"\n\t\t\"  call      rwsem_down_write_failed_thunk\\n\\t\"\n\t\t\"  jmp       1b\\n\"\n\t\tLOCK_SECTION_END\n\t\t\"# ending down_write\"\n\t\t: \"=&r\" (tmp) \n\t\t: \"0\"(tmp), \"D\"(sem)\n\t\t: \"memory\", \"cc\");\n}\n\n/*\n * unlock after reading\n */\nstatic inline void __up_read(struct rw_semaphore *sem)\n{\n\t__s32 tmp = -RWSEM_ACTIVE_READ_BIAS;\n\t__asm__ __volatile__(\n\t\t\"# beginning __up_read\\n\\t\"\nLOCK_PREFIX\t\"  xaddl      %[tmp],(%%rdi)\\n\\t\" /* subtracts 1, returns the old value */\n\t\t\"  js        2f\\n\\t\" /* jump if the lock is being waited upon */\n\t\t\"1:\\n\\t\"\n\t\tLOCK_SECTION_START(\"\")\n\t\t\"2:\\n\\t\"\n\t\t\"  decw      %w[tmp]\\n\\t\" /* do nothing if still outstanding active readers */\n\t\t\"  jnz       1b\\n\\t\"\n\t\t\"  call      rwsem_wake_thunk\\n\\t\"\n\t\t\"  jmp       1b\\n\"\n\t\tLOCK_SECTION_END\n\t\t\"# ending __up_read\\n\"\n\t\t: \"+m\"(sem->count), [tmp] \"+r\" (tmp)\n\t\t: \"D\"(sem)\n\t\t: \"memory\", \"cc\");\n}\n\n/*\n * unlock after writing\n */\nstatic inline void __up_write(struct rw_semaphore *sem)\n{\n\tunsigned tmp; \n\t__asm__ __volatile__(\n\t\t\"# beginning __up_write\\n\\t\"\n\t\t\"  movl     %[bias],%[tmp]\\n\\t\"\nLOCK_PREFIX\t\"  xaddl     %[tmp],(%%rdi)\\n\\t\" /* tries to transition 0xffff0001 -> 0x00000000 */\n\t\t\"  jnz       2f\\n\\t\" /* jump if the lock is being waited upon */\n\t\t\"1:\\n\\t\"\n\t\tLOCK_SECTION_START(\"\")\n\t\t\"2:\\n\\t\"\n\t\t\"  decw      %w[tmp]\\n\\t\" /* did the active count reduce to 0? */\n\t\t\"  jnz       1b\\n\\t\" /* jump back if not */\n\t\t\"  call      rwsem_wake_thunk\\n\\t\"\n\t\t\"  jmp       1b\\n\"\n\t\tLOCK_SECTION_END\n\t\t\"# ending __up_write\\n\"\n\t\t: \"+m\"(sem->count), [tmp] \"=r\" (tmp)\n\t\t: \"D\"(sem), [bias] \"i\"(-RWSEM_ACTIVE_WRITE_BIAS)\n\t\t: \"memory\", \"cc\");\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670628,"last_edited_time":1724598798557,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"dc9da1ee-7b0f-407a-965d-e94eef946f0c":{"value":{"id":"dc9da1ee-7b0f-407a-965d-e94eef946f0c","version":3,"type":"text","created_time":1724598804394,"last_edited_time":1724598804395,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"b77e7413-135e-4ef0-9bb6-7ebe7a8d8689":{"value":{"id":"b77e7413-135e-4ef0-9bb6-7ebe7a8d8689","version":9,"type":"text","properties":{"title":[["信号量是睡眠锁，读锁和写锁在获取锁失败时最后都会进入到 "],["rwsem_down_failed_common",[["c"]]],["（位于 "],["lib/rwsem.c",[["a","https://elixir.bootlin.com/linux/v2.6.0/source/lib/rwsem.c#L123"]]],["） 中，这里会将进程加入等待队列中，然后重新调度进程"]]},"created_time":1724598670629,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"638e5194-992d-44e4-a338-7ce229464bfa":{"value":{"id":"638e5194-992d-44e4-a338-7ce229464bfa","version":12,"type":"code","properties":{"title":[["static inline struct rw_semaphore *rwsem_down_failed_common(struct rw_semaphore *sem,\n\t\t\t\t\t\t\t\t struct rwsem_waiter *waiter,\n\t\t\t\t\t\t\t\t signed long adjustment)\n{\n\tstruct task_struct *tsk = current;\n\tsigned long count;\n\n\tset_task_state(tsk,TASK_UNINTERRUPTIBLE);\n\n\t/* set up my own style of waitqueue */\n\tspin_lock(&sem->wait_lock);\n\twaiter->task = tsk;\n\n\tlist_add_tail(&waiter->list,&sem->wait_list);\n\n\t/* note that we're now waiting on the lock, but no longer actively read-locking */\n\tcount = rwsem_atomic_update(adjustment,sem);\n\n\t/* if there are no longer active locks, wake the front queued process(es) up\n\t * - it might even be this process, since the waker takes a more active part\n\t */\n\tif (!(count & RWSEM_ACTIVE_MASK))\n\t\tsem = __rwsem_do_wake(sem,1);\n\n\tspin_unlock(&sem->wait_lock);\n\n\t/* wait to be given the lock */\n\tfor (;;) {\n\t\tif (!waiter->flags)\n\t\t\tbreak;\n\t\tschedule();\n\t\tset_task_state(tsk, TASK_UNINTERRUPTIBLE);\n\t}\n\n\ttsk->state = TASK_RUNNING;\n\n\treturn sem;\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670630,"last_edited_time":1724598810633,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"ed8985cc-2e16-42c8-85f5-f8f327348a46":{"value":{"id":"ed8985cc-2e16-42c8-85f5-f8f327348a46","version":3,"type":"text","created_time":1724598816434,"last_edited_time":1724598816435,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"c4aa4ccd-cdc9-4630-8911-870731a73f0d":{"value":{"id":"c4aa4ccd-cdc9-4630-8911-870731a73f0d","version":9,"type":"text","properties":{"title":[["值得一提的是 "],["trylock",[["c"]]],[" 和 "],["downgrade_write",[["c"]]],[" 操作，这两个操作是读/写自旋锁中没有的"]]},"created_time":1724598670632,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"dae97109-d781-472c-b1d0-94851ac8120d":{"value":{"id":"dae97109-d781-472c-b1d0-94851ac8120d","version":9,"type":"text","properties":{"title":[["两个 "],["trylock",[["c"]]],[" 是类似的，都是用 "],["cmpxchg",[["c"]]],[" 指令来做 CAS（compare-and-swap） 操作。写锁的 "],["trylock",[["c"]]],[" 比较简单，因为是互斥的，所以只需要对初始值做 CAS 即可。而读锁可能被持有多个，所以它的 "],["trylock",[["c"]]],[" 需要先将 "],["sem->count",[["c"]]],[" 赋值给 "],["tmp",[["c"]]],["，再自增 "],["tmp",[["c"]]],[" ，利用 "],["tmp",[["c"]]],[" 的值进行 CAS"]]},"created_time":1724598670633,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"8fd5f188-5848-4057-8836-87e2321ee997":{"value":{"id":"8fd5f188-5848-4057-8836-87e2321ee997","version":12,"type":"code","properties":{"title":[["/*\n * trylock for reading -- returns 1 if successful, 0 if contention\n */\nstatic inline int __down_read_trylock(struct rw_semaphore *sem)\n{\n\t__s32 result, tmp;\n\t__asm__ __volatile__(\n\t\t\"# beginning __down_read_trylock\\n\\t\"\n\t\t\"  movl      %0,%1\\n\\t\"\n\t\t\"1:\\n\\t\"\n\t\t\"  movl\t     %1,%2\\n\\t\"\n\t\t\"  addl      %3,%2\\n\\t\"\n\t\t\"  jle\t     2f\\n\\t\"\nLOCK_PREFIX\t\"  cmpxchgl  %2,%0\\n\\t\"\n\t\t\"  jnz\t     1b\\n\\t\"\n\t\t\"2:\\n\\t\"\n\t\t\"# ending __down_read_trylock\\n\\t\"\n\t\t: \"+m\"(sem->count), \"=&a\"(result), \"=&r\"(tmp)\n\t\t: \"i\"(RWSEM_ACTIVE_READ_BIAS)\n\t\t: \"memory\", \"cc\");\n\treturn result>=0 ? 1 : 0;\n}\n\n/*\n * trylock for writing -- returns 1 if successful, 0 if contention\n */\nstatic inline int __down_write_trylock(struct rw_semaphore *sem)\n{\n\tsigned long ret = cmpxchg(&sem->count,\n\t\t\t\t  RWSEM_UNLOCKED_VALUE, \n\t\t\t\t  RWSEM_ACTIVE_WRITE_BIAS);\n\tif (ret == RWSEM_UNLOCKED_VALUE)\n\t\treturn 1;\n\treturn 0;\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670634,"last_edited_time":1724598820829,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"df5219d6-9a7b-4da6-8f31-05ce4522a251":{"value":{"id":"df5219d6-9a7b-4da6-8f31-05ce4522a251","version":9,"type":"text","properties":{"title":[["downgrade_write 的实现则类似写锁解锁，然后判断是否有必要唤醒等待队列中的项，这里其实和写锁解锁（"],["up_write",[["c"]]],["）的主要差别就是给 "],["sem->count",[["c"]]],[" 加上的偏移量少了 1（可以回去看前面几个 "],["RWSEM_",[["c"]]],[" 开头的宏定义），而这个 1 就是读锁占的值"]]},"created_time":1724598670635,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"a4f15e84-d359-4890-b40a-1da77b0b2a03":{"value":{"id":"a4f15e84-d359-4890-b40a-1da77b0b2a03","version":12,"type":"code","properties":{"title":[["/*\n * downgrade write lock to read lock\n */\nstatic inline void __downgrade_write(struct rw_semaphore *sem)\n{\n\t__asm__ __volatile__(\n\t\t\"# beginning __downgrade_write\\n\\t\"\nLOCK_PREFIX\t\"  addl      %[bias],(%%rdi)\\n\\t\" /* transitions 0xZZZZ0001 -> 0xYYYY0001 */\n\t\t\"  js        2f\\n\\t\" /* jump if the lock is being waited upon */\n\t\t\"1:\\n\\t\"\n\t\tLOCK_SECTION_START(\"\")\n\t\t\"2:\\n\\t\"\n\t\t\"  call\t     rwsem_downgrade_thunk\\n\"\n\t\t\"  jmp       1b\\n\"\n\t\tLOCK_SECTION_END\n\t\t\"# ending __downgrade_write\\n\"\n\t\t: \"=m\"(sem->count)\n\t\t: \"D\"(sem), [bias] \"i\"(-RWSEM_WAITING_BIAS), \"m\"(sem->count)\n\t\t: \"memory\", \"cc\");\n}\n\n/*\n * downgrade a write lock into a read lock\n * - caller incremented waiting part of count, and discovered it to be still negative\n * - just wake up any readers at the front of the queue\n */\nstruct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem)\n{\n\trwsemtrace(sem,\"Entering rwsem_downgrade_wake\");\n\n\tspin_lock(&sem->wait_lock);\n\n\t/* do nothing if list empty */\n\tif (!list_empty(&sem->wait_list))\n\t\tsem = __rwsem_do_wake(sem,0);\n\n\tspin_unlock(&sem->wait_lock);\n\n\trwsemtrace(sem,\"Leaving rwsem_downgrade_wake\");\n\treturn sem;\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670636,"last_edited_time":1724598830298,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"f12b26e9-c32b-4674-bb18-108035373cf4":{"value":{"id":"f12b26e9-c32b-4674-bb18-108035373cf4","version":9,"type":"text","properties":{"title":[["总结一下，读/写信号量和读/写自旋锁类似，两者语义上是相同的，也都是读优先的，只不过信号量是睡眠锁，当有长时间获取不到锁的情况时，不会导致过多的 CPU 开销"]]},"created_time":1724598670638,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"2c290ddc-1e4f-497f-b028-492ba05e539c":{"value":{"id":"2c290ddc-1e4f-497f-b028-492ba05e539c","version":3,"type":"text","created_time":1724598834611,"last_edited_time":1724598834612,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"9c431ea8-a967-4ec9-bbc6-2f1fc28400c8":{"value":{"id":"9c431ea8-a967-4ec9-bbc6-2f1fc28400c8","version":9,"type":"sub_header","properties":{"title":[["顺序锁"]]},"created_time":1724598670638,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"e0a16190-e65d-4940-8304-4360e1625439":{"value":{"id":"e0a16190-e65d-4940-8304-4360e1625439","version":9,"type":"text","properties":{"title":[["顺序锁和前面两者有个重要的区别，顺序锁是"],["写优先",[["b"]]],["的，让我们来分析下它是如何实现的"]]},"created_time":1724598670639,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"54b51ac1-90e1-4079-8b17-8b1fc7b51361":{"value":{"id":"54b51ac1-90e1-4079-8b17-8b1fc7b51361","version":9,"type":"text","properties":{"title":[["首先还是使用方式上："]]},"created_time":1724598670640,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"6617e139-5273-4749-a887-430e499e4b6a":{"value":{"id":"6617e139-5273-4749-a887-430e499e4b6a","version":12,"type":"code","properties":{"title":[["// 定义一个顺序锁\nseqlock_t mr_seq_lock = DEFINE_SEQLOCK(mr_seq_lock);\n\nwrite_seqlock(&mr_seq_lock);\n// 读写临界区\nwrite_sequnlock(&mr_seq_lock);\n\n// 读锁的使用有较大区别\nunsigned long seq;\ndo {\n\tseq = read_seqbegin(&mr_seq_lock);\n  // 读取数据...\n} while (read_seqretry(&mr_seq_lock, seq));"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670641,"last_edited_time":1724598843522,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"8e70c463-7780-4396-bfa1-0b65ffd519ec":{"value":{"id":"8e70c463-7780-4396-bfa1-0b65ffd519ec","version":9,"type":"text","properties":{"title":[["一个使用例子是内核的 jiffies，它存储了机器启动到当前的时钟节拍，每次时钟中断时都会更新这个值，所以是一个高频写入的场景，"],["get_jiffies_64()",[["c"]]],[" 函数用来获取这个值，它的实现是这样的"]]},"created_time":1724598670641,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"6b8515bb-62f5-4f66-b1ec-e847ebe9c53c":{"value":{"id":"6b8515bb-62f5-4f66-b1ec-e847ebe9c53c","version":12,"type":"code","properties":{"title":[["u64 get_jiffies_64(void)\n{\n\tunsigned long seq;\n\tu64 ret;\n\n\tdo {\n\t\tseq = read_seqbegin(&xtime_lock);\n\t\tret = jiffies_64;\n\t} while (read_seqretry(&xtime_lock, seq));\n\treturn ret;\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670642,"last_edited_time":1724598848270,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"963410a7-6430-48b0-af06-50842568d3d8":{"value":{"id":"963410a7-6430-48b0-af06-50842568d3d8","version":9,"type":"text","properties":{"title":[["顺序锁在读取时需要一个循环，这是为了判断在这个过程中是否有发生写入，如果没有，那么读取就是安全的，否则需要重试"]]},"created_time":1724598670643,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"fbb1a546-3ea6-4df0-a75a-f8e459aefd24":{"value":{"id":"fbb1a546-3ea6-4df0-a75a-f8e459aefd24","version":9,"type":"text","properties":{"title":[["实现上，代码位于 "],["/include/linux/seqlock.h",[["a","https://elixir.bootlin.com/linux/v2.6.0/source/include/linux/seqlock.h#L50"]]],["，有比较清晰的注释："]]},"created_time":1724598670644,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"eb28d4c8-b33f-47ed-934a-2133f1818ea3":{"value":{"id":"eb28d4c8-b33f-47ed-934a-2133f1818ea3","version":12,"type":"code","properties":{"title":[["#define SEQLOCK_UNLOCKED { 0, SPIN_LOCK_UNLOCKED }\n#define seqlock_init(x)\tdo { *(x) = (seqlock_t) SEQLOCK_UNLOCKED; } while (0)\n\n/* Lock out other writers and update the count.\n * Acts like a normal spin_lock/unlock.\n * Don't need preempt_disable() because that is in the spin_lock already.\n */\nstatic inline void write_seqlock(seqlock_t *sl)\n{\n\tspin_lock(&sl->lock);\n\t++sl->sequence;\n\tsmp_wmb();\t\t\t\n}\t\n\nstatic inline void write_sequnlock(seqlock_t *sl) \n{\n\tsmp_wmb();\n\tsl->sequence++;\n\tspin_unlock(&sl->lock);\n}\n\nstatic inline int write_tryseqlock(seqlock_t *sl)\n{\n\tint ret = spin_trylock(&sl->lock);\n\n\tif (ret) {\n\t\t++sl->sequence;\n\t\tsmp_wmb();\t\t\t\n\t}\n\treturn ret;\n}\n\n/* Start of read calculation -- fetch last complete writer token */\nstatic inline unsigned read_seqbegin(const seqlock_t *sl)\n{\n\tunsigned ret = sl->sequence;\n\tsmp_rmb();\n\treturn ret;\n}\n\n/* Test if reader processed invalid data.\n * If initial values is odd, \n *\tthen writer had already started when section was entered\n * If sequence value changed\n *\tthen writer changed data while in section\n *    \n * Using xor saves one conditional branch.\n */\nstatic inline int read_seqretry(const seqlock_t *sl, unsigned iv)\n{\n\tsmp_rmb();\n\treturn (iv & 1) | (sl->sequence ^ iv);\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1724598670645,"last_edited_time":1724598857177,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"e1ceebcb-e6cf-4f64-a8fa-180e805617b0":{"value":{"id":"e1ceebcb-e6cf-4f64-a8fa-180e805617b0","version":9,"type":"text","properties":{"title":[["可以看到，顺序锁是基于一个自旋锁实现的。但额外依赖一个序列计数器，当获取写锁时，这个序列值会增加。读取数据时要先调用 "],["read_seqbegin",[["c"]]],["，它会返回这个序列值，读取完成后通过 "],["read_seqretry",[["c"]]],[" 检查传入的值 "],["iv",[["c"]]],["，满足以下两个条件则说明读是安全的："]]},"created_time":1724598670646,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"fdec602b-399c-4734-a4c4-72b535503bf0":{"value":{"id":"fdec602b-399c-4734-a4c4-72b535503bf0","version":9,"type":"bulleted_list","properties":{"title":[["如果 "],["iv",[["c"]]],[" 是偶数（初始值为 0，写锁会加 1）则说明不是处在一个写操作进行的过程中"]]},"created_time":1724598670647,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"399a4b93-19bc-41d5-a5a9-2ff777f2c419":{"value":{"id":"399a4b93-19bc-41d5-a5a9-2ff777f2c419","version":9,"type":"bulleted_list","properties":{"title":[["iv",[["c"]]],[" 和序列值相同（相同值异或结果为 0）说明没有写操作发生过"]]},"created_time":1724598670648,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"1b1540ef-43d8-4bd9-b8b7-ac09aae8cc9a":{"value":{"id":"1b1540ef-43d8-4bd9-b8b7-ac09aae8cc9a","version":9,"type":"text","properties":{"title":[["这两者都满足，读取的值就是有效的"]]},"created_time":1724598670648,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"5d14d1fa-fd42-4b7d-ad2e-108131fe5fbf":{"value":{"id":"5d14d1fa-fd42-4b7d-ad2e-108131fe5fbf","version":3,"type":"text","created_time":1724598862463,"last_edited_time":1724598862464,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"fef94772-9570-4487-8c6f-47791d9601df":{"value":{"id":"fef94772-9570-4487-8c6f-47791d9601df","version":9,"type":"text","properties":{"title":[["所以，顺序锁是一种"],["乐观锁",[["b"]]],["，是不存在「读锁」的，而是通过类似版本号的机制来读，因此只要没有其他写者，随时都可以获取到写锁，以此实现写优先"]]},"created_time":1724598670649,"last_edited_time":1724598747987,"parent_id":"0e96a78e-dec9-4620-b0e8-a2b889017cb7","parent_table":"block","alive":true,"ignore_block_count":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"}},"collection":{"0bb2e606-8d0c-4f7c-aca9-70986e90c055":{"value":{"id":"0bb2e606-8d0c-4f7c-aca9-70986e90c055","version":78,"name":[["x³u³"]],"description":[["🗒 碎碎念"]],"schema":{"@NcA":{"name":"password","type":"text"},"Dj]h":{"name":"icon","type":"text"},"NX\\Q":{"name":"date","type":"date","date_format":"YYYY/MM/DD"},"`gQ~":{"name":"type","type":"select","options":[{"id":"5aff2f95-fd1e-489b-8840-bf10bc9519cb","color":"purple","value":"Post","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"374d2bc6-a144-4832-8ca4-474aaae0ea1f","color":"orange","value":"Page","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"95b7fea5-98b3-476e-892f-79e8f36d0633","color":"brown","value":"Notice","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"2287395b-9f64-4852-b46f-ff3df4b4acef","color":"yellow","value":"Menu","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"50fefd65-c28e-4806-9183-aa12995f11f3","color":"pink","value":"SubMenu","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"b945f57d-dbcc-4603-9fab-5cfe447aad1b","color":"red","value":"Config","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]}]},"bB{M":{"name":"category","type":"select"},"d]hq":{"name":"slug","type":"text"},"sD^m":{"name":"tags","type":"multi_select","options":[{"id":"a027d99d-be10-412d-b94a-8c61f6eacc29","color":"default","value":"存储","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"4bd9608a-d7d6-4597-beb7-d4849da04909","color":"gray","value":"分布式系统","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"ad04c718-fd54-4374-bfed-6c7e9dc65e01","color":"blue","value":"折腾","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"25bff120-77fb-40f1-9531-00997afcb444","color":"purple","value":"Linux","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"e12d005d-ec78-4876-950d-2399744abbaa","color":"blue","value":"内核","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"c7950cbd-8d2c-4cbe-8bb1-679fb433a74f","color":"red","value":"碎碎念","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"be9970b9-6fe4-4351-92c2-1e3e41d2a3e3","color":"brown","value":"Cloud Native","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"61c97435-c65a-40b1-9e95-2c6345b6f9d3","color":"pink","value":"Vim","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"d18e22d6-cbbb-4311-9928-7c5b58124456","color":"orange","value":"论文阅读","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"526115da-04f3-4be2-8a47-c83c7576b0de","color":"green","value":"Kubernetes","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"12016016-3ecc-4ee7-92c6-6973678fdd05","color":"yellow","value":"数据库","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"1edc83b3-f351-4a21-aafc-3b059d0c0f22","color":"brown","value":"Raft","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"158014da-08eb-49f4-97ad-1ce6f6e0ee5c","color":"orange","value":"Rust","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]}]},"wz|S":{"name":"summary","type":"text"},"title":{"name":"title","type":"title"},"f211bdc0-ee00-4186-9a7d-f68c055ec2ee":{"name":"status","type":"select","options":[{"id":"7abc61d4-b405-480d-b699-12588755fa65","color":"red","value":"Published","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"d1242312-e0a8-456d-b8f0-6e998e2c4fb2","color":"orange","value":"Invisible","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]},{"id":"41d5f5c6-b53c-42bc-8e0f-fc9402048480","color":"yellow","value":"Draft","collectionIds":["0bb2e606-8d0c-4f7c-aca9-70986e90c055"]}]}},"icon":"https://prod-files-secure.s3.us-west-2.amazonaws.com/4cc04375-345a-4a1e-bdf0-3a7c88ef0425/49b4570c-b2f0-457b-81b7-b68e2693a471/avatar.png","cover":"https://prod-files-secure.s3.us-west-2.amazonaws.com/4cc04375-345a-4a1e-bdf0-3a7c88ef0425/a9af1d6b-f284-4734-ba06-990353cf3f84/Elaina.jpg","format":{"copied_from_pointer":{"id":"4379bc14-5d22-453b-a153-12639616fc01","table":"collection","spaceId":"6c096b44-beb9-48ee-8f92-1efdde47f3a3"},"property_visibility":[{"property":"`gQ~","visibility":"show"},{"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee","visibility":"show"},{"property":"NX\\Q","visibility":"show"},{"property":"d]hq","visibility":"show"},{"property":"wz|S","visibility":"show"},{"property":"sD^m","visibility":"show"},{"property":"bB{M","visibility":"show"},{"property":"Dj]h","visibility":"hide_if_empty"},{"property":"uHoD","visibility":"show"},{"property":"kiCR","visibility":"hide"}],"ai_suggested_properties":[{"name":"created by","type":"person"},{"name":"updated at","type":"date"},{"name":"priority","type":"select","options":[{"id":"OqCJ","color":"purple","value":"low"},{"id":"X{Pz","color":"pink","value":"medium"},{"id":"LRCx","color":"red","value":"high"},{"id":"VY?=","color":"yellow","value":"urgent"}]},{"name":"visibility","type":"select","options":[{"id":"Q=_{","color":"red","value":"public"},{"id":"A|Nj","color":"green","value":"private"},{"id":"MWlx","color":"gray","value":"restricted"}]},{"name":"attachments","type":"file"},{"name":"related links","type":"multi_select","options":[{"id":"I^W>","color":"default","value":"documentation"},{"id":"<g\\P","color":"yellow","value":"tutorials"},{"id":"RMVI","color":"gray","value":"references"}]},{"name":"estimated completion","type":"date"},{"name":"contact email","type":"email"},{"name":"contact phone","type":"phone_number"},{"name":"is active","type":"checkbox"}],"collection_cover_position":0.6486,"collection_page_properties":[{"visible":false,"property":"`gQ~"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"Dj]h"},{"visible":true,"property":"@NcA"},{"visible":true,"property":"ckw_"}],"collection_default_template":{"template_page_id":"2eace25c-842c-46fd-9ccb-e9190981b6c3"}},"parent_id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","parent_table":"block","alive":true,"file_ids":["6cf3dc36-2f98-4f0e-9679-1bdbb1485129","5520bd92-e709-4c0d-ad58-06923f23f7e9","624d393a-62e3-4464-a1bf-1c79ecd4fbda","d52f6766-3e32-4c3d-8529-46e1f214360f","abe3a0aa-2aff-4274-81bb-c2443d4ef9e2","a2a32795-101d-46aa-a7f6-eb35b8750166","29db38d2-d5fa-4fa6-8a92-3b527cfe80d1","49b4570c-b2f0-457b-81b7-b68e2693a471","a9af1d6b-f284-4734-ba06-990353cf3f84"],"copied_from":"4379bc14-5d22-453b-a153-12639616fc01","template_pages":["2eace25c-842c-46fd-9ccb-e9190981b6c3"],"migrated":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"}},"collection_view":{"2efe7048-0d5f-4e04-8b4e-2a3793ad6aef":{"value":{"id":"2efe7048-0d5f-4e04-8b4e-2a3793ad6aef","version":76,"type":"table","name":"Table","format":{"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":247,"visible":true,"property":"title"},{"width":233,"visible":true,"property":"wz|S"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":219,"visible":true,"property":"sD^m"},{"width":184,"visible":true,"property":"d]hq"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":false,"property":"bB{M"},{"width":117,"visible":false,"property":"Dj]h"},{"width":100,"visible":false,"property":"@NcA"}],"table_frozen_column_index":-1,"collection_view_default_template":{"template_page_id":"2eace25c-842c-46fd-9ccb-e9190981b6c3"}},"parent_id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","parent_table":"block","alive":true,"page_sort":["cc459e5b-0f15-4a0c-83db-bb6bf2001aa3","a9bfecc8-9761-4987-9aca-af79d4ebbd0c","7aa40ad8-1e69-4d56-b245-d135d3101cec","e4eefa7d-e2f2-44ed-83f6-fd6951d50900","0f9b7a0d-ad15-4ece-8a8b-948d96b50ff7","58a216ce-4d8d-4b60-906c-6097c5fd8d41","b824f35b-aee9-4a22-81c9-d44b65f99f43","ba565c08-0d2f-46cb-9fcb-5eeface44dfb","560c76dd-c69f-429b-827d-7974407bb23f","0533a861-81cc-40fa-8ab8-5be721800b86","3578fa31-ea0a-4e07-82dc-28704e0dc685","f2625c60-ca69-493b-858c-bf38979f468c","96b14e20-e592-42f6-b7d2-357f4693f18c","fe8fafec-6d1b-4fbb-8a7a-fb079a6bb8e4","9345db3a-b8bd-4e02-b296-9734958eddb6","26e8ddc4-10b4-4765-a96d-e87290556164","840f0871-b58b-428d-8a28-0861947974b4","5787bc4f-06a4-4158-a27f-6c81fb9b1efe","e1bff221-486f-42c8-9cf3-6379f83f3510","2db01777-47d0-4230-bbe8-ef65ab694707","ab0d5acb-9230-4656-9c49-1aff13aba865","98330ff5-71d2-4ea9-945a-ba76fc282e9d","71439e60-5784-4dc5-b71f-e4cd7b0c4304","bfe53f5c-d4bd-4df7-a071-84db62310ad2","0606268b-9014-490d-b84d-d41d4be8df11","c09a05a2-6ab7-41e1-b23c-9e442cd61f6e","8bc2fda4-9fb5-4a89-95b8-c8c175e462c2","459c966a-bb34-47d2-ba4c-b1f0509ab033","022b3625-9f9f-42e0-a8a4-64bae1929d2f","d1a9da33-04a6-4f8b-8458-83aabde787be","40557fff-8f06-4643-be33-a0aab52b28be","b1c009da-991f-4449-b945-6bc4584cca98","fee7a505-5f8e-4186-9b2d-4c80ebee5077","df084444-e2d8-412a-bd56-c6b2c1046d5d","94e03781-e74c-41d0-89f7-df2e2a7ad93f","4e5d7fc0-68d5-4165-ba12-b2d8bfc7d92c","5b4b2d85-43c0-4edb-ad2d-0f14d79b4c4b","a06c26b2-5941-43ea-a89e-d0bebab47add","bde25ba8-2381-4da6-bb5e-5787ace45def","0e96a78e-dec9-4620-b0e8-a2b889017cb7","832b2511-aada-4c80-903c-1aadd7db46ce","2672b128-6cb0-4b3a-b54b-6b356a4ffbdd","634565f7-7a6e-4c4e-ac58-77b12c21f7ab","6e0bb534-679f-424e-80b3-e9bee483b7e8","da88c0a2-fce1-4336-97e7-61bc4149027a","0ee52933-5891-4387-a10c-921468884ab4","f086cce1-bf32-4be2-9fab-8529a2186ba3","e50dd6f9-49d4-4c3a-b723-da54361b34d5","3f554fe3-c9cb-4f63-99b2-f90f395308f6","eaf25f44-f59e-48d1-b475-a28066593688","af6f6570-0d18-4c3d-9145-3ee677a60c35","4c1d6186-e507-4ca2-9c02-d32dfbe2cca5","ff668a4c-0b15-45ec-9716-42f1af578ece","ce720858-10b7-4c0c-8083-906f29150a81","9ee7cbfe-3f95-4fc7-aab6-0d03c30a1e1b","3a554c07-e77f-43fa-ba66-ff39cf1e0ca5","4194acae-3f4b-4c08-98b9-907a0b5bd4b9","ce969492-bca9-4a45-8730-9ae753bdd027","368e5462-3dca-4c8b-ab1f-595cb04c56e0","d26ce18a-fa8d-4df4-8b82-69c419c5b621","3327d648-8e54-4edf-a38e-a9cba8884a1a","d5fd419b-4cb7-44c8-a8d7-0c8ed44c1963","deaccfa2-4562-437c-874e-fc5041f3fad5","f26f0a34-d6f1-419a-b91b-e0ea3639fe4b","a23d61e0-cc90-4068-bfb0-986afaf60ac5","cc463e20-63ea-4132-acea-84fc7307dde8","1eecd7c4-1e60-4aff-adbf-ccc85f820ef2","514ae2e3-a0d5-414c-86e5-ed5f8a9eb9c8","7b0eb02d-8b44-45f3-b593-52c0a62f4595","37c4cfd9-62a3-41bb-9989-f9df38c45d04","8aa3f594-ff5d-4f99-b0a2-fa09bb32ba84","806f9f46-c738-4c87-9957-e73d11ec44bd","64ac0e55-b2ae-4c80-8226-7a1f4b4ed8da","4d7cb2a6-768c-42c7-aad0-8e56168076d5","1e5f4845-8e82-4ab1-aad9-0d4c9eed2fde","37e5fc82-97ee-4a59-9d0b-1f44e2977cc9","1ccc4db8-78ca-45b9-947b-5d216a3e0667","f3550fb0-346c-4212-b57f-86433738b50b","7d2888d0-b55f-4909-97bf-944e56f19c0e","d9436315-195f-458c-93ac-09e5b8780171","51b42828-cae5-456b-9c2f-9b4b2232380e","280fbd32-0621-4ccb-babb-5790a693090e","1ffb90ba-821d-4d16-8520-e46604a470d7","adc7c47b-6dd7-439f-9e06-6075256c91a7","d6ba00e3-fb3f-4f30-9fa7-23c0b0712cdd","2eb83ae6-642d-45a1-a8a4-04463c20dc4b","c248bc92-b7a1-4f5b-a0a9-f1d5186a8dae","9900ca48-1c4f-44e3-9dae-ab5bd1633d6c","f9e566d7-45f7-4335-afe7-506247cd0b8e","a0b1590c-24bd-41dd-a6e0-b3cdac7bb4e6","8c6e229b-cbd3-4dc6-9b49-34f701a8aead","1467d162-f107-4606-b5dc-ec538ede0fdd","09bb7c8f-a916-4a39-bd01-2786a14bacc4","9e017f37-5917-4cda-afb8-92072abdbdba","8aafeb2c-85b4-4c4e-af36-3b9efacb167c","6d0e0705-57f3-4223-8745-a27295245029","dec89a30-7004-499f-a99e-05b2842cad2b","7efc83d4-2645-4578-b588-a9cffb15524a","1769e8de-bebe-4687-a28a-34c15859ed98","203f2c30-a3cd-4f70-95b3-07df9f996428","2a0b435c-6f77-4db8-be6b-831d177bd762","eac01009-c323-46fd-8339-09c282e6597e","c4b37f96-4ab0-4a0b-a16e-55bac3e32990","4ad5c69e-0dab-4d66-b548-360da7d53568","72d89744-ac04-4dd4-be8b-9d629acd7c11","32dc3358-e954-4934-9e71-cf1dfbca5b91","961e45bd-8bed-4ebc-b3d8-1f0e63736d04"],"query2":{"aggregations":[{"property":"title","aggregator":"count"}]},"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"55d7f55d-3bd1-4a1a-97c9-a6c8354ecd3d":{"value":{"id":"55d7f55d-3bd1-4a1a-97c9-a6c8354ecd3d","version":1,"type":"table","name":"Config","format":{"gallery_cover":{"type":"page_content"},"list_properties":[{"visible":true,"property":"NX\\Q"},{"visible":true,"property":"d]hq"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"`gQ~"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"}],"property_filters":[{"id":"b54a6c88-635d-4de4-946e-5a855a1f4069","filter":{"filter":{"value":[{"type":"exact","value":"Notice"},{"type":"exact","value":"Menu"},{"type":"exact","value":"Config"},{"type":"exact","value":"SubMenu"},{"type":"exact","value":"Page"}],"operator":"enum_is"},"property":"`gQ~"}}],"table_properties":[{"width":116,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":118,"visible":true,"property":"`gQ~"},{"width":219,"visible":true,"property":"title"},{"width":326,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"gallery_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"d]hq"},{"visible":true,"property":"`gQ~"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"}],"table_frozen_column_index":-1,"table_subitem_toggle_column":"title"},"parent_id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"8dfd415c-71af-41f9-b984-e7182bf2210b":{"value":{"id":"8dfd415c-71af-41f9-b984-e7182bf2210b","version":1,"type":"board","name":"Post Board","format":{"board_columns":[{"value":{"type":"select","value":"Draft"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Invisible"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Published"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"}],"board_columns_by":{"sort":{"type":"manual"},"type":"select","property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},"board_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"wz|S"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"`gQ~"}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"table_subitem_toggle_column":"title"},"parent_id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"},"3c2f93d8-6810-42a1-87da-55f1ecda9bca":{"value":{"id":"3c2f93d8-6810-42a1-87da-55f1ecda9bca","version":72,"type":"chart","format":{"chart_config":{"type":"column","dataConfig":{"type":"groups_reducer","groupBy":{"sort":{"type":"manual"},"type":"multi_select","property":"sD^m","hideEmptyGroups":false},"aggregationConfig":{"aggregation":{"aggregator":"count"},"seriesFormat":{"displayType":"column"}}},"chartFormat":{"mainSort":"manual","hideLegend":false,"axisCumulative":false,"axisGroupStyle":"normal","donutHideValue":false,"donutDataLabels":"value","axisShowDataLabels":true,"axisHideEmptyGroups":false}},"property_filters":[{"id":"01739a9c-9312-4d0d-bf7d-de1204300bdb","filter":{"filter":{"value":{"type":"exact","value":"Post"},"operator":"enum_is"},"property":"`gQ~"}}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":247,"visible":true,"property":"title"},{"width":233,"visible":true,"property":"wz|S"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":219,"visible":true,"property":"sD^m"},{"width":184,"visible":true,"property":"d]hq"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":false,"property":"bB{M"},{"width":117,"visible":false,"property":"Dj]h"},{"width":100,"visible":false,"property":"@NcA"}],"subitem_display_mode":"flattened","table_subitem_toggle_column":"title"},"parent_id":"0dc306ca-50a6-4917-9b5a-85a61f0f66f5","parent_table":"block","alive":true,"space_id":"4cc04375-345a-4a1e-bdf0-3a7c88ef0425"},"role":"reader"}},"notion_user":{},"collection_query":{},"signed_urls":{}}},"prev":{"id":"bde25ba8-2381-4da6-bb5e-5787ace45def","date":{"start_date":"2024-08-08","date_format":"relative"},"type":"Post","slug":"post/longhorn","tags":["存储","分布式系统"],"summary":"Longhorn 是一个 Go 实现的 Cloud Native Storage，比较好奇作为一个提供块存储的分布式存储系统，使用 Go 实现，会面临哪些挑战，性能方面要又要如何优化","title":"Longhorn 浅析","status":"Published","category":"","comment":"","publishDate":1723075200000,"publishDay":"2024-8-8","lastEditedDate":"2024-09-14T04:21:06.938Z","lastEditedDay":"2024-9-14","fullWidth":false,"pageIcon":"","pageCover":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc3967b7e-bde2-4b5b-b5f6-97de21642f16%2Flonghorn.png?table=block&id=bde25ba8-2381-4da6-bb5e-5787ace45def&t=bde25ba8-2381-4da6-bb5e-5787ace45def&width=800&cache=v2","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc3967b7e-bde2-4b5b-b5f6-97de21642f16%2Flonghorn.png?table=block&id=bde25ba8-2381-4da6-bb5e-5787ace45def&t=bde25ba8-2381-4da6-bb5e-5787ace45def&width=800&cache=v2","ext":{},"tagItems":[{"name":"存储","color":"default"},{"name":"分布式系统","color":"gray"}],"href":"/post/longhorn","target":"_self","password":""},"next":{"id":"d26ce18a-fa8d-4df4-8b82-69c419c5b621","date":{"start_date":"2023-12-31","date_format":"relative"},"type":"Post","slug":"post/2023summary","tags":["碎碎念"],"title":"2023 年度总结","status":"Published","category":"","comment":"","publishDate":1703980800000,"publishDay":"2023-12-31","lastEditedDate":"2024-08-27T15:25:27.095Z","lastEditedDay":"2024-8-27","fullWidth":false,"pageIcon":"","pageCover":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9e8551ce-463f-41bc-b07f-5a8362a94846%2F2023summary.jpg?table=block&id=d26ce18a-fa8d-4df4-8b82-69c419c5b621&t=d26ce18a-fa8d-4df4-8b82-69c419c5b621&width=800&cache=v2","pageCoverThumbnail":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9e8551ce-463f-41bc-b07f-5a8362a94846%2F2023summary.jpg?table=block&id=d26ce18a-fa8d-4df4-8b82-69c419c5b621&t=d26ce18a-fa8d-4df4-8b82-69c419c5b621&width=800&cache=v2","ext":{},"tagItems":[{"name":"碎碎念","color":"red"}],"href":"/post/2023summary","target":"_self","password":""},"recommendPosts":[{"id":"3327d648-8e54-4edf-a38e-a9cba8884a1a","date":{"start_date":"2023-08-16","date_format":"relative"},"type":"Post","slug":"post/softirq-and-software-interrupt","tags":["Linux","内核"],"summary":"软中断（softirq）和软件中断（software interrupt）","title":"混乱的软中断概念","status":"Published","category":"","comment":"","publishDate":1692144000000,"publishDay":"2023-8-16","lastEditedDate":"2024-08-27T15:25:25.736Z","lastEditedDay":"2024-8-27","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"Linux","color":"purple"},{"name":"内核","color":"blue"}],"href":"/post/softirq-and-software-interrupt","target":"_self","password":""}]},"__N_SSG":true}