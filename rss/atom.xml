<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id/>
    <title>x³u³</title>
    <updated>2025-09-01T18:33:20.984Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>xxxuuu</name>
        <email>xxuuu0@outlook.com</email>
        <uri>https://xxxuuu.me</uri>
    </author>
    <link rel="alternate" href="https://xxxuuu.me/"/>
    <subtitle>🗒 碎碎念</subtitle>
    <icon>https://xxxuuu.me/favicon.png</icon>
    <rights>All rights reserved 2025, xxxuuu</rights>
    <entry>
        <title type="html"><![CDATA[Summer Pockets 圣地巡礼记]]></title>
        <id>https://xxxuuu.me/post/summer-pockets-junrei</id>
        <link href="https://xxxuuu.me/post/summer-pockets-junrei"/>
        <updated>2025-08-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[眩しさだけは、忘れなかった]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-25d88756397980239a5ad926873b7b9b"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-260887563979801fbac7e44e3ad42619" data-id="260887563979801fbac7e44e3ad42619"><span><div id="260887563979801fbac7e44e3ad42619" class="notion-header-anchor"></div><a class="notion-hash-link" href="#260887563979801fbac7e44e3ad42619" title="路线 &amp; 巡礼之前"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">路线 &amp; 巡礼之前</span></span></h3><div class="notion-text notion-block-26088756397980d0b290ff504a43374b">7月底的时候被朋友提醒有香港到四国德岛的便宜机票，往返800带行李额，虽然没有明确的目标，但还是先买了机票，之后再制定计划，我愿称之为 TDT(Ticket-Driven Travel)</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979808cafe6ffe706673c74"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:240px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A89ee8f0e-8bbf-4be8-ad13-ed22fc090499%3A6728a244-c20b-4bb3-9298-6b98ba9f7813.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-808c-afe6-ffe706673c74&amp;t=26088756-3979-808c-afe6-ffe706673c74" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980169411e2237c2cce6d">打开<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.anitabi.cn/map">巡礼地图</a>，在德岛附近第一眼看到的是 Summer Pockets，恰好最近动漫放送，决定趁着这个机会去一趟正式的圣地巡礼，目标确定</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979800faf8ae82273005c23"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Acaa206d0-b74f-4941-a6c4-bea660772b9f%3A21465ea3-48f1-4ccb-af10-70370e837425.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-800f-af8a-e82273005c23&amp;t=26088756-3979-800f-af8a-e82273005c23" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980188bafde18f2ed66b9">德岛落地需要先去高松，JR特急路程一个小时。再从高松作为濑户内海跳岛旅的起点，其中直岛、男木岛和女木岛三座岛是 Summer Pockets 原作舞台中的主要取景地</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979803e81abdc09d9d5039e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A16067859-979c-47d3-b93a-79c23be9788a%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-803e-81ab-dc09d9d5039e&amp;t=26088756-3979-803e-81ab-dc09d9d5039e" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980ac86c1c7becc5aaaff">上岛的唯一交通方式是渡轮，在船运公司的官网可以看到<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.shikokukisen.com/instant/">ダイヤ（时刻表）</a>和<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.shikokukisen.com/stand/">买票方式</a>，看到只能开船前半个小时在现场买票，反而放心了点（四国相对落后，如果要线上提前预定可能对没有日本银行卡和手机号的外国人不便）</div><div class="notion-text notion-block-26088756397980db9803f33bdca22ca6">住宿需要尽量提前订，很多民宿在一两个月前就会被预定完。可以选择住岛上，能有更原汁原味的体验，但价格相对更贵也更难预定。另一个方案是住高松，每天再坐船上岛，我选择了在高松的民宿，位于花園站附近（一直以为这个站读かえん，下车看到站牌才发现是はなぞの），去高松港很方便，平均价格250/晚。注意在小城市住宿时即使在车站周围也需要确认发车间隔，一些站因为客流过少可能一小时才发一班，出行会比较麻烦</div><div class="notion-blank notion-block-26088756397980258310c494ee3d5f74"> </div><div class="notion-text notion-block-260887563979800db54bd065d50ffd63">最后，上岛后的攻略只用参考巡礼地图和官方（我不确定，也许是同人？）指南即可，每一个地点的位置都有标记</div><ul class="notion-list notion-list-disc notion-block-2618875639798015b3f3f0de712ab45b"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.anitabi.cn/map">巡礼地图 - 共享取景地标与截图 - 动画巡礼 - anitabi - 圣地巡礼 - 聖地巡礼 - せいちじゅんれい - 神奇海螺试验场</a></li></ul><ul class="notion-list notion-list-disc notion-block-260887563979804a8015fede552b1b95"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://summer-pockets.main.jp/">Summer Pockets – -サマーポケッツ- 聖地巡礼</a></li></ul><div class="notion-blank notion-block-26088756397980539109db64f2c89f98"> </div><div class="notion-text notion-block-26088756397980c79194fd58047a4e5a">出发当天，如果不在香港过夜要从深圳出发只能走24h的皇岗口岸过关，到达机场时刚好日出。作为冷门航线，这趟航班人意外地多，据说是香港-德岛航线在8月底将会关停，所以有不少人专程来坐最后几趟</div><div class="notion-row notion-block-26088756397980ffbb4ee126c24a3748"><div class="notion-column notion-block-26088756397980608e14e8d3f99bd914" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980479c02c9019db6e757"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A6f0f538b-ddb2-4e43-97b4-840b4b2d3e98%3AIMG_0690.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8047-9c02-c9019db6e757&amp;t=26088756-3979-8047-9c02-c9019db6e757" alt="香港机场的日出" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">香港机场的日出</figcaption></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26088756397980e9b5b3c989d2b7c1c3" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980d2a3eacc284a6d7618"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Afc0928ba-bc03-4004-bc7b-b631c7aab039%3AIMG_0694.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80d2-a3ea-cc284a6d7618&amp;t=26088756-3979-80d2-a3ea-cc284a6d7618" alt="廉航惯例边缘登机口" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">廉航惯例边缘登机口</figcaption></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2608875639798029a26bdeb8df6e35bc">德岛机场很小，航站楼还没深圳很多地铁站大，国际航班只有香港和韩国仁川两条航线（其中一条还即将关停）。为了吸引游客，机场会免费发放 BUS PASS 给国际线的乘客（仅限外国人），可以在两天内免费乘坐所有市内巴士，也包括机场巴士，可以直达德岛站</div><div class="notion-row notion-block-26088756397980d1a5e4d8889db999e4"><div class="notion-column notion-block-260887563979803e8f0deac7d6e06946" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980c697abe322c3aa631c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A5e79e28d-1d60-46b5-879b-6cf5aa60ec60%3AIMG_0697.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80c6-97ab-e322c3aa631c&amp;t=26088756-3979-80c6-97ab-e322c3aa631c" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26088756397980af84aec3fd174da862" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798052bc88d077a4b39b2c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aa4c70f36-ed22-478a-8e56-6457cd03173f%3AIMG_0696.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8052-bc88-d077a4b39b2c&amp;t=26088756-3979-8052-bc88-d077a4b39b2c" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-260887563979808987f1fb1b14ac83f8"> </div><div class="notion-text notion-block-26088756397980bebc82de86658b7341">第一晚在德岛度过，顺便去看了鬼灭，德岛还有唯一一个 ufotable CINEMA，但场次比较少没有合适的时间，最后去了永旺，刚好赶上 23 号的第三弹新特典</div><div class="notion-text notion-block-260887563979800fbc32d14cdc403687">在德岛能很明显感受到这座小城的老龄化和人口流失，除了车站和永旺这类购物中心外，其他地方的人流量都非常少，商店街也看不到几个人，大部分店铺处于关停状态</div><div class="notion-row notion-block-260887563979807a8f84fed23397302e"><div class="notion-column notion-block-26088756397980af98dcd839639fcdd7" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980699dbcd0ef1d7513cd"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A68a34e82-2dbd-4095-b1de-9cf8ad96a64b%3AIMG_0728.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8069-9dbc-d0ef1d7513cd&amp;t=26088756-3979-8069-9dbc-d0ef1d7513cd" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26088756397980ec9c44d0d454b5d35d" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980d78f72c83de48755fd"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A56c99f36-57d7-42b1-ad83-50b0c871e983%3AIMG_0715.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80d7-8f72-c83de48755fd&amp;t=26088756-3979-80d7-8f72-c83de48755fd" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-26088756397980c28e03d32d6edab6b6"> </div><div class="notion-text notion-block-26088756397980f1bd8ff7db73d059d7">第二天出发前往高松，相比德岛，高松的人多了不少，也许是因为恰逢濑户内国际艺术祭，有很多游客，车站里的书店也摆满了宣传</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798029b91afeba29d7380a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A6990e83b-8d32-4c6e-bdbe-8d561d92e3aa%3AIMG_0781.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8029-b91a-feba29d7380a&amp;t=26088756-3979-8029-b91a-feba29d7380a" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26088756397980aabe61ec6e930bb96b"> </div><div class="notion-blank notion-block-260887563979808f888ff5b0cdad66e1"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-25f88756397980aeb2e6c2d75dbd3a96" data-id="25f88756397980aeb2e6c2d75dbd3a96"><span><div id="25f88756397980aeb2e6c2d75dbd3a96" class="notion-header-anchor"></div><a class="notion-hash-link" href="#25f88756397980aeb2e6c2d75dbd3a96" title="直岛"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">直岛</span></span></h3><div class="notion-text notion-block-2608875639798092b5a3cd476cc0e111">正式上岛是第三天，在高松站出站后，左侧能看到高松港旅客终端大楼（高松港旅客ターミナルビル），站前广场也有明显的高松港引导路线。穿过终端大楼再往港口方向走，左侧1/2号登船口是直岛方向，右侧3/4号登船口是男木岛/女木岛方向，红色砖房也是售票处所在</div><div class="notion-row notion-block-26188756397980c5bbe5d5e496b2a590"><div class="notion-column notion-block-26188756397980be8031f2954859c1f4" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.3125)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980b1a51fccfe5564452c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A1835b339-beb3-4543-bbac-5b1cd3a86075%3ADSC_1157.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80b1-a51f-ccfe5564452c&amp;t=26188756-3979-80b1-a51f-ccfe5564452c" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979804283f5d05f095ff151" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.6875)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980168195fe81b3f87187"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aeaa9dd33-463b-4284-8715-b9df601fc91e%3ADSC_1158.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8016-8195-fe81b3f87187&amp;t=26188756-3979-8016-8195-fe81b3f87187" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-26088756397980e4882bebfc078be4b9">售票处内自动售票机可以直接买不定班次的往返票（去程票当日有效，返程票7日内有效），船分为渡轮（フェリー）和高速旅客船，班次和时间都不一样，具体可以看网站上的<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.shikokukisen.com/instant/">时刻表</a></div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979804fa6d0e7fb584f7d03"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:288px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Afcf65ff8-b433-4b0f-b85e-264c3a1488ff%3A683f5f74-d9e8-473d-8b77-8405f124c0af.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-804f-a6d0-e7fb584f7d03&amp;t=26088756-3979-804f-a6d0-e7fb584f7d03" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-260887563979801da4e3f5d52644229d">最好乘坐一早9点或10点的的班次，渡轮位置很多，我这趟没有坐满，行程大约50分钟</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798066875cf26c33dd543d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ab93e9ef3-32a2-4f88-989c-318307eff07c%3AIMG_0759.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8066-875c-f26c33dd543d&amp;t=26088756-3979-8066-875c-f26c33dd543d" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26088756397980f7b9fdc50b33ed5c5c"> </div><div class="notion-text notion-block-26088756397980a38012c6b5fd26b83e">目的地的直岛宫浦港就是原作内的鸟白岛港口，下船后走到右侧案内所前回头，拍下第一个巡礼点。不用特别急，船至少会停几十分钟</div><div class="notion-text notion-block-26088756397980879702c3f790e1fca3">（通过观察下船的游客是直冲毒蘑菇一样的红色大南瓜还是来这个机位拍照，可以准确分辨来艺术祭的文艺男和来巡礼的死宅</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980748c41d214395ff5c2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A992ab239-4c66-4355-addb-b67343c2e9ce%3AIMG_0787.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8074-8c41-d214395ff5c2&amp;t=26088756-3979-8074-8c41-d214395ff5c2" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980738bede2ad0bd97b8c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A28a08bdf-74a1-4592-bab5-b145d473c1e0%3ADSC_1078_E6D8DD91F97E_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8073-8bed-e2ad0bd97b8c&amp;t=26088756-3979-8073-8bed-e2ad0bd97b8c" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-260887563979806fbf26e5220dbf61d3"> </div><div class="notion-text notion-block-2608875639798048b3b1c4530896a1de">穿过案内所，对面是能租到胡子猫团自行车的租车店，据说在店长耳边低语サマポケ的暗号能收获一本店长做的巡礼指南。可惜也许是因为非假期的原因，当天没开门，最后去了另一家租车店租了带电助力的车</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798081b53cc7b021d8eda2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Abf70b3d2-8115-4d0f-8626-387cc4817d3c%3ADSC_1084_76D4F49B6073_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8081-b53c-c7b021d8eda2&amp;t=26088756-3979-8081-b53c-c7b021d8eda2" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798078a626c684fe2ea88e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aeb46dec0-bc6e-4f22-98a6-48d6afabec7d%3ADSC_1087_7318E8C5FD20_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8078-a626-c684fe2ea88e&amp;t=26088756-3979-8078-a626-c684fe2ea88e" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-260887563979800b85ecd8ac2645d030">理论上也可以徒步走，但直岛不小，如果要在一天内巡礼完，徒步会很折磨。另外务必做好防晒措施，8月的濑户内海紫外线指数非常高，只需要半小时就足够晒伤皮肤（现身说法</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979805ca2d5ceda4f4c985d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A7643dfd0-2558-4892-b634-4a1a44125bc9%3AIMG_0799.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-805c-a2d5-ceda4f4c985d&amp;t=26088756-3979-805c-a2d5-ceda4f4c985d" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26088756397980b39c4fe2981cae8966"> </div><div class="notion-text notion-block-2608875639798098bef9f1b277f51b0c">骑上自行车往北5分钟，在某个小巷里转角后，苍打工的店紧接着出现在眼前</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980deba69cb747ea342c9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A21fa16e1-812d-4f24-a584-d00605bde4a3%3AIMG_0786.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80de-ba69-cb747ea342c9&amp;t=26088756-3979-80de-ba69-cb747ea342c9" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980d7820bdc9dacc183ca"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A157d4945-4ebe-4544-b3f0-7bc8efe1c1a0%3ADSC_1094_C4DFDE90D877_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80d7-820b-dc9dacc183ca&amp;t=26088756-3979-80d7-820b-dc9dacc183ca" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980c8907ecad9319404b5">门口没有摆着冰柜和售货机，这家店也已经在两年前关门，只能透过玻璃感受下大家的热情了</div><div class="notion-row notion-block-26088756397980c1a588c44df5e8f3db"><div class="notion-column notion-block-26088756397980549757f7d3005ee089" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979806c9709e0cbd7962783"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A9f164b01-7df1-460f-9205-19f0e5902e65%3ADSC_1097_AD016BC88A53_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-806c-9709-e0cbd7962783&amp;t=26088756-3979-806c-9709-e0cbd7962783" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980a4a6e1e78f7161b5b8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Af55a399e-bc30-4dfa-b43f-95373122ec56%3ADSC_1098_93119581C36C_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80a4-a6e1-e78f7161b5b8&amp;t=26088756-3979-80a4-a6e1-e78f7161b5b8" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-260887563979800cbf4bdbaa26d10e25" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979803f816bd109ab9155be"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A154f04a2-85d4-402d-a691-04ef65bf40cd%3ADSC_1101_B62479340C65_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-803f-816b-d109ab9155be&amp;t=26088756-3979-803f-816b-d109ab9155be" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-260887563979806f9903dd3c7d8220e8"> </div><div class="notion-text notion-block-26088756397980718abfc856a66b422a">到这里港口周围就巡礼得差不多了（其实还有个神社，但貌似是三菱的企业私有领地不能入内，建议遵循ルール不要擅自闯入)。听说711有スイカバー能买，但我没找到，只能继续往东边探索，这里是一条大路联通东西两侧</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980c6b3cbcb6b57a8f702"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad75b67aa-6320-459e-8507-bd58d5c3e67d%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80c6-b3cb-cb6b57a8f702&amp;t=26088756-3979-80c6-b3cb-cb6b57a8f702" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980f6a9b7e048c35f6369">在半路右转可以到达水坝，经过一段即使有电助力也会比较吃力的大坡度上坡后，是白羽发射れいだーん的场地。这里如果要下去到平台的话，貌似要走大坝内部，不确定是否能进去；也有一些人从旁边的坡跨下去，需要注意安全</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980b7bff1f4dffd597168"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aba69723c-02b1-4dfa-bfbd-d257a3f52efb%3AIMG_0789.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80b7-bff1-f4dffd597168&amp;t=26088756-3979-80b7-bff1-f4dffd597168" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980e59ecdcb8c080d269d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A577ad772-9e6a-41c5-83aa-244156b57304%3ADSC_1105_FC6D6BE83C6E_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80e5-9ecd-cb8c080d269d&amp;t=26088756-3979-80e5-9ecd-cb8c080d269d" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2608875639798053be3bff2a29d2f492">原路返回后继续一路向东，慢慢进入居民区，注意到道路左侧有家石井商店，是民宿和乌冬面馆，在原作里这里是羽依里家，站在门前侧方的路上可以得到同机位</div><div class="notion-text notion-block-26088756397980528837e8579ae9069a">（其实前面还有白羽家，被我漏掉了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798034a3fac054ee0fdea2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A273a898e-6bbe-41f5-9d89-b9756f4d153e%3AIMG_0792.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8034-a3fa-c054ee0fdea2&amp;t=26088756-3979-8034-a3fa-c054ee0fdea2" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980b793f9cfcce813302b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A3a6997d8-41d6-4368-85d6-eaccb277d4d8%3ADSC_1108_0075AE78CAF0_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80b7-93f9-cfcce813302b&amp;t=26088756-3979-80b7-93f9-cfcce813302b" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980f6bcbaed5253c73bb4">民宿门口也和原作里羽依里家的CG相同，面馆内则是原作里的食堂。不过当时面馆内没人，貌似不在营业中，也不是民宿住客，就不好进去拍摄了。另外这个面馆也将于年底停业，还想巡礼的需要抓紧时间了</div><div class="notion-row notion-block-26088756397980d68280da544e43d581"><div class="notion-column notion-block-260887563979803d8975f5ca5184db40" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980f38d3ec4575b115369"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A3be5bbbd-cf99-49ed-9cf6-a18c3d93c34f%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80f3-8d3e-c4575b115369&amp;t=26088756-3979-80f3-8d3e-c4575b115369" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26088756397980df84eedaa2cdbd1aef" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979803c957ad5f851cbb30f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Af935ec07-9b7c-49c9-8270-47f0bdec9f2a%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-803c-957a-d5f851cbb30f&amp;t=26088756-3979-803c-957a-d5f851cbb30f" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2608875639798020b38cf1479d270ed7">接着在原地后转，是原作里的村道</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980cdb176c277d191e37b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aa08e5413-f240-4833-b313-be11ebade3cc%3AIMG_0791.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80cd-b176-c277d191e37b&amp;t=26088756-3979-80cd-b176-c277d191e37b" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2608875639798076b783d15035b401b8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A6fe62eab-f26c-486f-b640-8b8cb52fb402%3ADSC_1111_93A8B09015A2_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8076-b783-d15035b401b8&amp;t=26088756-3979-8076-b783-d15035b401b8" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-2608875639798074b2aeca7441fbd092"> </div><div class="notion-text notion-block-260887563979809789bfc72cfaab8d0e">之后沿着路继续往前骑到尽头转向南边，一段长下坡后，海面再次出现，左侧台阶能够下到海滩上</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980b29ffdd4798a16c3b0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Afc79ef70-2c03-439b-9dc2-0b1dd82ae988%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80b2-9ffd-d4798a16c3b0&amp;t=26088756-3979-80b2-9ffd-d4798a16c3b0" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-260887563979809c89cfe41461608281">在这之前，正前方是动漫14集羽依里背着苍经过的岸边</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980fc89a3f4d815d8bf7a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aa8f84e5f-d9cf-4841-b917-51339324e161%3A2nabhvo_1752771976568_(1).jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80fc-89a3-f4d815d8bf7a&amp;t=26088756-3979-80fc-89a3-f4d815d8bf7a" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979801083d0e31639e6617c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A781533cd-cef9-4771-9e54-eee10b8fd4f4%3ADSC_1120_2B90970F2888_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8010-83d0-e31639e6617c&amp;t=26088756-3979-8010-83d0-e31639e6617c" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26088756397980b8b66dfe1ebfea8d21">下到海滩后左转，日出+广角能得到RB里的うみ视觉图相同画面，这里必须在岛上住才能有机会复刻</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980748738f3b3ebd3374c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad9ee8448-9107-4fde-af7a-dad45cfae48d%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-8074-8738-f3b3ebd3374c&amp;t=26088756-3979-8074-8738-f3b3ebd3374c" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980a595d3d93d75aaf849"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A4c60b7b2-80a4-4dc0-be38-c88034541d29%3ADSC_1117_5847206617E7_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80a5-95d3-d93d75aaf849&amp;t=26088756-3979-80a5-95d3-d93d75aaf849" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2608875639798015b2dcebbca13be7d9">后面有个小屋子的地方是白羽钓鱼的位置，这里只能在退潮时走左侧岸边过去，涨潮时间可以在<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.umitenki.jp/tenki/3873/tide">直島港(香川県)の潮汐</a>上看到。当时海水已经把岸边淹了没能过去（其实翻岩壁还是能去的，不过安全起见没敢走），比较遗憾</div><div class="notion-row notion-block-26088756397980cca854f5d8869a617d"><div class="notion-column notion-block-2608875639798083bb6bccabef559fcb" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-260887563979800cb7f6e4cecd1e9d9a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ab4d240ee-2656-4f42-a473-3f0913769752%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-800c-b7f6-e4cecd1e9d9a&amp;t=26088756-3979-800c-b7f6-e4cecd1e9d9a" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26088756397980f8b148f09a1f46463b" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26088756397980d69cb4d850cd02be50"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad0372e13-7f47-43e2-b5d4-feea7cf428bd%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26088756-3979-80d6-9cb4-d850cd02be50&amp;t=26088756-3979-80d6-9cb4-d850cd02be50" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-2608875639798091a6ccebd67d13a659"> </div><div class="notion-text notion-block-26088756397980b6bb12f56a9e13d21e">最后继续向南到海水浴场，静久同款鸟居立在门口前的公交站后，但因为有车站挡住，面前也不是一片草地，无法拍出相同机位</div><div class="notion-row notion-block-2618875639798056981cc83b51d9b8db"><div class="notion-column notion-block-2618875639798032ae67f53e83204547" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.4375)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980ad93efca192cb691a1"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A2fd43e52-2ffd-47a1-a3e8-5c014a1e643a%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80ad-93ef-ca192cb691a1&amp;t=26188756-3979-80ad-93ef-ca192cb691a1" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26188756397980a98bc4c67b4dda8b4b" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5625)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798004abcad20fcb0e57af"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A8864f2bb-6442-423b-b79a-f18359bf46b0%3ADSC_1137_F73B403C3BC6_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8004-abca-d20fcb0e57af&amp;t=26188756-3979-8004-abca-d20fcb0e57af" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-261887563979805da14ef4272b12d2c8">浴场内正中间是海之家，当天处于关门状态，就算开门了貌似也没咖喱饭卖</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979806d8e98d5435e25a7ef"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A61350034-ff91-4bc0-a2dd-19ec2f481575%3AIMG_0790.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-806d-8e98-d5435e25a7ef&amp;t=26188756-3979-806d-8e98-d5435e25a7ef" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979807db936dcd0a313a81b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A863d1800-9ae9-467f-a5fb-3ba1ab914725%3ADSC_1132_8B62B211624F_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-807d-b936-dcd0a313a81b&amp;t=26188756-3979-807d-b936-dcd0a313a81b" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-261887563979807bba80ef25caa54c86">下面的沙滩也是原作的经典场地，现实中因为挨着海水浴场人会很多，不过我以为只能从隔壁的住宿区进入（禁止非住客入内），没有拍到，实际直接从沙滩走过去就好</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798037910bebbd5b7e19f9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aff603c64-e477-4e45-87d9-29184fd9232c%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8037-910b-ebbd5b7e19f9&amp;t=26188756-3979-8037-910b-ebbd5b7e19f9" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2618875639798006909cf85f765557f9">最后，浴场西边200米是动漫视觉图中白羽行走的另一片沙滩</div><div class="notion-row notion-block-261887563979806eb62ecbdceb6e30b5"><div class="notion-column notion-block-26188756397980fe9ad3f04269787779" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980c3a301c2b3d7146600"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Afd2fe6b9-1839-46bd-abe8-37c5371ce461%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80c3-a301-c2b3d7146600&amp;t=26188756-3979-80c3-a301-c2b3d7146600" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979807e8da6d27f7791a65e" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980fc9253d45089c8357d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A0763ea4e-2918-4739-aa43-263e7349666b%3ADSC_1140_FB3FCF6C3F5B_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80fc-9253-d45089c8357d&amp;t=26188756-3979-80fc-9253-d45089c8357d" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-26088756397980ef93ebe91135f01177">直岛的主要巡礼点到这里都已经去过了，要注意虽然海水浴场离港口直线距离很近，但这段路不能骑车通过，即使下车推也不行（不知道为什么会有这个规定），只能原路绕个圈回到港口</div><div class="notion-blank notion-block-26088756397980c893d2d3edb37198e0"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-2608875639798053928bdc2495bb2832" data-id="2608875639798053928bdc2495bb2832"><span><div id="2608875639798053928bdc2495bb2832" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2608875639798053928bdc2495bb2832" title="男木岛"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">男木岛</span></span></h3><div class="notion-text notion-block-2618875639798021847df73bc1d4f18f">次日继续前往男木岛，男木岛的售票处在3/4号登船口，是另一个方向，并且没有自动售票机，只能人工买票</div><div class="notion-text notion-block-260887563979800684acd8bdb59ef493">这趟船从高松港出发，中途在女木岛停船，最后到达男木岛。女木岛的主要巡礼点是羽依里和欧探索的洞穴、以及通向秘密基地的山道，由于船的班次不多，要在一天内探索男木岛和女木岛时间会比较紧张，最后没有去女木岛</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980e09d1fe2562fd0b716"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aac603f13-565d-43b2-b2f3-c5be523bf5f2%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80e0-9d1f-e2562fd0b716&amp;t=26188756-3979-80e0-9d1f-e2562fd0b716" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-261887563979809a8871ee9c58b42521">相比直岛，男木岛航线的船相对较小，位置会不太够，但也不需要坐下，中途有重要巡礼点，建议上船后直接走到船头等待</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980eaba39ce081c9edc5e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A3582733e-d5a6-4b63-838f-30e3accaff85%3ADSC_1163_726CF7244C7A_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80ea-ba39-ce081c9edc5e&amp;t=26188756-3979-80ea-ba39-ce081c9edc5e" alt="这个方向其实是船尾，靠岸时船头朝向岸边，登船铁板会降下来" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">这个方向其实是船尾，靠岸时船头朝向岸边，登船铁板会降下来</figcaption></div></figure><div class="notion-text notion-block-26188756397980d9afc0fc05d218d68b">从女木岛再次启程后5分钟左右，原作开头的鸟白岛全景就在眼前，拍摄窗口只有一分钟，错过了也没关系，返程时在船尾还能再拍一次</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979807ea9b0f6196e05736a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A747f273f-36f3-48dd-848d-a3bfc7f9e838%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-807e-a9b0-f6196e05736a&amp;t=26188756-3979-807e-a9b0-f6196e05736a" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979808fa0a0e07e7718f774"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A5d511172-c2b4-4fba-bbbd-f823c6cee504%3ADSC_1454_222B83792C24_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-808f-a0a0-e07e7718f774&amp;t=26188756-3979-808f-a0a0-e07e7718f774" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26188756397980feb945ca0341dc64ff">男木岛不大，可以徒步巡礼完，不需要租车。下船后右侧直走是鸟白岛役场，中途能看到不太起眼的广播塔（有好好穿着衣服，没人拿水枪滋我</div><div class="notion-row notion-block-2618875639798022b623e72fc7151942"><div class="notion-column notion-block-261887563979809f9696ef0f18dfdd70" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.6875)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980c4a8c3daec7d9a87f8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A61bcb3eb-88e1-4ee8-89b0-108a2dd7e906%3ADSC_1265_55BFDEBE164C_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80c4-a8c3-daec7d9a87f8&amp;t=26188756-3979-80c4-a8c3-daec7d9a87f8" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979802a93c1dec4fa2e61e5" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.3125)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979808a80dbe73d528f4046"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Af4552e54-ae15-495c-881d-de4ba63cb047%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-808a-80db-e73d528f4046&amp;t=26188756-3979-808a-80db-e73d528f4046" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2618875639798069a748d70f036409dd">鸟白岛役场离这里不到100米，现实中是当地渔业协会</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979807b8215da71eda0f3c6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A12b823e9-7e25-4201-9be0-94b11564438f%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-807b-8215-da71eda0f3c6&amp;t=26188756-3979-807b-8215-da71eda0f3c6" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980a4b230c31d0d2accb3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A11562b34-0158-4c00-94ae-0507fd652e29%3ADSC_1222_F4FBD540B016_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80a4-b230-c31d0d2accb3&amp;t=26188756-3979-80a4-b230-c31d0d2accb3" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2618875639798043863dea239e46c95d">旁边另一侧跨出去后面向港口的视角是原作主视觉图（注意脚下，到处都是海蟑螂，且没有护栏，小心落水）</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980b986c6e927717a1c2e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A2ca9bb28-9e60-4fe9-8da9-1eb9a92fd6f5%3AIMG_0835.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80b9-86c6-e927717a1c2e&amp;t=26188756-3979-80b9-86c6-e927717a1c2e" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980dcbd96f13af2939852"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aadfddff2-d845-49bb-8c5a-5ab529a8d646%3ADSC_1245_5D7632F9BB1D_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80dc-bd96-f13af2939852&amp;t=26188756-3979-80dc-bd96-f13af2939852" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26188756397980879dd4ef8eb9c2c9ae">回头看到的是船入港的小白塔</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979809bab31dd2a62eba25e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A7c23d40d-6f31-419f-aae3-7bedc5ed0a88%3ADSC_1236_7835430F2DEB_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-809b-ab31-dd2a62eba25e&amp;t=26188756-3979-809b-ab31-dd2a62eba25e" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-261887563979807288f2f93f369ee3fd"> </div><div class="notion-text notion-block-2618875639798017b131ef5f52a40c44">继续往南，藏在居民区中的ねこポケの会，是岛民丰爷爷家给巡礼者准备的秘密基地</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980b087c9c578b249013e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A172a8cd8-71b9-4181-a9e2-e61af5a16baf%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80b0-87c9-c578b249013e&amp;t=26188756-3979-80b0-87c9-c578b249013e" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2618875639798097abf8e34718bfe820">门口摆满了关于岛上的猫（男木岛因为猫很多也称为猫岛，虽然我并没有看到太多）和 Summer Pockets 的各种周边</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980ab9c08d2000f4f0139"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad8920846-2936-47bc-82fd-038251a99c03%3ADSC_1268.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80ab-9c08-d2000f4f0139&amp;t=26188756-3979-80ab-9c08-d2000f4f0139" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-261887563979803c9621eb9ea4648e8d">其中最主要的是观光协会和丰爷爷制作的巡礼指南，现在这本是随着7月动漫播出而同步更新的版本</div><div class="notion-row notion-block-26188756397980159c29f6acb6ec79e8"><div class="notion-column notion-block-261887563979807dbf73e6af7a4fb5b1" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980bc97fbf964aeabe375"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A00537b5e-e910-4f92-bab4-181e1d0617b6%3ADSC_1270.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80bc-97fb-f964aeabe375&amp;t=26188756-3979-80bc-97fb-f964aeabe375" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-2618875639798050bd5eec289a61c2ad" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798030bfb5c249d9548238"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Adcdc0b6d-e57b-4a56-90c1-292e319d421c%3ADSC_1271.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8030-bfb5-c249d9548238&amp;t=26188756-3979-8030-bfb5-c249d9548238" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26188756397980669979c811576d36b5" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980c1a0e7c1d15f3f2ed7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A61c90e4e-e76a-445f-9d4e-bc371f462036%3ADSC_1280.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80c1-a0e7-c1d15f3f2ed7&amp;t=26188756-3979-80c1-a0e7-c1d15f3f2ed7" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979808a93d4c61ece4484bf" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798077b20deb5428c4319b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aa63ad9fa-d792-4d26-99d6-dc921bb43b57%3ADSC_1284.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8077-b20d-eb5428c4319b&amp;t=26188756-3979-8077-b20d-eb5428c4319b" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2618875639798024bbb3dd56e1b5dd75">旁边是丰爷爷的家门口，大门敞开说明正在家中，欢迎所有巡礼者进去休息和交流，还有机会蹭饭（但我太社恐没敢进去）</div><div class="notion-row notion-block-26188756397980bbbed3c983437c1606"><div class="notion-column notion-block-26188756397980c395ace285661dbfb7" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.6875)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980919a69c58a5ce868f8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A2bedf5c8-1869-4861-84f3-93a55a798e05%3ADSC_1288.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8091-9a69-c58a5ce868f8&amp;t=26188756-3979-8091-9a69-c58a5ce868f8" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26188756397980cc88f8cfdaebb3902c" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.3125)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980019babf49b376e3ecf"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Aff4a3b54-25fa-4e5c-a879-841c6326cc3e%3ADSC_1287.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8001-9bab-f49b376e3ecf&amp;t=26188756-3979-8001-9bab-f49b376e3ecf" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-26188756397980349d31cfb32b8ab6d7">如果进去了，应该能看到满墙的周边和同人作</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979800187acf576746cf6e3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A69d7cc12-af23-4fd7-a63f-f37812716d7c%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8001-87ac-f576746cf6e3&amp;t=26188756-3979-8001-87ac-f576746cf6e3" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980ccb0ede797a7dc1042"> </div><div class="notion-text notion-block-2618875639798038a118cee578d5a070">继续往南走大约50米，有一所小学，栏杆内是白羽游泳的泳池，注意栏杆前的板子写着禁止摄影（撮影できません），还是继续遵循ルール不要拍照了，特别是有人的时候。原本学校旁还有原作里和基友打乒乓球的迷你基地，不过早已拆除</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798014a86bcd81629a54af"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A40abb159-6e3f-42c7-86a2-728c43e38946%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8014-a86b-cd81629a54af&amp;t=26188756-3979-8014-a86b-cd81629a54af" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980c39d39d80e91cd7b59"> </div><div class="notion-text notion-block-2618875639798077b432f76275e8c62a">一路到海边和欧相遇的小路</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980d9abdff317a8087cbc"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A8de601ba-5c9b-4a37-81ba-d97a947b804c%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80d9-abdf-f317a8087cbc&amp;t=26188756-3979-80d9-abdf-f317a8087cbc" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979804b9a31ecd77db082ba"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ae13d8ae0-82ed-4507-9ddd-13dbf11bc590%3ADSC_1302_9750B8996448_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-804b-9a31-ecd77db082ba&amp;t=26188756-3979-804b-9a31-ecd77db082ba" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-261887563979807a9056d3f4cccbab46">往前走一段再回头能得到动漫第3集里的镜头</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979806d99d9d6e872d99205"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A02cd62b2-3ad4-49d2-a957-9823592f1e04%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-806d-99d9-d6e872d99205&amp;t=26188756-3979-806d-99d9-d6e872d99205" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798099aa3eeedf3957ba9d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A63904556-aa94-4e24-85fe-54a365b344c5%3ADSC_1331_4C18C31A62D8_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8099-aa3e-eedf3957ba9d&amp;t=26188756-3979-8099-aa3e-eedf3957ba9d" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980979cd3c02ad9876601"> </div><div class="notion-text notion-block-2618875639798047b472f031f38d6471">原路返回到港口，下船方向的正前方的上山路通往丰玉姬神社，不远但台阶有些陡（实际上爬上去时已经累得没力气拍照了</div><div class="notion-text notion-block-2618875639798058b0c6e4b546f9e790">除了原作静久视觉图外，动漫主视觉图貌似也在附近取景，但转了一圈没找到一样的位置</div><div class="notion-row notion-block-26188756397980d08dcbe4a9e502c6a7"><div class="notion-column notion-block-2618875639798033a9a6f09490bd7278" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979804ca32dc943afe1e37d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A96a62c40-6e40-4bff-9ed6-e18222275959%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-804c-a32d-c943afe1e37d&amp;t=26188756-3979-804c-a32d-c943afe1e37d" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-26188756397980f1a94accff7acbe5e5" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980099872ec9ea7e6711e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ae9ca69f6-2cf5-4991-a39d-348bc2ea0b42%3ADSC_1347_0B15665C7159_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8009-9872-ec9ea7e6711e&amp;t=26188756-3979-8009-9872-ec9ea7e6711e" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-261887563979806abfcae4b83d33acd0">最后往男木岛北端的灯台出发，需要走大约半小时</div><div class="notion-text notion-block-26188756397980f99560fcbf469d2a52">刚出发不久，在港口背面的停车场里能看到一辆紬的痛车（貌似还是RX-7 FC？</div><div class="notion-row notion-block-26188756397980af8519d116867fe2f3"><div class="notion-column notion-block-2618875639798042a0bed02852329db2" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980439698c7c9becc03d0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A0954d415-2659-4759-8c80-59c72ab7f7f1%3ADSC_1353_9F698EC0475A_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8043-9698-c7c9becc03d0&amp;t=26188756-3979-8043-9698-c7c9becc03d0" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-2618875639798092b74ce11c5d3b3a4b" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980cb8e8ae0577bac0cbb"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ac3aec286-ea6a-492d-98ea-0f38c680ed62%3ADSC_1360_8F84B8C66315_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80cb-8e8a-e0577bac0cbb&amp;t=26188756-3979-80cb-8e8a-e0577bac0cbb" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2618875639798038a8ffe47949a8308e">逐渐走出小镇，路两旁从住宅变成草丛，苍睡觉的小路在这里，路旁缺少打理杂草和树木挡住了所有视野</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798021ad90e6ee4c06e82f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A6fb50efd-b458-4444-b6f2-6cdb3b1645db%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8021-ad90-e6ee4c06e82f&amp;t=26188756-3979-8021-ad90-e6ee4c06e82f" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798047a2fdf9233d1dcde9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad79ef296-3ee4-4e54-ba23-1622141efb03%3ADSC_1369_9D5DCFAC3594_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8047-a2fd-f9233d1dcde9&amp;t=26188756-3979-8047-a2fd-f9233d1dcde9" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-261887563979801f82eff905acc74388">之后的路都比较原生态，会有不少虫子和蜘蛛。只有路旁不时出现的路牌提醒我们离灯台的距离在不断缩短</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798017b510e86daf119094"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A10d8ce83-99e2-4059-8bdf-5435661e549a%3ADSC_1378_5DC16A1C2DAB_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8017-b510-e86daf119094&amp;t=26188756-3979-8017-b510-e86daf119094" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26188756397980029a57edb1e7b069ef">直到大海再次出现，拐角后灯台露出一头</div><div class="notion-row notion-block-261887563979808d802bd7c66739f7bf"><div class="notion-column notion-block-26188756397980fba4f2e56f41ad1bca" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798037aa89cb98569a01c7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A4097034a-0c49-49cb-9b16-507ec2296549%3ADSC_1380_BA16D0796B96_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8037-aa89-cb98569a01c7&amp;t=26188756-3979-8037-aa89-cb98569a01c7" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-2618875639798052aa79dc7bfc9d3778" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798014b5ffc63712c0fca9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A09a1181b-e737-42f6-ba55-d10f7a001795%3ADSC_1384_F4E154BD2BFB_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8014-b5ff-c63712c0fca9&amp;t=26188756-3979-8014-b5ff-c63712c0fca9" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-261887563979807ab703fd165b407aba">むむぎゅぎゅぎゅぎゅ~</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980988061c3f55d9d3e72"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A999743bc-9fd7-41a4-8df9-e31d19a8bb2b%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8098-8061-c3f55d9d3e72&amp;t=26188756-3979-8098-8061-c3f55d9d3e72" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980d3ad62e84539f2ea03"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ac1151d8d-0988-489f-86aa-094fe8df8c74%3ADSC_1389_FCF59FAF7385_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80d3-ad62-e84539f2ea03&amp;t=26188756-3979-80d3-ad62-e84539f2ea03" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-2618875639798095836cd1d6478ffef2">灯台在非假期不开门，无法上去</div><div class="notion-row notion-block-261887563979807db4dbff77ceeef932"><div class="notion-column notion-block-2618875639798037b7faf651794ffa5f" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5625)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979803e9e81ce0b8080a42f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A9bf7bbf7-b5fe-4750-8750-2168f65d6abd%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-803e-9e81-ce0b8080a42f&amp;t=26188756-3979-803e-9e81-ce0b8080a42f" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980149588d3c568910c13"> </div></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979805785d4d616a1a33f3e" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.4375)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980ca84fce733058a9565"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A9403f24b-ad26-4f94-940c-e02ef229a3b1%3ADSC_1423_152ED221EE2F_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80ca-84fc-e733058a9565&amp;t=26188756-3979-80ca-84fc-e733058a9565" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-26188756397980488254d822610db0cb">旁边是可以自由参观的灯台资料馆，这里记录了灯台和男木岛的历史，还有一些活动</div><div class="notion-row notion-block-26188756397980d4949ffcaae1e030a7"><div class="notion-column notion-block-26188756397980b890b8e8f04024b601" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798066845cf7901465832e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ad802cc2e-2af2-4960-95c8-0c8797521f53%3ADSC_1404.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8066-845c-f7901465832e&amp;t=26188756-3979-8066-845c-f7901465832e" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-261887563979802fb79ede8bd27c0674" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979809ebfc6dfa99ba24c79"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A7166fd66-94e0-413c-a58b-1bc00e8e9ed9%3ADSC_1402.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-809e-bfc6-dfa99ba24c79&amp;t=26188756-3979-809e-bfc6-dfa99ba24c79" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-2618875639798011bcd4d80a380159f9">门口旁桌上有留言本，留言大部分都是巡礼者，从日期来看几乎每天都有人来</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979801ea18dcd1c7774c5a4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A7efbc008-d249-4987-8428-1a2519ef9192%3AIMG_0812.heic%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-801e-a18d-cd1c7774c5a4&amp;t=26188756-3979-801e-a18d-cd1c7774c5a4" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26188756397980b58289ce29f82e90bf">墙上贴有往年灯台サマポケ祭的海报，不过今年却没有了</div><div class="notion-row notion-block-26188756397980ddb462f7ab56247d84"><div class="notion-column notion-block-26188756397980b1aeb7f609338cae08" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979804f979aeeb189d4faf0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ae1b96590-e4a8-4aa3-9db2-122c1d60aea8%3ADSC_1416.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-804f-979a-eeb189d4faf0&amp;t=26188756-3979-804f-979a-eeb189d4faf0" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-2618875639798073a119eb95c21e323e" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980bfbca6c50d302646c9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A6fffc4ba-3d3d-4212-ac96-c88e102724d0%3ADSC_1415.jpg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80bf-bca6-c50d302646c9&amp;t=26188756-3979-80bf-bca6-c50d302646c9" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-26188756397980ad8e34cbb98275f649"> </div><div class="notion-text notion-block-261887563979801e86dcd1d886cf1621">灯台背后的台阶能走下海滩，整个男木岛的最北方</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-261887563979806ca47cf9102bb6b356"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ac3a7edae-e70c-4d8c-9fd4-2385856ef797%3ADSC_1385_6305A78DE574_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-806c-a47c-f9102bb6b356&amp;t=26188756-3979-806c-a47c-f9102bb6b356" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-26188756397980a1bf40c18a669e5f8b">这个角度的灯台也是RB的主视觉图</div><div class="notion-row notion-block-2618875639798008aec5e410e34c6ebf"><div class="notion-column notion-block-26188756397980ec8ba7c85c75a33d85" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980b0a1cff88bf337163a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3A8c0244f7-509e-4687-b9a6-befe432c26cf%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80b0-a1cf-f88bf337163a&amp;t=26188756-3979-80b0-a1cf-f88bf337163a" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-2618875639798097a919c32ec3173e2e"> </div></div><div class="notion-spacer"></div><div class="notion-column notion-block-26188756397980c3a238c0e023fae92f" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980e89d4dd136468cb013"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ac867ff8b-a81f-49f2-a6f3-48815ea973ee%3ADSC_1431_D576EECF1464_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80e8-9d4d-d136468cb013&amp;t=26188756-3979-80e8-9d4d-d136468cb013" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-26188756397980a58344cc3ad28002e3">不要错过沙滩上的碑，比原作里的矮不少</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2618875639798029ab0bf437f7ee3d28"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ab0767f22-e7ac-4300-a224-b988fbdd25dc%3Aimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8029-ab0b-f437f7ee3d28&amp;t=26188756-3979-8029-ab0b-f437f7ee3d28" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980729ed6c3ab7ce5343f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Ade38ed80-2616-4097-bd6f-7c193749a49a%3ADSC_1430_A6B1A0625F39_CAMERAMARK.jpeg%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-8072-9ed6-c3ab7ce5343f&amp;t=26188756-3979-8072-9ed6-c3ab7ce5343f" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980ba95a0c898e9747bf2"> </div><div class="notion-text notion-block-2618875639798064ba93cddaa8b0e37b">男木岛的巡礼到这里就结束了，虽然岛不大，但完全靠走也需要大半天</div><div class="notion-text notion-block-261887563979802b8228c7ff8d5aa4f8">回去港口时注意提前预留时间，最后一班船在下午5点，错过就只能在岛上过夜了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-26188756397980bcaab3e163e9859ce2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/attachment%3Affec5c7e-7959-4b3a-b18e-523921c436a4%3AIMG_0814.heic%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=26188756-3979-80bc-aab3-e163e9859ce2&amp;t=26188756-3979-80bc-aab3-e163e9859ce2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-26188756397980a598bcd1041a75d01c"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-261887563979806ca542f6601dfe589a" data-id="261887563979806ca542f6601dfe589a"><span><div id="261887563979806ca542f6601dfe589a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#261887563979806ca542f6601dfe589a" title="写在最后"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">写在最后</span></span></h3><div class="notion-text notion-block-26188756397980b88f97ed191ae980c0">这趟行程最初本来想找朋友一起去，因为时间安排关系没能找到人陪同，全程一个人规划和出发（实际上solo trip的体验非常好），最后也算顺利完成，圆了自己一个小心愿</div><div class="notion-text notion-block-2618875639798082a3a2d6ceafff5d93">一路上碰到了不少国内和日本的同好（太社恐了没什么交流hhh），感觉大家都很开心，虽然行程比较仓促，也有不少东西被漏掉或者没能好好体验，但旅途中的未知和遗憾也是过程的一部分吧，希望下次能继续去更多地方巡礼</div><div class="notion-text notion-block-261887563979804ab63ff7006e199e47">作为初次正式的圣地巡礼，献给了 Summer Pockets，在现实中到访ACG作品里出现过的场景时，仿佛真的能走进那段故事里，和他们度过相同的夏天，是一种难以言喻的跨越次元的感动</div><div class="notion-text notion-block-26188756397980d8bcdad6fbbf897ea4">最后，用原作里的台词结束吧</div><div class="notion-text notion-block-26188756397980549d8ef079d7b8e536">眩しさだけは、忘れなかった</div><div class="notion-blank notion-block-2618875639798083a166def593d40d2f"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024 年度总结]]></title>
        <id>https://xxxuuu.me/post/2024summary</id>
        <link href="https://xxxuuu.me/post/2024summary"/>
        <updated>2025-01-01T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-16e8875639798010aeb9d7e49f597453"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-16e88756397980b0a5aae9538bf13ca3" data-id="16e88756397980b0a5aae9538bf13ca3"><span><div id="16e88756397980b0a5aae9538bf13ca3" class="notion-header-anchor"></div><a class="notion-hash-link" href="#16e88756397980b0a5aae9538bf13ca3" title="工作 &amp; 技术"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">工作 &amp; 技术</span></span></h3><div class="notion-text notion-block-16e88756397980cba427cd7050ab15e3">由于去年底工作方向上的转变，今年主要聚焦在块存储和云原生方向，年初接手了一个质量比较差但有大量客户的历史产品维护，售后故障很多，几乎每天都会有故障工单击穿到我这来</div><div class="notion-text notion-block-16e8875639798019b2a0ca4642c2d4ad">虽然那段时间为了排查问题学会了不少东西，Linux 内核的块设备层和周边组件代码几乎看了一小半，也掌握了用 eBPF 做花里胡哨观测和调试的方法。但非常痛苦，下一秒可能就要被拉进工单群的恐惧感会笼罩在整个上班时间，连下班后都会提心吊胆的</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e8875639798031806be85d7354286f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fbfe50417-58ba-4d65-ab45-24dd49660962%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-8031-806b-e85d7354286f&amp;t=16e88756-3979-8031-806b-e85d7354286f&amp;width=1248&amp;cache=v2" alt="公司 Github 的热力图，上半年写的代码很少" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">公司 Github 的热力图，上半年写的代码很少</figcaption></div></figure><div class="notion-text notion-block-16e887563979800b9974ddb1cf526975">经过几个月的持续迭代后，产品稳定了很多，终于转回到正常的研发节奏里，投入到新项目中</div><div class="notion-text notion-block-16e88756397980c0b06bcd97e09a4ba1">但还是觉得做的事很杂，离 core 的东西比较远。有时候会感觉在做的这些事情没什么意义，已经越来越感到倦怠了，所以之前也写了一篇<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://xxxuuu.me/post/infra-dilemma">碎碎念</a>劝退</div><div class="notion-text notion-block-16e88756397980df89abdc68007b310c">公司的发展前景还不明朗，大家信心越来越不足。前段时间刚又一轮裁员完，入职时部门里一共 3 个 23 届校招生，去年底的裁员送走了一个，刚好时隔一年又送走了另一个，我成了部门里剩下的唯一一个 23 届校招生，是资历最浅的了。选择 startup 某种程度上真的是在赌博</div><div class="notion-text notion-block-16e88756397980ec8733d160b9cbbe46">而且，涨薪和晋升都很困难，虽然不会有什么绩效压力，但反过来也没法给你保证清晰的发展路线和天花板足够高的成长空间。好处也是有的，压力不大，很 WLB，甚至可以说比较闲，有相对充足的个人时间</div><div class="notion-blank notion-block-16e88756397980ba92c7d77337fca2ca"> </div><div class="notion-text notion-block-16e88756397980838a35d55630c84c1d">动过很多次离职的念头，很想逃离现状。但这种温水煮青蛙的感觉，加上一些其他的个人规划原因，一直没能付诸行动</div><div class="notion-text notion-block-16e88756397980e4bc90d45095563fab">作为代替，一个尝试是参与了下开源，找了一些分布式 DB 相关的项目，水了些 PR（真的都很水）</div><div class="notion-text notion-block-16e88756397980c8a118c797d3d842df">不过也算是 Apache Contributor 了<s>（后面发现给 Apache Datafusion 提交的一个 PR 引入了问题，导致 InfluxDB 升级依赖后跑不起来，被钉在了耻辱柱上</s></div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e887563979801989a8ef4303814b31"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fa4222a6e-0d6d-4566-a3f9-01974d8c6bb7%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-8019-89a8-ef4303814b31&amp;t=16e88756-3979-8019-89a8-ef4303814b31&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-16e887563979809e83a9eb3f5e74e4e3">收到了一些文化衫和周边</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980a1a4b9ed5327ef79f3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F5b9d67c1-e6e8-481b-9be9-96be968dc85c%2FIMG_5407.heic%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-80a1-a4b9-ed5327ef79f3&amp;t=16e88756-3979-80a1-a4b9-ed5327ef79f3&amp;width=800&amp;cache=v2" alt="GreptimeDB 的周边设计很不错" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">GreptimeDB 的周边设计很不错</figcaption></div></figure><div class="notion-text notion-block-16e88756397980b08a2ccbc096866b3c">过程中有不少收获，对 DB 这块的一些业界产品和路线有了更多的了解。也大概知道了这种开源商业产品的模式，脸熟了社区的一些大佬</div><div class="notion-text notion-block-16e887563979804aa77cf57a841a5386">遗憾的是，业余参与开源很难长期坚持，毕竟无论如何都只能下班后挤时间做，相比这些项目维护者的全职投入，能分配的时间差了太多</div><div class="notion-text notion-block-16e887563979808b94def9bf2f8bf47e">而且一些项目的社区建设并不完善，外人是有很大的信息差的，这本身就会提高贡献门槛。更不用提一些完全是 KPI 开源的项目，压根就没打算维护社区和让外人参与</div><div class="notion-text notion-block-16e88756397980269800f8254bd0cc5e">不过还是希望以后能继续参与到社区之中，这是很有意义的一件事。如果有机会可以写一篇文章怎么从 0 入门开源项目贡献</div><div class="notion-blank notion-block-16e8875639798069ad52d787002f5d96"> </div><div class="notion-text notion-block-16e887563979807bb22dcfdb7310f1d0">今年也看了不少书，感觉质量比较高的是 <em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.databass.dev/">Database Internals</a></em>，风格接近 <em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://dataintensive.net/">DDIA</a></em>（<em>DDIA</em>马上也要出第二版了）。另外还有 <em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://man7.org/tlpi/">The Linux Programming Interface</a></em>，很适合作为更现代的 <em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.oreilly.com/library/view/advanced-programming-in/9780321638014/">APUE</a></em> 替代品</div><div class="notion-text notion-block-16e887563979802881c5fb1263c4ce99"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://xxxuuu.me/post/migrate-blog-to-notion">blog 迁移到 Notion</a> 后提高了更新频率，发了几篇系统解析的文章，这也是激励自己持续学习的一个方法，明年也会尽力保持每月一篇的输出</div><div class="notion-blank notion-block-16e887563979804f91fdf69aeec5311d"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-16e8875639798046b3b7dde42abc15c8" data-id="16e8875639798046b3b7dde42abc15c8"><span><div id="16e8875639798046b3b7dde42abc15c8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#16e8875639798046b3b7dde42abc15c8" title="生活"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">生活</span></span></h3><div class="notion-text notion-block-16e8875639798060b9d5c82a633c1b56">上半年体验了人生第一次坐轮椅出门，没想到已经到了要开始焦虑体检指标的地步了，身体健康真的很重要。自己也慢慢开始锻炼和健康饮食了，<s>虽然熬夜一时半会还没能戒掉</s></div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980d8b3f4e353a9a8ad52"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fdb1a7715-e8e8-4b7c-b3af-b6dce0b61188%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-80d8-b3f4-e353a9a8ad52&amp;t=16e88756-3979-80d8-b3f4-e353a9a8ad52&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-16e887563979800fa042e846912e71e5"> </div><div class="notion-text notion-block-16e887563979809da196d79bbb71ef38">去年的 flag 回收，今年 7 月一次考过了 JLPT N2</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e8875639798013807cf35ac7537449"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F11fc9cd4-49da-4797-a83b-647b4650128a%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-8013-807c-f35ac7537449&amp;t=16e88756-3979-8013-807c-f35ac7537449&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-16e8875639798092afcced229955a023">年底也考了 N1，对完答案惨不忍睹。在群友的建议下尝试<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://zhuanlan.zhihu.com/p/671671625">沉浸式学习</a>，开始啃生肉轻小说和 Galgame。上手后发现并没有想象中困难，慢慢也坚持读了几本书，基本都是ブルーライト文芸题材的内容，难度适中，感觉实际的阅读能力提高了不少。继续立个明年考过 N1 + 流利口语的 flag 吧</div><div class="notion-row notion-block-16e88756397980949620c0973658c39b"><div class="notion-column notion-block-16e887563979805d9c0ce865d83f570e" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980f69c18cfdae72d3d35"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://m.media-amazon.com/images/I/81LjBnyfBtL._SY522_.jpg?spaceId=4cc04375-345a-4a1e-bdf0-3a7c88ef0425&amp;t=16e88756-3979-80f6-9c18-cfdae72d3d35" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-16e8875639798087bea5c69aea23b962" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e8875639798015b40ad41be97f0054"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://m.media-amazon.com/images/I/71glDldRV3L._SY522_.jpg?spaceId=4cc04375-345a-4a1e-bdf0-3a7c88ef0425&amp;t=16e88756-3979-8015-b40a-d41be97f0054" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-16e88756397980178a67dd13b88e28a6" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980688cbcecd8e268a6ea"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://m.media-amazon.com/images/I/71er5ZR9MsL._SY522_.jpg?spaceId=4cc04375-345a-4a1e-bdf0-3a7c88ef0425&amp;t=16e88756-3979-8068-8cbc-ecd8e268a6ea" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-16e887563979809e8c17e70858f7fd4a" style="width:calc((100% - (3 * min(32px, 4vw))) * 0.25)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980bbbfe8c0a26fa459f7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://m.media-amazon.com/images/I/81A-pSZBiWL._SY522_.jpg?spaceId=4cc04375-345a-4a1e-bdf0-3a7c88ef0425&amp;t=16e88756-3979-80bb-bfe8-c0a26fa459f7" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-16e88756397980be9d3de28b60bfec0a"> </div><div class="notion-text notion-block-16e88756397980c09c37f09d2443d758">另外也终于出去走了走，国庆<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://xxxuuu.me/post/japan-travel">在日本玩了一周</a>，体验很好，计划明年还会去两趟（圣地巡礼 TODO 上又加了 Summer Pockets 和败犬女主</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980deaba8d283d1c5379a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fdf3b361f-99c8-4886-b03e-dc24b603510f%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-80de-aba8-d283d1c5379a&amp;t=16e88756-3979-80de-aba8-d283d1c5379a&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-16e887563979804da439cc86268ee531">旅行路上看到成群结伴的学生会稍微有些感慨，真青春啊，开始理解 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.bilibili.com/video/BV159HWe6EYJ/">Links 视频</a>里提到的「学生时代总是有大把时间却没有钱，工作后赚到了钱却没有那么多时间去旅行了」</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980768f9bcbfe998bd0f4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe19d83f9-4536-4a34-99a2-949a462ac494%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-8076-8f9b-cbfe998bd0f4&amp;t=16e88756-3979-8076-8f9b-cbfe998bd0f4&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-16e8875639798003a0b0f42944e36ce8"> </div><div class="notion-text notion-block-16e887563979804eb82ce263a8ae10ed">其它方面，新入了台机子，扩充了家里的 Homelab 成员。在折腾 NAS 上花了很多时间，监控面板成了新的赛博盆栽</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e887563979802ba110d0742d1dbe8f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F3a0b2704-fb17-4a51-9b3a-d8093fae9ddc%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-802b-a110-d0742d1dbe8f&amp;t=16e88756-3979-802b-a110-d0742d1dbe8f&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-16e887563979808a88eac73e0dedb2d9">顺便把 NAS 系统也换上了 fnOS</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980c69902c6cf6284c96b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fb6129a6e-18ef-4506-b780-e2e52434c2ee%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-80c6-9902-c6cf6284c96b&amp;t=16e88756-3979-80c6-9902-c6cf6284c96b&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-16e8875639798016a348cdc724c148ff"> </div><div class="notion-text notion-block-16e88756397980ea9e7ac35e964256e0">年底小惊喜，和友人 HsOjo 抢到了 YOASOBI 的上海 live 票，春节后上海见噜</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16e88756397980eca855d27b53e437ad"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff29a6a7a-29d8-459e-918b-d50d7a26bfae%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16e88756-3979-80ec-a855-d27b53e437ad&amp;t=16e88756-3979-80ec-a855-d27b53e437ad&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-16e887563979806d96f3f4589938a87d"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-16e887563979806bb854edf5e5e695ac" data-id="16e887563979806bb854edf5e5e695ac"><span><div id="16e887563979806bb854edf5e5e695ac" class="notion-header-anchor"></div><a class="notion-hash-link" href="#16e887563979806bb854edf5e5e695ac" title="尾声"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">尾声</span></span></h3><div class="notion-text notion-block-16e88756397980829b9ac451c9b49892">总的来说，今年是平淡的一年，是稍微有些不满意的，想要改变现状</div><div class="notion-text notion-block-16e8875639798011bb30e28e3a01d84a">希望明年能推进计划的小目标，至于具体是什么，明年的年度总结再揭秘吧</div><div class="notion-blank notion-block-16e88756397980659d2cc4e07cb3dbc7"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[确定性模拟器]]></title>
        <id>https://xxxuuu.me/post/deterministic-simulator</id>
        <link href="https://xxxuuu.me/post/deterministic-simulator"/>
        <updated>2024-12-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最初接触到确定性模拟的概念是在 2022 年 Rust China Conf 上听的一场演讲，后续一直持续关注着这个领域，也在腾讯组内分享过相关议题]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-14688756397980f88f88d0bb8697b4a4"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-text notion-block-14e887563979808fb237d3cde90f613c">最初接触到确定性模拟的概念是在 2022 年 Rust China Conf 上听的一场演讲，后续一直持续关注着这个领域，也在腾讯组内分享过相关议题</div><div class="notion-blank notion-block-146887563979801abb15d0452b85dcda"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1468875639798082ae22dd9fc9a43f62" data-id="1468875639798082ae22dd9fc9a43f62"><span><div id="1468875639798082ae22dd9fc9a43f62" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1468875639798082ae22dd9fc9a43f62" title="背景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">背景</span></span></h3><div class="notion-text notion-block-146887563979803d87fce30cc9932e6e">分布式系统面临的问题：</div><ol start="1" class="notion-list notion-list-numbered notion-block-14688756397980ccacc3e58a3f6b6a57"><li>通信不可靠：丢包，超时，乱序，重复</li><ol class="notion-list notion-list-numbered notion-block-14688756397980ccacc3e58a3f6b6a57"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-496883606eeb480f9284f81070003083"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2f213fe1-0bc3-44f8-b28d-487ee51299bb%2FUntitled.png?table=block&amp;id=49688360-6eeb-480f-9284-f81070003083&amp;t=49688360-6eeb-480f-9284-f81070003083&amp;width=1359.984375&amp;cache=v2" alt="无法区分通信失败的原因" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">无法区分通信失败的原因</figcaption></div></figure></ol></ol><ol start="2" class="notion-list notion-list-numbered notion-block-146887563979803aa5b5f29c0e50d3b0"><li>时钟不可靠：时钟漂移，拖尾，回退</li><ol class="notion-list notion-list-numbered notion-block-146887563979803aa5b5f29c0e50d3b0"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-7f92640ce8eb42cfa3848d18a5089a04"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8674fe3b-771b-43f4-860a-10847162d1f5%2FUntitled.png?table=block&amp;id=7f92640c-e8eb-42cf-a384-8d18a5089a04&amp;t=7f92640c-e8eb-42cf-a384-8d18a5089a04&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-84ea314611e8488a93cc61dfd64e986d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F03aedc4e-a2cf-4b3a-b645-d32d76a5b468%2FUntitled.png?table=block&amp;id=84ea3146-11e8-488a-93cc-61dfd64e986d&amp;t=84ea3146-11e8-488a-93cc-61dfd64e986d&amp;width=1359.96875&amp;cache=v2" alt="时钟使得事件排序不可靠" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">时钟使得事件排序不可靠</figcaption></div></figure></ol></ol><ol start="3" class="notion-list notion-list-numbered notion-block-1468875639798009a223cea1d27a3498"><li>节点不可靠：阻塞，宕机，掉线，停顿</li><ol class="notion-list notion-list-numbered notion-block-1468875639798009a223cea1d27a3498"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-d7e394ded11c48cb8e0c460e69085362"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe0b2eeac-ad50-478a-857f-36ceec223c72%2FUntitled.png?table=block&amp;id=d7e394de-d11c-48cb-8e0c-460e69085362&amp;t=d7e394de-d11c-48cb-8e0c-460e69085362&amp;width=1359.953125&amp;cache=v2" alt="GC 停顿期间，世界已经变天了" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">GC 停顿期间，世界已经变天了</figcaption></div></figure></ol></ol><div class="notion-text notion-block-1468875639798062b8c5d87d04aff441">分布式软件/算法的目标：容忍不可靠的环境，实现容错，同时保证安全性</div><div class="notion-text notion-block-1468875639798076a9d3dded2eb4b947">节点不可能只依赖自身状态来对整个系统进行判断，需要达成共识：Paxos、ZAB、Raft….</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979804dbdaacba241bd6b6c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:144px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://raft.github.io/logo/solo.svg?spaceId=4cc04375-345a-4a1e-bdf0-3a7c88ef0425&amp;t=14688756-3979-804d-bdaa-cba241bd6b6c" alt="Raft logo" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">Raft logo</figcaption></div></figure><div class="notion-text notion-block-14688756397980c6861cec28cce2d5e1">通常共识算法都是实现了全序广播，能够保证一系列消息以相同的顺序被应用到每个节点上，以此实现共识</div><div class="notion-blank notion-block-14688756397980f799e1c0397719a466"> </div><div class="notion-text notion-block-146887563979806ab7c9e9578695638b">共识算法的作者都声称他们的算法简单、易于理解，算法本身的正确性也通过形式化验证进行保证</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14d887563979807887c5e2f310cf37a2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F93c5caed-f667-49b7-8ba3-8b3cf803c63d%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14d88756-3979-8078-87c5-e2f310cf37a2&amp;t=14d88756-3979-8078-87c5-e2f310cf37a2&amp;width=1415.95166015625&amp;cache=v2" alt="Raft 论文的标题的定语就是 Understandable" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">Raft 论文的标题的定语就是 Understandable</figcaption></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14d8875639798086b923dfa7249c270a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F765fda1c-1475-4ca9-ba0e-7b1b8870060c%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14d88756-3979-8086-b923-dfa7249c270a&amp;t=14d88756-3979-8086-b923-dfa7249c270a&amp;width=1415.9375&amp;cache=v2" alt="Lamport 的第二篇 Paxos Made Simple 论文中，第一句话是 Paxos is very simple" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">Lamport 的第二篇 <em>Paxos Made Simple</em> 论文中，第一句话是 Paxos is very simple</figcaption></div></figure><div class="notion-text notion-block-14d8875639798026835ff80b749733ab">共识算法看起来没有那么复杂，但具体落地时，正确实现非常困难，分布式系统的环境非常复杂，不确定因素和扰动过多，要在任何一种情况下都能正常工作是一个很大的挑战</div><div class="notion-text notion-block-146887563979802c9b5bf909ab4df682">一些 bug 可能需要运行数千次，才会发生一次，且几乎无法复现</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1468875639798040a39ff7a4e9444f67"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff9fa10f4-1198-4a2f-b546-aed8998940c7%2FUntitled.png?table=block&amp;id=14688756-3979-8040-a39f-f7a4e9444f67&amp;t=14688756-3979-8040-a39f-f7a4e9444f67&amp;width=1056&amp;cache=v2" alt="MIT 6.824 指南通常打着「数千次都不出错」的 slogan，也进一步说明了测试的困难" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">MIT 6.824 指南通常打着「数千次都不出错」的 slogan，也进一步说明了测试的困难</figcaption></div></figure><div class="notion-text notion-block-14688756397980c6b932f3528c2eb1cf">如何解决在分布式系统上进行测试的问题？</div><div class="notion-blank notion-block-14688756397980ada3aaecf1d52b66d2"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980cf99e3e62ed68705a5" data-id="14688756397980cf99e3e62ed68705a5"><span><div id="14688756397980cf99e3e62ed68705a5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980cf99e3e62ed68705a5" title="确定性测试 &amp; 模拟"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">确定性测试 &amp; 模拟</span></span></h3><div class="notion-text notion-block-1468875639798033ad07ef0f3d03592e">安全性的一些业界方案：</div><ul class="notion-list notion-list-disc notion-block-146887563979800c8533edac5c20d358"><li>混沌测试：ChaosMesh</li><ul class="notion-list notion-list-disc notion-block-146887563979800c8533edac5c20d358"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14d887563979803695bac8201bde96f0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fce9ced73-aa89-44bf-aa5f-7bc067eeaf13%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14d88756-3979-8036-95ba-c8201bde96f0&amp;t=14d88756-3979-8036-95ba-c8201bde96f0&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></ul></ul><ul class="notion-list notion-list-disc notion-block-146887563979809c9593f0d4daaa832f"><li>验证框架：Jepsen</li><ul class="notion-list notion-list-disc notion-block-146887563979809c9593f0d4daaa832f"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-87659099a29a423fb64611284eb2ffeb"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdfc75047-5a34-4cc6-91a0-c2a82f4e4cf8%2FUntitled.png?table=block&amp;id=87659099-a29a-423f-b646-11284eb2ffeb&amp;t=87659099-a29a-423f-b646-11284eb2ffeb&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></ul></ul><div class="notion-text notion-block-1468875639798088ad6dc83f56aee1ae">主动向系统注入故障并验证，这能提高错误发生概率，暴露问题。但无法复现的根本问题还是没有解决：</div><ul class="notion-list notion-list-disc notion-block-14e88756397980189eb7d2af4375643f"><li>修复后如何验证真的解决了？还是需要精确复现这个问题</li></ul><ul class="notion-list notion-list-disc notion-block-14e88756397980678c33eef84ff81962"><li>更多时候还因为日志和信息不足无法定位，要给程序添加日志后等待再次复现</li></ul><div class="notion-blank notion-block-1468875639798023bc87da5ae108cbca"> </div><div class="notion-text notion-block-14688756397980058196c86a25cabe3c">可以发现，无法复现的原因是系统有很多因素每次运行时都是不确定的，bug 可能只有在程序的某些执行历史下才会复现。而网络延迟、进程调度的波动，最终都会导致执行历史变化，使系统走向无法预测</div><div class="notion-text notion-block-14e8875639798046b25be1efa8a8f2a3">甚至有可能因为「修复」行为导致问题更难复现，例如为了复现问题，在性能敏感区域加了一长串日志输出，结果因为输出的开销导致的蝴蝶效应更难踩中 bug 触发的时间窗口</div><div class="notion-blank notion-block-163887563979809e8e0ae5e68ab6e62f"> </div><div class="notion-text notion-block-163887563979806d86ced8f9fd7e7068">如果系统像纯函数一样是确定性的，测试就能简单得多。那能不能将不确定性的事件，通过某种参数关联为确定性的事件？典型例子是伪随机数生成器，看起来是不确定性的，实际上是与 seed 关联，结果是确定的。是否可能通过一个 seed，去 hook 系统中的不确定性因素？</div><div class="notion-blank notion-block-14688756397980d2a4dac3b81913bc35"> </div><div class="notion-text notion-block-14688756397980c9bf23db8484ff255f">Sled（一个类似 RocksDB 的嵌入式存储引擎） 的作者在<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://sled.rs/simulation.html">一篇文章</a>中提到他是如何在系统中进行测试的：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1468875639798004b4bfeb00d0243e23"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff0ceda69-c45c-4992-bc66-37c150805e04%2FUntitled.png?table=block&amp;id=14688756-3979-8004-b4bf-eb00d0243e23&amp;t=14688756-3979-8004-b4bf-eb00d0243e23&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><blockquote class="notion-quote notion-block-146887563979809abafdd84c762e6046"><div>Jepsen 的出现成功击溃了几乎所有它测试的分布式系统，这表明我们在根本上以一种错误的方式构建分布式系统，这种方式无法避免 bug 的出现</div></blockquote><div class="notion-blank notion-block-1468875639798064b23de634fd248245"> </div><div class="notion-text notion-block-14688756397980f094cdce1884d02c29">那我们要怎么做才是正确的？</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1468875639798016b156d447217c8c99"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:672px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F973a1bbf-337b-4131-91f6-446e7fe51205%2FUntitled.png?table=block&amp;id=14688756-3979-8016-b156-d447217c8c99&amp;t=14688756-3979-8016-b156-d447217c8c99&amp;width=1344&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><blockquote class="notion-quote notion-block-14688756397980c39d2ecfcff5cec2ec"><div>1. 将代码写成能在模拟器上被确定性运行的形式
2. 写一个模拟器去模拟真实世界的行为</div></blockquote><div class="notion-blank notion-block-14e887563979804a8b40f7b088c16bf0"> </div><div class="notion-text notion-block-14e8875639798040915fc27a22c99bdf">这就是确定性模拟器</div><div class="notion-blank notion-block-14d88756397980878306cd07f8fa013e"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980d5bf4bdf676b154192" data-id="14688756397980d5bf4bdf676b154192"><span><div id="14688756397980d5bf4bdf676b154192" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980d5bf4bdf676b154192" title="业界实现和落地"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">业界实现和落地</span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-14e887563979801fa62bdfbe156f074d" data-id="14e887563979801fa62bdfbe156f074d"><span><div id="14e887563979801fa62bdfbe156f074d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14e887563979801fa62bdfbe156f074d" title="FoundationDB"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">FoundationDB</span></span></h4><div class="notion-text notion-block-146887563979801dbcd3da848c7040c3">FoundationDB 是 Apple 开源的分布式 KV 数据库，FoundationDB 在开发之初花了两年实现模拟器，在后期取得了非常大的回报，是业界最早全面落地确定性测试的工程之一，也是为数不多能够通过 Jepsen 的系统</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979807fb5edf38e8d6f9f4e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:381.9957275390625px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F976d433c-4a1f-4a57-8512-3d3a96b455f1%2FUntitled.png?table=block&amp;id=14688756-3979-807f-b5ed-f38e8d6f9f4e&amp;t=14688756-3979-807f-b5ed-f38e8d6f9f4e&amp;width=763.991455078125&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-146887563979804ab414cf66116330b5">FoundationDB 基于 C++ 扩展出了一个名为 Flow 的语言（与其说是语言，更像一种扩展的宏功能，只进行了预编译处理）</div><div class="notion-text notion-block-15588756397980099b36e6ee36419c76">Flow 采用 Actor 单线程异步模型（async/await），由 runtime 负责所有调度，以此控制执行顺序，确保不会因为内核的线程调度导致不确定性。再通过接口接管了网络、存储、时间等其他外部调用，实现所有不确定性事件的受控</div><div class="notion-blank notion-block-1558875639798060a127e61da4ff8e98"> </div><div class="notion-text notion-block-15588756397980fc947ddab04fd4a368">在这些改造后，Flow 看起来也和 C++ 没什么区别，使用 <code class="notion-inline-code">ACTOR</code> 即可定义一个异步任务：</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-cpp">ACTOR Future&lt;float&gt; asyncAdd(Futur&lt;float&gt; f, float offset) {
    float value = wait(f);
    return value + offset;
}</code></pre><div class="notion-text notion-block-14e887563979807b840ce426982423df">模拟器中每个测试由一段配置文件定义，这里包括了测试的行为，以及注入的故障，例如向网络注入延迟、关闭连接、杀死节点、变更配置等。只要用相同的配置文件作为输入，模拟器就会产生相同的执行历史，问题就能被复现</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-plain text">testTitle=SwizzledCycleTest
    testName=Cycle
    transactionsPerSecond=1000.0
    testDuration=30.0
    expectedRate=0.01

    testName=RandomClogging
    testDuration=30.0
    swizzle = 1

    testName=Attrition
    machinesToKill=10
    machinesToLeave=3
    reboot=true
    testDuration=30.0
    
    testName=ChangeConfig
    maxDelayBeforeChange=30.0
    coordinators=auto</code></pre><div class="notion-text notion-block-14e887563979808188f0f6d31be0fd70">FoundationDB 本身是开源的，但可惜模拟器部分没有开源，论文和演讲中也只进行了简单介绍</div><figure class="notion-asset-wrapper notion-asset-wrapper-video notion-block-14d88756397980efa5a8fad2fa764a39"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;padding-bottom:56.25%"><link rel="preload" as="image" href="https://i.ytimg.com/vi/4fFDFbi3toc/hqdefault.jpg" imageSrcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/default.webp 120w, https://i.ytimg.com/vi_webp/4fFDFbi3toc/mqdefault.webp 320w, https://i.ytimg.com/vi_webp/4fFDFbi3toc/hqdefault.webp 480w, https://i.ytimg.com/vi_webp/4fFDFbi3toc/sddefault.webp 640w, https://i.ytimg.com/vi_webp/4fFDFbi3toc/maxresdefault.webp 1280w" imageSizes="(max-width: 120px) 120px, (max-width: 320px) 320px, (max-width: 480px) 480px, (max-width: 640px) 640px, (max-width: 1280px) 1280px"/><div class="notion-yt-lite notion-asset-object-fit" style="object-fit:contain"><picture><source srcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/default.webp 120w" media="(max-width: 120px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/mqdefault.webp 320w" media="(max-width: 320px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/hqdefault.webp 480w" media="(max-width: 480px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/sddefault.webp 640w" media="(max-width: 640px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/4fFDFbi3toc/maxresdefault.webp 1280w" media="(max-width: 1280px)" type="image/webp"/><img src="https://i.ytimg.com/vi/4fFDFbi3toc/hqdefault.jpg" class="notion-yt-thumbnail" alt="Video preview"/></picture><div class="notion-yt-playbtn"></div></div></div><figcaption class="notion-asset-caption">“Don’t debug your system, debug a simulation instead.”</figcaption></figure><div class="notion-blank notion-block-16388756397980c88a75fc9b49013e01"> </div><div class="notion-text notion-block-16388756397980db84d3cbdf3226052b">最终，他们声称确定性模拟让他们发现了数据库<b>所有</b> bug：</div><blockquote class="notion-quote notion-block-1638875639798055a2d2f0719ed0694d"><div>Anyway, we did this for a while and found all of the bugs in the database. I know, I know, that’s an insane thing to say. It’s kind of true though. In the entire history of the company, I think we only ever had one or two bugs reported by a customer. <em>Ever</em>. Kyle Kingsbury aka “aphyr” didn’t even bother testing it with Jepsen, because he didn’t think he’d find anything.</div></blockquote><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-163887563979809aa586f2403bc1a49b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ffb249a39-9fb3-4972-8d23-40a0631b0304%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16388756-3979-809a-a586-f2403bc1a49b&amp;t=16388756-3979-809a-a586-f2403bc1a49b&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-16388756397980dba4ffdf3176c6beef">无论如何，FoundationDB 开创了确定性模拟的先河。所有后来者都无法绕过 FoundationDB 的影响</div><div class="notion-blank notion-block-1468875639798089887fddef36bb3744"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-146887563979809697e1f9037ff18883" data-id="146887563979809697e1f9037ff18883"><span><div id="146887563979809697e1f9037ff18883" class="notion-header-anchor"></div><a class="notion-hash-link" href="#146887563979809697e1f9037ff18883" title="RisingWave &amp; MadSim"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">RisingWave &amp; MadSim</span></span></h4><div class="notion-text notion-block-15588756397980209a3ee98f34aabf18"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/risingwavelabs/risingwave">RisingWave</a> 是一个分布式流数据库，受到 FoundationDB 的启发，他们开发了一个名为 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/madsim-rs/madsim">MadSim</a> 的确定性测试框架，两者都是开源项目</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15588756397980d5a9c9d84116744b96"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F683e1fa8-10b4-46f1-8e56-dc5a6fe7630a%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-80d5-a9c9-d84116744b96&amp;t=15588756-3979-80d5-a9c9-d84116744b96&amp;width=1415.9658203125&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-155887563979805c8064ca0cf669e11e"> </div><div class="notion-text notion-block-1558875639798003a518d2a03b846bca">RisingWave 和 MadSim 都基于 Rust 开发。Rust 原生支持异步，但特殊的是，Rust 只提供了异步需要的语言特性、关键字和相关类型等；如异步任务如何执行、管理和调度等具体实现则不在语言内提供，因此社区有各种不同的 runtime</div><div class="notion-text notion-block-15588756397980bcad79c98d3ad9c90f">在这种设计下，MadSim 就可以作为一个异步 runtime 呈现，使用单线程运行异步任务，不需要对语言做侵入性改动即可轻松控制调度，并且能和工具链（如调试器）结合得更好</div><div class="notion-blank notion-block-15588756397980f9ab0fcb4f38655458"> </div><div class="notion-text notion-block-155887563979804181d5c26aa14efb3c">MadSim 的基本架构如下，这里也参考了 FoundationDB，包括一个全局的随机数生成器，以及基于这之上的定时器，任务调度器和环境模拟（网络、存储）</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15588756397980609138d8bae2d3e272"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fee0cf179-f3de-4b34-aed2-fe0ce16b7108%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-8060-9138-d8bae2d3e272&amp;t=15588756-3979-8060-9138-d8bae2d3e272&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-15588756397980dcb057f7491ab0735d">除此之外，MadSim 还提供了对 Rust 异步 runtime 事实标准 tokio 的 API 兼容，这使得使用 tokio 的项目无需修改一行代码，就可以无缝接入 MadSim</div><div class="notion-text notion-block-15588756397980759ca3c85efd227d9c">还有一些异步 API 之外的部分，例如获取系统时间和配置等（<code class="notion-inline-code">gettimeofday</code><span style="padding:0.5em"></span><code class="notion-inline-code">get_random</code><span style="padding:0.5em"></span><code class="notion-inline-code">sysconf</code> 等 API），可能会被部分标准库和依赖库不知不觉地调用而破坏确定性，Madsim 通过重载 libc 函数完成 hook</div><div class="notion-text notion-block-15588756397980d699b1fde45aa6e309">最后一些常见的外部系统网络交互的 client 库，也提供了有确定性模拟的包装实现</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15588756397980e9a241c485214a3f3a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F7cd5f1fb-c836-4b1a-bace-c3f094b8e3cb%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-80e9-a241-c485214a3f3a&amp;t=15588756-3979-80e9-a241-c485214a3f3a&amp;width=4456&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-15588756397980ce9df5f0342930d96e"> </div><div class="notion-text notion-block-146887563979805d924fe6a74a881692">MadSim 中，系统中每一个节点被抽象成状态机。输入会触发节点的状态转移，输入通常有两类：消息和定时器。而节点的输出就是对另一个节点发送的消息，定时器通常是节点自身在某一时刻做的一件事情</div><div class="notion-text notion-block-ff0a8206103c457da809b4356a897c93">在系统的一开始，存在一个初始状态，接着一些节点的定时器可能被激活（例如心跳或注册等），触发状态转移，发送消息给其它节点，进一步触发其它节点的转移</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-93733ab20e614462b5bf01440b2c8d59"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:672px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd758bf6b-a683-4d6d-af43-3d498791c1e7%2FUntitled.png?table=block&amp;id=93733ab2-0e61-4462-b5bf-01440b2c8d59&amp;t=93733ab2-0e61-4462-b5bf-01440b2c8d59&amp;width=1344&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14688756397980859faaf36901f37fe2">从更高的维度将「整个系统」看作一个大的状态机，唯一的外部输入就只有时间，整个系统就是一个随着时间不断变化状态的状态机，可以看作只有状态转移的时候，时间才被推进了</div><div class="notion-text notion-block-15588756397980249cb7cf4ba1e3f73f">将这些状态的转移在时间轴上排列，状态转移之间的时间对状态机是没意义的，模拟器就可以通过离散事件模拟的方式在一个转移结束后直接跳到下一个转移的时间节点，实现时间加速<div class="notion-text-children"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-f4b66a13e0af4e59b6318320d65ea25b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F71dc8c92-485e-4049-ac85-ed203598b1ce%2FUntitled.png?table=block&amp;id=f4b66a13-e0af-4e59-b631-8320d65ea25b&amp;t=f4b66a13-e0af-4e59-b631-8320d65ea25b&amp;width=1344&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div></div><div class="notion-text notion-block-15588756397980eb8801fda0a89bc81d">这也是 FoundationDB 中提过的模拟器的另一个好处</div><div class="notion-blank notion-block-15588756397980ca87ccd04e9c81f48a"> </div><div class="notion-text notion-block-15588756397980548a08fbb411b18a98">既然是开源的，简单看一下关键实现</div><ul class="notion-list notion-list-disc notion-block-14688756397980618912ed8070306960"><li>runtime 初始化时，使用传入的 seed 构造随机数生成器，之后所有事件的模拟都能被这个 seed 确定</li><ul class="notion-list notion-list-disc notion-block-14688756397980618912ed8070306960"><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-rust">/// Create a new runtime instance with given seed and config.
pub fn with_seed_and_config(seed: u64, config: Config) -&gt; Self {
    let rand = rand::GlobalRng::new_with_seed(seed);
    let sims = Arc::new(Mutex::new(HashMap::new()));
    let task = task::Executor::new(rand.clone(), sims.clone());
    let handle = Handle {
        rand: rand.clone(),
        time: task.time_handle().clone(),
        task: task.handle().clone(),
        sims,
        config,
        allow_system_thread: false,
    };
    let rt = Runtime { rand, task, handle };
    rt.add_simulator::&lt;fs::FsSim&gt;();
    rt.add_simulator::&lt;net::NetSim&gt;();
    rt
}</code></pre><figcaption class="notion-asset-caption">madsim/src/sim/runtime/mod.rs</figcaption></ul></ul><ul class="notion-list notion-list-disc notion-block-146887563979808cb56bf7721a3b7fa0"><li>定时器，实质上是在时间堆中加入了一个带定时器回调的输入</li><ul class="notion-list notion-list-disc notion-block-146887563979808cb56bf7721a3b7fa0"><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-rust">pub(crate) fn add_timer_at(
    &amp;self,
    deadline: Instant,
    callback: impl FnOnce() + Send + Sync + &#x27;static,
) {
    let mut timer = self.timer.lock();
    timer.add(deadline - self.clock.base_instant(), |_| callback());
}

pub(crate) fn add_timer(&amp;self, dur: Duration, callback: impl FnOnce() + Send + Sync + &#x27;static) {
    self.add_timer_at(self.clock.now_instant() + dur, callback);
}</code></pre><figcaption class="notion-asset-caption">madsim/src/sim/time/mod.rs</figcaption></ul></ul><ul class="notion-list notion-list-disc notion-block-14688756397980fb8a7dfccd5dffb793"><li>调度器：通过 event-loop 来进行调度，从就绪队列里随机取任务执行，这里的「随机」也是基于全局的随机数生成器，调度顺序都是被 seed 确定的。然后直接跳转到下一个事件的时间点</li><ul class="notion-list notion-list-disc notion-block-14688756397980fb8a7dfccd5dffb793"><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-rust">pub fn block_on&lt;F: Future&gt;(&amp;self, future: F) -&gt; F::Output {
    // ...
    
    loop {
        self.run_all_ready();
        if task.is_finished() {
            return task.now_or_never().unwrap();
        }
        let going = self.time.advance_to_next_event();
        
        // ...
    }
}

/// Drain all tasks from ready queue and run them.
fn run_all_ready(&amp;self) {
    while let Ok(runnable) = self.queue.try_recv_random(&amp;self.rand) {
        // ...
        
        // run the task
        let res = {
            let _guard = crate::context::enter_task(info.clone());
            std::panic::catch_unwind(move || work(runnable))
        };
        if let Err(e) = res {
            // ...
        }

        // advance time: 50-100ns
        let dur = Duration::from_nanos(self.rand.with(|rng| rng.gen_range(50..100)));
        self.time.handle().advance(dur);
    }
}</code></pre><figcaption class="notion-asset-caption">madsim/src/sim/task/mod.rs</figcaption></ul></ul><ul class="notion-list notion-list-disc notion-block-14688756397980c18154d71ad5bbaf1d"><li>网络接口的语义比较复杂，这部分有不小工作量，最底下是维护链接的实现，这里存储了所有节点的信息，使用 channel 进行通信，并且可以根据配置的丢包率和延迟来注入故障。再往上提供 socket 语义的接口，感觉都是体力活</li><ul class="notion-list notion-list-disc notion-block-14688756397980c18154d71ad5bbaf1d"><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-rust">/// Opens a new connection to destination.
pub(crate) async fn connect1(
    self: &amp;Arc&lt;Self&gt;,
    node: NodeId,
    port: u16,
    mut dst: SocketAddr,
    protocol: IpProtocol,
) -&gt; io::Result&lt;(PayloadSender, PayloadReceiver, SocketAddr)&gt; {
    self.rand_delay().await?;
    if let Some(addr) = self
        .ipvs
        .get_server(ServiceAddr::from_addr_proto(dst, protocol))
    {
        dst = addr.parse().expect(&quot;invalid socket address&quot;);
    }
    let (ip, dst_node, socket, latency) = (self.network.lock().try_send(node, dst, protocol))
        .ok_or_else(|| {
        io::Error::new(io::ErrorKind::ConnectionRefused, &quot;connection refused&quot;)
    })?;
    let src = (ip, port).into();
    let (tx1, rx1) = self.channel(node, dst, protocol);
    let (tx2, rx2) = self.channel(dst_node, src, protocol);
    trace!(?latency, &quot;delay&quot;);
    // FIXME: delay
    // self.time.add_timer(latency, move || {
    socket.new_connection(src, dst, tx2, rx1);
    // });
    Ok((tx1, rx2, src))
}

/// Try sending a message to the destination.
///
/// If destination is not found or packet loss, returns `None`.
/// Otherwise returns the source IP, socket and latency.
pub fn try_send(
    &amp;mut self,
    node: NodeId,
    dst: SocketAddr,
    protocol: IpProtocol,
) -&gt; Option&lt;(IpAddr, NodeId, Arc&lt;dyn Socket&gt;, Duration)&gt; {
    let dst_node = self.resolve_dest_node(node, dst, protocol)?;
    let latency = self.test_link(node, dst_node)?;
    let sockets = &amp;self.nodes.get(&amp;dst_node)?.sockets;
    let ep = (sockets.get(&amp;(dst, protocol)))
        .or_else(|| sockets.get(&amp;((Ipv4Addr::UNSPECIFIED, dst.port()).into(), protocol)))?;
    let src_ip = if dst.ip().is_loopback() {
        IpAddr::V4(Ipv4Addr::LOCALHOST)
    } else {
        self.nodes.get(&amp;node).expect(&quot;node not found&quot;).ip.unwrap()
    };
    Some((src_ip, dst_node, ep.clone(), latency))
}

/// Returns the latency of sending a packet. If packet loss, returns `None`.
fn test_link(&amp;mut self, src: NodeId, dst: NodeId) -&gt; Option&lt;Duration&gt; {
    if self.link_clogged(src, dst) || self.rand.gen_bool(self.config.packet_loss_rate) {
        None
    } else {
        self.stat.msg_count += 1;
        // TODO: special value for loopback
        Some(self.rand.gen_range(self.config.send_latency.clone()))
    }
}</code></pre><figcaption class="notion-asset-caption">madsim/src/sim/net/mod.rs &amp; madsim/src/sim/net/network.rs</figcaption></ul></ul><div class="notion-blank notion-block-1558875639798000a34dc6a02159cb77"> </div><div class="notion-text notion-block-15588756397980769bd3d7121fc3f77c">作者提供了一个基于 MadSim 的 MIT 6.824 课程 Raft 实验的重写版 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/madsim-rs/madraft">MadRaft</a>，这里模拟器中的 Raft 测试比真实运行快上近百倍：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979805daab6ee285a94362b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F20011529-118d-4555-a03e-fa8e8c527556%2FUntitled.png?table=block&amp;id=14688756-3979-805d-aab6-ee285a94362b&amp;t=14688756-3979-805d-aab6-ee285a94362b&amp;width=1416&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-1558875639798092858fe69881f0fee9">对于未通过的测试，模拟器返回一个 seed，下次使用同样的 seed 运行，就能得到相同的结果</div><div class="notion-blank notion-block-1558875639798019b605da63c99b640e"> </div><div class="notion-text notion-block-15588756397980c1a5bde7c817807ff5">在 RisingWave 中，Madsim 被应用在四种不同的测试中：</div><ol start="1" class="notion-list notion-list-numbered notion-block-15588756397980c8a5e9d86058788242"><li>单元测试：单元测试关注面比较小，难以发现复杂的问题，所以不是确定性测试主要作用的目标，但确定性模拟器在这里还是起了不少作用，比如测试有关超时的逻辑能瞬间完成。另外单元测试也能反过来验证一些外部系统包装（如 etcd 模拟器）的实现正确与否</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-1558875639798013a01cf1d76abbd18a"><li>E2E 测试：E2E 测试中涵盖了系统的各个模块，更容易出现错误。RisingWave 架构复杂，涉及各种服务</li><ol class="notion-list notion-list-numbered notion-block-1558875639798013a01cf1d76abbd18a"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15588756397980e9b9b3d1a2b78dfed3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff109c7a4-9022-4d0b-b944-41c93e5d7180%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-80e9-b9b3-d1a2b78dfed3&amp;t=15588756-3979-80e9-b9b3-d1a2b78dfed3&amp;width=7680&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-1558875639798052b282e41bc56ecc5f">通过 MadSim，可以将上述所有服务运行在模拟器的单线程环境中，使环境构建简单得多，并且基于模拟器时间加速的特性，一轮完整测试只用耗时两分钟，是原先的四分之一</div><div class="notion-text notion-block-155887563979802298c8d0f39cf008b6">并且能轻松地并行执行测试，如果发生了错误，使用同样的 seed 就可以轻易复现结果，包括修改代码添加日志，也不会影响可复现性</div></ol></ol><ol start="3" class="notion-list notion-list-numbered notion-block-15588756397980a58c42dec92a24d35b"><li>异常测试：E2E 测试主要还是在测试正常情况下的行为，没法完全发挥 MadSim 的作用。在异常测试中，会刻意构造各种故障并验证系统是否仍然能保持正确。在这个过程中发现了很多 bug，得益于模拟器的可复现性，这些问题都能被很快定位和修复</li><ol class="notion-list notion-list-numbered notion-block-15588756397980a58c42dec92a24d35b"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15588756397980c2a428e4466ebf8748"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F68419cd1-0ecb-4e97-99dd-1a2adbb04406%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-80c2-a428-e4466ebf8748&amp;t=15588756-3979-80c2-a428-e4466ebf8748&amp;width=6910&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></ol></ol><ol start="4" class="notion-list notion-list-numbered notion-block-15588756397980569ffaf5656b3c5b70"><li>扩容测试：集群配置发生变化时，需要进行重平衡，这个过程也很容易发生错误，特别是叠加异常情况时</li><ol class="notion-list notion-list-numbered notion-block-15588756397980569ffaf5656b3c5b70"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-155887563979803ca4ebfa1b93eb2234"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fdb6930a8-b915-4f9f-833c-16b133ea15f6%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15588756-3979-803c-a4eb-fa1b93eb2234&amp;t=15588756-3979-803c-a4eb-fa1b93eb2234&amp;width=1359.9857177734375&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-15688756397980379aadc09f5ac94bbf">在正常测试中，受限于集群和数据规模的问题，测试覆盖面不足。但在模拟器中可以轻松构造较大规模和极端情况下的 case，帮助发现并修复了大量问题</div></ol></ol><div class="notion-text notion-block-156887563979800c9402f7227ae25c39">在 CI 中，每一项确定性测试都会用不同的 seed 并行执行 16 次（16 核 CI 机器），以尽可能提高覆盖率</div><div class="notion-blank notion-block-15688756397980ceb0ecc39f8deb0f5f"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-15688756397980f5ae6def2512c94e7e" data-id="15688756397980f5ae6def2512c94e7e"><span><div id="15688756397980f5ae6def2512c94e7e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#15688756397980f5ae6def2512c94e7e" title="Dropbox Trinity"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Dropbox <b>Trinity</b></span></span></h4><div class="notion-text notion-block-15688756397980c49eb5c9a9a211f267">Dropbox 中 Sync Engine 是一个核心功能，负责在客户端和服务器之间进行文件同步</div><div class="notion-text notion-block-156887563979806da76cc663ddac212b">2016 年，Dropbox 开始使用 Rust 重写它们的 Sync Engine，并引入了确定性模拟技术来测试，该部分称为 Trinity</div><div class="notion-text notion-block-15688756397980b9804dfa061cd6059d">动机就像我们一开始提到的那样，问题复现困难，也没有足够日志定位：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1568875639798002812bc1bfb8bb916e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F70b000f9-def1-4452-ba16-29d7a0af0188%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15688756-3979-8002-812b-c1bfb8bb916e&amp;t=15688756-3979-8002-812b-c1bfb8bb916e&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-156887563979800bbe54c2d26a2fc767">整个测试流程也是类似的，通过 seed 构造全局随机数生成器来生成之后的所有随机决策，如果测试失败则输出 seed</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1568875639798098ad64f1f378d9ea14"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F5cf0904e-be75-4d15-a553-96685049fef7%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15688756-3979-8098-ad64-f1f378d9ea14&amp;t=15688756-3979-8098-ad64-f1f378d9ea14&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-156887563979803690d4ddc19da4df4f">由于也是 Rust 开发，Trinity 也是作为一个异步 runtime 执行，其他方面也都类似，包括文件系统、网络和时间模拟</div><div class="notion-text notion-block-16388756397980858430e495a91a56a3">Rust 生态中异步 runtime 的事实标准 tokio 也宣布了其官方的确定性测试项目 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/tokio-rs/turmoil">turmoil</a>，在这方面 Rust 还是走在了前列</div><div class="notion-blank notion-block-15688756397980ec9de5daeb532f7b16"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-1568875639798032881fe3ed296331a8" data-id="1568875639798032881fe3ed296331a8"><span><div id="1568875639798032881fe3ed296331a8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1568875639798032881fe3ed296331a8" title="TigerBeetle &amp; VOPR"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">TigerBeetle &amp; VOPR</span></span></h4><div class="notion-text notion-block-15688756397980249bafcb35507d9dc4"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/tigerbeetle/tigerbeetle">TigerBeetle</a> 是一个专为金融事务场景设计的数据库，使用 Zig 开发，在首页就着重强调了它们使用确定性模拟来构建数据库以体现可靠性</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15688756397980998ab3d69c8b466640"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F8f427043-fb74-48df-9093-53384be92349%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15688756-3979-8099-8ab3-d69c8b466640&amp;t=15688756-3979-8099-8ab3-d69c8b466640&amp;width=1415.9801025390625&amp;cache=v2" alt="「历经数个世纪的测试」" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">「历经数个世纪的测试」</figcaption></div></figure><div class="notion-text notion-block-15688756397980848c3fdc05dd9c488f">并且这个模拟版本 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://sim.tigerbeetle.com/">SimTigerBeetle</a> 是可以运行在浏览器中的，还包装成了一个游戏的形式，能够折磨这些 beetle（注入故障）</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-15688756397980409b67fbf1dc7c01f3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff577125b-a82f-4bc4-9273-af63ba3158d2%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=15688756-3979-8040-9b67-fbf1dc7c01f3&amp;t=15688756-3979-8040-9b67-fbf1dc7c01f3&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-15688756397980af870ee158c659751a">他们开发了称为 Viewstamped Operation Replicator (VOPR) 的模拟器，并将系统编译为 WebAssembly 运行，和前面的模拟器一样，这里也都包含网络、存储、时钟的模拟，并支持故障注入</div><div class="notion-blank notion-block-15688756397980efa20eff5d2b27d237"> </div><div class="notion-text notion-block-15688756397980af8283c59e4f873bc6">Zig 不像 Rust 那样可以自定义异步 runtime，那这里是如何控制调度的呢？一开始认为这里编译为 WASM 的目的除了支持浏览器外，也是为了能在模拟器上单线程执行。但看了文档才发现，TigerBeetle 从一开始就是单线程的设计，那也不需要什么控制调度一说了：</div><ul class="notion-list notion-list-disc notion-block-1568875639798044a934f77c1927aa95"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.tigerbeetle.com/about/performance#single-core-by-design">https://docs.tigerbeetle.com/about/performance#single-core-by-design</a></li></ul><div class="notion-text notion-block-15d88756397980719a01fda4c4c76ea1">但并发是必须的，不利用多线程或其他语言的异步机制，如何实现并发？</div><div class="notion-text notion-block-15688756397980aa887cca129211a741">从<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/tigerbeetle/tigerbeetle/blob/main/src/vopr.zig">代码</a>上来看，模拟器会每次通过一个 <code class="notion-inline-code">tick</code> 推进进度，下面每一层，节点、网络、存储和时间都有对应的 <code class="notion-inline-code">tick</code> 实现</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-plain text">pub fn main() !void {
    // ...

    while (tick &lt; cli_args.ticks_max_convergence) : (tick += 1) {
        simulator.tick();
        tick_total += 1;
        if (simulator.pending() == null) {
            break;
        }
    }

    // ...
}

pub fn tick(simulator: *Simulator) void {
    simulator.cluster.context = simulator;

    simulator.cluster.tick();
    simulator.tick_requests();
    simulator.tick_crash();
}</code></pre><figcaption class="notion-asset-caption">tigerbeetle/src/vopr.zig</figcaption><div class="notion-text notion-block-156887563979801eb69ee2aa947cdf33">真实运行的部分，也是通过 <code class="notion-inline-code">tick</code> 不停推进。相当于手动在代码结构上设计了任务的时间片切分，每 <code class="notion-inline-code">tick</code> 一次就执行这个任务的一个时间片，调度顺序就是代码中 <code class="notion-inline-code">tick</code> 调用的顺序，本身就是被确定的。这是完全贯彻了把系统作为状态机实现的想法，从一开始就是为确定性模拟而设计的：</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-plain text">while (true) {
    replica.tick();
    if (multiversion != null) multiversion.?.tick();
    try command.io.run_for_ns(constants.tick_ms * std.time.ns_per_ms);
}</code></pre><figcaption class="notion-asset-caption">tigerbeetle/src/tigerbeetle/main.zig</figcaption><div class="notion-text notion-block-1568875639798033a8c4f2fa564262a8">这对代码设计要求会比较高，在很多场景是反范式的，例如 TigerBeetle 内 LSM-Tree 的实现，有点难想象如何通过一堆 tick 来推进整个 LSM-Tree 的 Compaction 流程：</div><ul class="notion-list notion-list-disc notion-block-15688756397980848ce8cac3a55edd48"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.tigerbeetle.com/about/internals/lsm">https://docs.tigerbeetle.com/about/internals/lsm</a></li></ul><div class="notion-text notion-block-15d88756397980b0abc9f6e61c7e6a49">以及他们如何设计这样的 I/O 库：</div><ul class="notion-list notion-list-disc notion-block-15d88756397980609a0ccb05b9fb541d"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue">A Programmer-Friendly I/O Abstraction Over io_uring and kqueue</a></li></ul><div class="notion-text notion-block-15f88756397980c8bee5e16ebd98c2b5">除此之外，TigerBeetle 还有些很独特的设计哲学，例如 0 依赖、0 动态内存分配。包括确定性模拟，这些思想都很前卫，值得一看：</div><ul class="notion-list notion-list-disc notion-block-15f887563979805ea240e10edd6b6039"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md">Tiger Style</a></li></ul><div class="notion-blank notion-block-156887563979807298abd5788f197995"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-14e8875639798099adefeb9c7aedb2c8" data-id="14e8875639798099adefeb9c7aedb2c8"><span><div id="14e8875639798099adefeb9c7aedb2c8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14e8875639798099adefeb9c7aedb2c8" title="FrostDB &amp; Resonate"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">FrostDB &amp; Resonate</span></span></h4><div class="notion-text notion-block-156887563979803d91e6ebcd952b1b20">从前面的方案中可以发现，大部分外部调用都可以通过接口 mock 的方式来实现确定性，最麻烦的是如何让整个分布式系统运行在一个节点的一个线程上，消除调度的不确定性</div><div class="notion-text notion-block-15d88756397980bd9e9ce0969fd8918d">上文提到的系统中除了 Rust 能比较好地实现外，其他语言都有些限制，但从头自己造一套任务和调度机制，还是能做到的</div><div class="notion-text notion-block-15d8875639798014a2fcd855d9a18884">而另外一些语言在设计之处就是完全透明多线程的，在这些语言上会困难得多。例如 Go，很难去避免使用 goroutine，而一旦有多个 goroutine，调度就完全不可控了</div><div class="notion-blank notion-block-15d8875639798018a997df6b4fc342b4"> </div><div class="notion-text notion-block-15d8875639798014a3f9eb9e919b10a9">虽然可以将 Go 程序编译为 WASM 来单线程执行并禁用抢占（<code class="notion-inline-code">GOMAXPROCS=1</code> 是不行的，碰到阻塞调用时还是会创建线程），但 runtime 仍然会<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/golang/go/blob/35ef4a9f330fdff870ff637558ec2fd03a93fd9c/src/runtime/proc.go#L6655">故意随机调度 goroutine</a>，以及 Go 的 map 遍历顺序也是故意随机的，还有<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.merovius.de/posts/2018-01-15-generating_entropy_without_imports_in_go/">其他很多不确定性来源</a></div><div class="notion-text notion-block-15d88756397980269adbca92f7e007a7">不过 Go runtime 中这些不确定性来源都是通过启动时的一个 seed 来确定的（就像确定性模拟器做的那样），如果能自定义这个 seed 那就能解决这些问题。但只差这一步，Go 的 runtime 开放和自定义程度很低。要想突破这最后一个限制，只能 fork 一份 runtime 来修改。这几乎就是 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/polarsignals/frostdb">FrostDB</a> 所做的事，他们 fork 了 Go runtime <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/polarsignals/go/commit/ea083ca4892a62eb229c1886517e1cdb575ee19a#diff-99a8f74dc3dbef74ab6a6792a8e36e17d2196486ef16e9b8199ce9a9e7512183R44-R52">修改了几行代码</a> 来实现这一切：</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-15d88756397980c6817fc6bbd63bae9d" href="https://github.com/polarsignals/go/commit/ea083ca4892a62eb229c1886517e1cdb575ee19a#diff-99a8f74dc3dbef74ab6a6792a8e36e17d2196486ef16e9b8199ce9a9e7512183R44-R52"><div><div class="notion-bookmark-title">runtime: add GORANDSEED to seed go runtime&#x27;s randomness · polarsignals/go@ea083ca</div><div class="notion-bookmark-description">This helps with deterministic execution. This commit additionally enables randomized scheduling. The runtime needs to be run with GOOS=wasip1 GOARCH=wasm for deterministic executions given an initi...</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fgithub.com%2Ffluidicon.png?table=block&amp;id=15d88756-3979-80c6-817f-c6bbd63bae9d&amp;t=15d88756-3979-80c6-817f-c6bbd63bae9d" alt="runtime: add GORANDSEED to seed go runtime&#x27;s randomness · polarsignals/go@ea083ca" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://github.com/polarsignals/go/commit/ea083ca4892a62eb229c1886517e1cdb575ee19a#diff-99a8f74dc3dbef74ab6a6792a8e36e17d2196486ef16e9b8199ce9a9e7512183R44-R52</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fopengraph.githubassets.com%2F87e8c262666f4289280b098950624d382352a13bc2ff2d18524c0bc9859b943b%2Fpolarsignals%2Fgo%2Fcommit%2Fea083ca4892a62eb229c1886517e1cdb575ee19a?table=block&amp;id=15d88756-3979-80c6-817f-c6bbd63bae9d&amp;t=15d88756-3979-80c6-817f-c6bbd63bae9d" alt="runtime: add GORANDSEED to seed go runtime&#x27;s randomness · polarsignals/go@ea083ca" loading="lazy" decoding="async"/></div></a></div><div class="notion-blank notion-block-15d887563979807090a7c9036452a144"> </div><div class="notion-text notion-block-15d8875639798032b987d34fa11492ed">另一条路线是 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/resonatehq/resonate">Resonate</a>，他们则是确实避免使用 goroutine，自己造了一套 coroutine：</div><a target="_blank" rel="noopener noreferrer" href="https://github.com/resonatehq/resonate/blob/268c588e302f13187309e4b37636d19595d42fa1/internal/kernel/scheduler/coroutine.go" class="notion-external notion-external-block notion-row notion-block-15688756397980b8b0e7fe471ca097c1"><div class="notion-external-image"><svg viewBox="0 0 260 260"><g><path d="M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z" fill="#161614"></path></g></svg></div><div class="notion-external-description"><div class="notion-external-title">coroutine.go</div><div class="notion-external-block-desc">resonatehq</div></div></a><div class="notion-text notion-block-161887563979800383bef5c73388a2c3">Resonate 给出了一个使用模拟器发现 bug 的例子，包括 seed，用这个 seed 我们也能在本地复现出一样的结果：</div><ul class="notion-list notion-list-disc notion-block-161887563979803cbc3cfd96997ede33"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.resonatehq.io/dst-finds-a-bug">The One Where DST Finds a Real Bug | Resonate</a></li></ul><div class="notion-blank notion-block-161887563979808fb4edec4610e57a92"> </div><div class="notion-text notion-block-16188756397980e6b285ee945f2f0c88">总得来说，在 Rust 这样比较开放的语言上实现确定性模拟是比较简单且兼容程度较高的。其次是其他相对底层的语言，虽然大多数时候需要实现一套自己的机制导致代码不具备普适性，但至少它们不会偷偷做额外的事把一切变得更糟。最麻烦的是 Go 这样隐藏了很多细节且不可控的语言，各种层面上限制都太大</div><div class="notion-text notion-block-15d88756397980908652d2dfbb4a4a29">恰好最近 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://tip.golang.org/doc/go1.24">Go 1.24 发布</a>，新增了 <code class="notion-inline-code">synctest</code> 包，可以在测试代码中实现作用域内的模拟时钟：</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-go">import (
	&quot;testing&quot;
	&quot;testing/synctest&quot;
	&quot;time&quot;
)

func Test(t *testing.T) {
	synctest.Run(func() {
		before := time.Now()
		time.Sleep(time.Second)
		after := time.Now()
		if d := after.Sub(before); d != time.Second {
			t.Fatalf(&quot;took %v&quot;, d)
		}
	})
}</code></pre><div class="notion-text notion-block-15d88756397980f79fddf05be4805fe0">这也是确定性模拟中所需的一个重要机制，希望随着 Go 自身的进一步开发，未来能有更 native 的方式在 Go 上实现确定性模拟</div><div class="notion-blank notion-block-15d88756397980079f87d679d633bf95"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-14e88756397980c4aad5eb5f84c7cba2" data-id="14e88756397980c4aad5eb5f84c7cba2"><span><div id="14e88756397980c4aad5eb5f84c7cba2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14e88756397980c4aad5eb5f84c7cba2" title="Antithesis"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Antithesis</span></span></h4><div class="notion-text notion-block-15d88756397980a0808bf83287a80f92">模拟器都是单线程运行的，是因为我们默认无法干涉内核层面的调度，才有这样的限制。但真的不能吗？如果将模拟器实现在更底层的级别中呢？</div><div class="notion-blank notion-block-15d88756397980dea1b0d7d8abb937c5"> </div><div class="notion-text notion-block-14e88756397980fb9682c82cd0951eb8"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/">Antithesis</a> 是 FoundationDB 前成员（CEO 就是前面 FoundationDB 的演讲者）创立的一家公司，他们的平台能为任意系统提供确定性模拟：</div><blockquote class="notion-quote notion-block-163887563979803ea5ebf2e9b38810fd"><div>Antithesis is a <b>continuous reliability platform</b> that <b>autonomously searches</b> for problems in your software within a <b>simulated environment</b>. Every problem we find can be <b>perfectly reproduced</b>, allowing for <b>efficient debugging</b> of even the most complex problems.</div></blockquote><div class="notion-text notion-block-163887563979801d94dedbe880d5f14d">作为商业化解决方案，面对各种客户的不同系统。不可能要求客户对系统做大量修改和适配甚至重新设计，确定性模拟必须是透明的</div><div class="notion-text notion-block-16388756397980cf8567e086700c2500">因此，Antithesis 开发了一个<b>确定性模拟计算机</b>的 hypervisor。这很疯狂，但确实可行，只要整个虚拟机都是确定性的，那对被测试的软件就是完全透明的</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-163887563979805389c7c17c592b3b22"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9b66cf7a-d962-4958-83cf-d796d9aa08ad%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16388756-3979-8053-89c7-c17c592b3b22&amp;t=16388756-3979-8053-89c7-c17c592b3b22&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-163887563979809abae5c09f2e391b1c">脱离语言的另一个好处是，可以真正运行「整个系统」。例如 FoundationDB 没法在模拟器中使用 RocksDB，因为它有后台线程。RisingWave 也给 etcd 和 Kafka 编写了单独的模拟器。但在 Antithesis 中都不需要为这些依赖的库和组件操心</div><div class="notion-blank notion-block-163887563979804caa50e42428d6f3c7"> </div><div class="notion-text notion-block-1638875639798008b456f8adb7e890e0">实现一个确定性的 hypervisor，这会比想象中更难，因为 CPU 也不是所有的情况都能保证确定性，而它非常复杂</div><div class="notion-text notion-block-163887563979807b9031cc7e6f644eda">为了模拟时间流逝，Antithesis 根据执行指令数来推进模拟时钟。但 PMC 中记录的执行指令数并不总是正确，这会破坏确定性。只有对 CPU 的细节足够了解，才可能解决这些问题</div><div class="notion-text notion-block-16388756397980148744f072e25c7ed3">在并发上，虽然被测系统是多线程的，但还是必须让它们运行在一个物理核上。因为有时间加速，这并不会对被测系统的性能造成多大影响。反而从 Antithesis 的角度来说，可以不需要关注核间同步，在不同核上运行更多单独的虚拟机实例提高效率。并且由于工作在更底层的级别上，使得 Antithesis 还能构造像线程饥饿这样的问题</div><figure class="notion-asset-wrapper notion-asset-wrapper-video notion-block-1638875639798063825de1b4d5c5f37b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;padding-bottom:56.25%"><link rel="preload" as="image" href="https://i.ytimg.com/vi/0E6GBg13P60/hqdefault.jpg" imageSrcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/default.webp 120w, https://i.ytimg.com/vi_webp/0E6GBg13P60/mqdefault.webp 320w, https://i.ytimg.com/vi_webp/0E6GBg13P60/hqdefault.webp 480w, https://i.ytimg.com/vi_webp/0E6GBg13P60/sddefault.webp 640w, https://i.ytimg.com/vi_webp/0E6GBg13P60/maxresdefault.webp 1280w" imageSizes="(max-width: 120px) 120px, (max-width: 320px) 320px, (max-width: 480px) 480px, (max-width: 640px) 640px, (max-width: 1280px) 1280px"/><div class="notion-yt-lite notion-asset-object-fit" style="object-fit:contain"><picture><source srcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/default.webp 120w" media="(max-width: 120px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/mqdefault.webp 320w" media="(max-width: 320px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/hqdefault.webp 480w" media="(max-width: 480px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/sddefault.webp 640w" media="(max-width: 640px)" type="image/webp"/><source srcSet="https://i.ytimg.com/vi_webp/0E6GBg13P60/maxresdefault.webp 1280w" media="(max-width: 1280px)" type="image/webp"/><img src="https://i.ytimg.com/vi/0E6GBg13P60/hqdefault.jpg" class="notion-yt-thumbnail" alt="Video preview"/></picture><div class="notion-yt-playbtn"></div></div></div></figure><div class="notion-blank notion-block-16388756397980a4ac7dc5e418719cd2"> </div><div class="notion-text notion-block-16388756397980588bdbefd7ab2f8664">Antithesis 还实现了一些很奇妙的技术，例如能智能判断系统执行历史、探索分支路径和状态空间，并且能保存状态。这意味着 Antithesis 的测试是完全自主的，你不需要编写任何测试用例，系统会自动生成用例挖掘可能的分支，进行比人工更可靠的测试，类似于一种更加智能的 fuzzing</div><div class="notion-text notion-block-16388756397980f0ad36df677f835799">Antithesis 可以提供每个 checkpoint 的快照，并且和走向其他分支的执行历史进行对比，他们称为 Multiverse（多重宇宙），你能在这些不同宇宙中进行「时间旅行」式的调试。随时回退到过去和继续走向未来看看发生了什么，甚至可以在时间旅行中执行命令或者使用调试器调试进程，捕获网络数据包，跑火焰图… 当你改变了过去之后，一个新的宇宙就会诞生</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-16388756397980a78de2ea3d83691037"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F39ec0609-297d-47f6-85d4-65c2c1b801c6%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=16388756-3979-80a7-8de2-ea3d83691037&amp;t=16388756-3979-80a7-8de2-ea3d83691037&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-163887563979805695cbeb7189b9ce22">这一切都非常黑魔法，更多内容可以浏览他们的 Blog，都很有趣。也许 Antithesis 真的能定义未来的测试方法</div><ul class="notion-list notion-list-disc notion-block-16388756397980e9b7cef692887db5b2"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/">https://antithesis.com/blog/</a></li></ul><div class="notion-blank notion-block-16388756397980599633cef458af8d42"> </div><div class="notion-text notion-block-16388756397980e58895edd9a05561fe">Antithesis 的定价不便宜，但在客户侧都有不错的评价，包括一些知名基础设施系统：</div><ul class="notion-list notion-list-disc notion-block-1638875639798082908dcc6fca43ce89"><li>MongoDB 使用 Antithesis 测试存储引擎，核心服务器，同步和升降级功能。发现了一个严重的数据丢失问题：</li><ul class="notion-list notion-list-disc notion-block-1638875639798082908dcc6fca43ce89"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/case_studies/mongodb_productivity/">Accelerating developers at MongoDB</a></li><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/mongo_bug/">Working with Antithesis at MongoDB</a></li></ul></ul><ul class="notion-list notion-list-disc notion-block-1638875639798005a055cf615d7f8ccc"><li>Ethereum 在从 PoW（工作量证明）转向 PoS（权益证明）时使用 Antithesis 进行测试</li><ul class="notion-list notion-list-disc notion-block-1638875639798005a055cf615d7f8ccc"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/case_studies/ethereum_merge/">Testing the Ethereum merge</a></li></ul></ul><ul class="notion-list notion-list-disc notion-block-16388756397980649d05deca6e7e1b99"><li>WarpStream 端到端测试了整个 SaaS 系统，而不是局限在单个组件或进程</li><ul class="notion-list notion-list-disc notion-block-16388756397980649d05deca6e7e1b99"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.warpstream.com/blog/deterministic-simulation-testing-for-our-entire-saas">Deterministic Simulation Testing for Our Entire SaaS</a></li></ul></ul><ul class="notion-list notion-list-disc notion-block-1638875639798075924ef320ea24f1cd"><li>CockroachDB 在 Antithesis 上重现并定位了之前被搁置数年的事务并行提交 bug</li><ul class="notion-list notion-list-disc notion-block-1638875639798075924ef320ea24f1cd"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.cockroachlabs.com/blog/demonic-nondeterminism/">Antithesis of a One-in-a-Million Bug: Taming Demonic Nondeterminism</a></li></ul></ul><div class="notion-blank notion-block-16388756397980dfacd6cea786fdffde"> </div><div class="notion-text notion-block-163887563979801b956fe58a6ba86c1f">除了 Antithesis 之外，还有一些项目也试图在更底层的级别上进行确定性探索。例如 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rr-project.org/">rr</a> 和 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/dettrace/dettrace">dettrace</a> 都是通过 ptrace 替换系统调用的想法来实现的确定性调试器，它们都诞生得更早一些。Facebook 也曾发起过 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/facebookexperimental/hermit">hermit</a> 项目，虽然现在已经没有在积极开发</div><ul class="notion-list notion-list-disc notion-block-16388756397980e98f23f65876ae038e"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://developers.facebook.com/blog/post/2022/11/22/hermit-deterministic-linux-testing/">Hermit: Deterministic Linux for Controlled Testing and Software Bug-finding</a></li></ul><div class="notion-blank notion-block-1638875639798020839cdf1d8094357a"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980c99fadf4cedf846fff" data-id="14688756397980c99fadf4cedf846fff"><span><div id="14688756397980c99fadf4cedf846fff" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980c99fadf4cedf846fff" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h3><div class="notion-text notion-block-163887563979803cae1dfcb8a529ede5">确定性模拟器提供了一个非常美好的、仿佛触手可及的设想。这里调试不再困难，系统更加可靠</div><div class="notion-text notion-block-163887563979802a8b7ac2f4a55c21af">但软件工程没有银弹，确定性模拟器仍然有很多问题。既然是模拟，前提是我们了解被模拟物的所有行为，但这是不可能的。所有模拟疏漏或失真的细节，最终也会在真实系统中遇见，例如错误理解的网络协议，意想不到的 system call 行为，依赖外部系统本身的 bug。都可能让系统再次在真实环境中故障</div><div class="notion-text notion-block-163887563979806d91c9efb99ad9e058">更重要的是不确定性的消除十分困难，模拟器本身来说，很难 cover 各种场景，而任何一点遗漏，都会把不确定性引入系统，最终走向混沌</div><div class="notion-text notion-block-163887563979803f9fb7fc047484627d">另一种情况是被测程序的修改会破坏可复现性，被测程序本身就是模拟器输入的一部分，如果修改被测程序，虽然不会破坏「确定性」，但可能会无法复现期望的问题。例如在程序启动时新运行一个线程，那模拟器的调度序列可能会因为这个新的输入而改变，它仍然是确定性的（相同的输入有相同的输出），只是没能再触发之前的问题。这实际上某种程度违背了模拟器提供的承诺，确定性和可复现性并不总是能完全划等号</div><div class="notion-blank notion-block-1638875639798091a0c7ee77e82faea7"> </div><div class="notion-text notion-block-1638875639798029a4f9fc0740cc225c">从工程角度来说，语言上实现的模拟器大多会有比较强的侵入性，会限制并发模型和依赖库。除了新项目以外难以引入。而 Antithesis 方案技术壁垒过高，大部分人没有能力实现，如果没有开源方案共建，无法广泛普及</div><div class="notion-text notion-block-16388756397980998d95ecc8652b5f48">不过这也只是模拟器实现中的困难，从方向上来说，高度的可复现性和极高的测试效率就足以成为任何追求可靠性的系统尝试和探索它的理由。我始终相信这项技术的巨大潜力，一定会是未来的方向</div><div class="notion-blank notion-block-14e887563979805ba907fa44a69fac3a"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1468875639798077b407cce692980528" data-id="1468875639798077b407cce692980528"><span><div id="1468875639798077b407cce692980528" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1468875639798077b407cce692980528" title="Ref"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Ref</span></span></h3><ol start="1" class="notion-list notion-list-numbered notion-block-15688756397980968511d07ea0d1afcc"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://notes.eatonphil.com/2024-08-20-deterministic-simulation-testing.html">What&#x27;s the big deal about Deterministic Simulation Testing?</a></li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-15688756397980598c19c0a9041b4b4c"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://sled.rs/simulation.html">sled simulation guide (jepsen-proof engineering)</a></li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-156887563979804684f9cf4e00d9d30e"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://risingwave.com/blog/deterministic-simulation-a-new-era-of-distributed-system-testing/">Deterministic Simulation: A New Era of Distributed System Testing (Part 1 of 2)</a></li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-15688756397980dd9064edbc50276b74"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://risingwave.com/blog/applying-deterministic-simulation-the-risingwave-story-part-2-of-2/">Applying Deterministic Simulation: The RisingWave Story (Part 2 of 2)</a></li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-156887563979809e9cedf30e2b8c2e96"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://juejin.cn/post/7262172937511518267">确定性模拟的背景、原理、框架及应用实例 - RisingWave中文开源社区</a></li></ol><ol start="6" class="notion-list notion-list-numbered notion-block-156887563979806d9f04e544ed180e3f"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://dropbox.tech/infrastructure/-testing-our-new-sync-engine">Testing sync at Dropbox</a></li></ol><ol start="7" class="notion-list notion-list-numbered notion-block-15688756397980259abfc8bcb20bbf99"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://tigerbeetle.com/blog/2023-07-11-we-put-a-distributed-database-in-the-browser">We Put a Distributed Database In the Browser – And Made a Game of It!</a></li></ol><ol start="8" class="notion-list notion-list-numbered notion-block-15d88756397980a3b167fae2fec0b471"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue">A Programmer-Friendly I/O Abstraction Over io_uring and kqueue</a></li></ol><ol start="9" class="notion-list notion-list-numbered notion-block-1568875639798008a838c85d3fc72086"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.polarsignals.com/blog/posts/2024/05/28/mostly-dst-in-go">(Mostly) Deterministic Simulation Testing in Go</a></li></ol><ol start="10" class="notion-list notion-list-numbered notion-block-15d88756397980e4951ae577fb68c399"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.resonatehq.io/deterministic-simulation-testing">Deterministic Simulation Testing | Resonate</a></li></ol><ol start="11" class="notion-list notion-list-numbered notion-block-16388756397980fdbfe5f1f23adbe2ca"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/is_something_bugging_you/">Is something bugging you? | Antithesis</a></li></ol><ol start="12" class="notion-list notion-list-numbered notion-block-163887563979801bb93df42333e51cd6"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/deterministic_hypervisor/">So you think you want to write a deterministic hypervisor? | Antithesis</a></li></ol><ol start="13" class="notion-list notion-list-numbered notion-block-16388756397980af886cfeae3d3b0b3f"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/autonomous_testing/">Your computer can test better than you (and that&#x27;s a good thing) | Antithesis</a></li></ol><ol start="14" class="notion-list notion-list-numbered notion-block-16388756397980c1ab6ce3d7358a2c71"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/multiverse_debugging/">Debugging in the Multiverse | Ahtithesis</a></li></ol><ol start="15" class="notion-list notion-list-numbered notion-block-16388756397980c4aba8f98e557c4e0a"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/case_studies/mongodb_productivity/">Accelerating developers at MongoDB</a></li></ol><ol start="16" class="notion-list notion-list-numbered notion-block-16388756397980109419d128087b2edb"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://antithesis.com/blog/mongo_bug/">Working with Antithesis at MongoDB</a></li></ol><ol start="17" class="notion-list notion-list-numbered notion-block-16388756397980c787d1e337495c67ed"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.warpstream.com/blog/deterministic-simulation-testing-for-our-entire-saas">Deterministic Simulation Testing for Our Entire SaaS</a></li></ol><ol start="18" class="notion-list notion-list-numbered notion-block-1638875639798036a0e7ec748a7e218b"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.cockroachlabs.com/blog/demonic-nondeterminism/">Antithesis of a One-in-a-Million Bug: Taming Demonic Nondeterminism</a></li></ol><ol start="19" class="notion-list notion-list-numbered notion-block-16388756397980f0a915df7c499fa1a2"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://developers.facebook.com/blog/post/2022/11/22/hermit-deterministic-linux-testing/">Hermit: Deterministic Linux for Controlled Testing and Software Bug-finding</a></li></ol><div class="notion-blank notion-block-14688756397980038b36dabb553fa829"> </div><div class="notion-blank notion-block-14688756397980b198b5ddab736aeb80"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈协程]]></title>
        <id>https://xxxuuu.me/post/coroutine</id>
        <link href="https://xxxuuu.me/post/coroutine"/>
        <updated>2024-11-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最近经常被各种人问到一些关于协程的事情，例如 xx 语言的 xx 是不是协程，xx 语言和 xx 语言的协程有什么区别，我不得不一次次 share 出我的文章，索性直接发到 blog 上吧]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-146887563979806caf3cf23f4c85d88e"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-text notion-block-146887563979807ab4fcd59ffda28582">最近经常被各种人问到一些关于协程的事情，例如 xx 语言的 xx 是不是协程，xx 语言和 xx 语言的协程有什么区别，我不得不一次次 share 出我的文章，索性直接发到 blog 上吧</div><div class="notion-blank notion-block-146887563979801fb7c3d62a97a4a26a"> </div><div class="notion-text notion-block-146887563979804a9ba2d8e79a9f896c">首先，协程是什么？一开始应该抛开一切具体语言的实现去理解协程，给出一个明确定义，但协程的定义实在太多，并且扩展出了各种不同形态，这里我们简单定义<b>协程就是一个「可以暂停和恢复的函数」</b></div><div class="notion-blank notion-block-14688756397980c4a8f0f61f3800faf6"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980fea80afcd165f32bc7" data-id="14688756397980fea80afcd165f32bc7"><span><div id="14688756397980fea80afcd165f32bc7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980fea80afcd165f32bc7" title="达夫设备"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">达夫设备</span></span></h3><div class="notion-text notion-block-1468875639798047951ee800d02438dc">了解了协程的定义，就是实现问题了</div><div class="notion-text notion-block-14688756397980b5bf64c8eccabec849">来看一个 fib 协程</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-cpp">generator&lt;int&gt; fib() {
    int a = 1, b = 1;
    yield a;
    yield b;
    while(true) {
        int c = a + b;
        yield c;
        a = b;
        b = c;
    }
}</code></pre><div class="notion-text notion-block-146887563979808a9ce5c10168ff51fd">对 fib 进行调用，会返回斐波那契数列 1，1，2，3，5，8… </div><div class="notion-text notion-block-14688756397980daa519d7f366691b5f">在 <code class="notion-inline-code">yield</code> 时，协程被暂停，再次调用，协程被恢复</div><div class="notion-blank notion-block-146887563979805eb266ee0ab49f5057"> </div><div class="notion-text notion-block-1468875639798045a913c7894ec76e41">现在我们要实现类似的效果，核心无非两点，如何暂停和如何恢复</div><div class="notion-text notion-block-146887563979807ea8d5e54dfb0fe98b">一种简单的协程实现是达夫设备，它是一个状态机，状态机上的状态对应每个 yield 的位置</div><div class="notion-text notion-block-14688756397980ddace1dffbd89acf46">首先通过 static 变量存储状态（也可以通过一个外部的协程结构体来在任意地方存储），接着，yield 时直接 return 返回控制权，调用时通过 switch + goto 跳转回之前的位置，也就是上次 yield 后的位置，这就恢复了状态：</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-cpp">int fib() {
    static int state = 0;
    static int a = 1;
    static int b = 1;
    static int c = 0;

    switch (state) {
        case 0:
            state = 1;
            goto s0;
        case 1:
            state = 2;
            goto s1;
        case 2:
            state = 3;
            goto s2;
        case 3:
            goto s3;
    }

s0:
    return a;
s1:
    return b;
s2:
    while(true) {
        c = a + b;
        return c;
        s3:
        a = b;
        b = c;
    }
}</code></pre><div class="notion-blank notion-block-1468875639798056bc1ff8f443ffb009"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-146887563979804da80dd28d12dd75c2" data-id="146887563979804da80dd28d12dd75c2"><span><div id="146887563979804da80dd28d12dd75c2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#146887563979804da80dd28d12dd75c2" title="扩展"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">扩展</span></span></h3><div class="notion-text notion-block-14688756397980e89fc7d8fb17484f7c">有了基本的协程后，就可以谈谈其它语言中的 generator、async / await、goroutine / virtual thread 等实现了</div><div class="notion-blank notion-block-14688756397980a097cdca331630f4f4"> </div><div class="notion-text notion-block-146887563979809e81d2c77541de17fc">对于 generator 和 async / await 模式，实际上和我们上面的实现是类似的，都是一个状态机。但它们通过编译器来生成了这堆繁琐的部分，作为语言的一个语法来提供，可以说是真正能用的协程。例如这样一段 Rust 的 generator 代码</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-rust">#![feature(generators, generator_trait)]
use std::ops::Generator;

use std::pin::Pin;

fn main() {
    let mut gen = ||{
        yield 1;
        yield 2;
        yield 3;
        return 4;
    };

    let mut pin = Pin::new(&amp;mut gen);
    for _ in 0..4 {
        println!(&quot;{:?}&quot;, pin.as_mut().resume(()));
        // Yielded(1)
        // Yielded(2)
        // Yielded(3)
        // Complete(4)
    }
}</code></pre><div class="notion-text notion-block-146887563979802a8710ec1ae9775392">编译器会生成类似这样的实现，和我们前面的达夫设备基本基本没区别：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979801b8e1ecf72d1848856"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F3a9e11cf-1dd2-4987-b330-8e9d67ea3555%2FUntitled.png?table=block&amp;id=14688756-3979-801b-8e1e-cf72d1848856&amp;t=14688756-3979-801b-8e1e-cf72d1848856&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-14688756397980168485fd784b6b13c9"> </div><div class="notion-blank notion-block-14688756397980c0b015cb541aa4362a"> </div><div class="notion-text notion-block-146887563979802d991bd3b9e56d1925">剩下的一些，就基本属于是对协程的「扩展」了</div><div class="notion-text notion-block-146887563979808a844fd74ae87600dc">首先就是所谓的调度器，前面 generator 的模式是没有调度的，或者说，是用户手动控制调度，自己决定何时运行哪个协程，而且这里调度一个协程，就是执行它这个函数。</div><div class="notion-text notion-block-14688756397980bdb5d1f0014db863a9">而 async / await 模式就会有调度器，例如一个函数在 await 另一个 async 函数，此时如果该函数并没有执行完成，await 这里就需要等待，控制流会被切换出去（类似 generator 模式的 yield），调度器会进行调度</div><div class="notion-text notion-block-1468875639798095904fe1f70a447108">在设计更复杂的情况下，调度器的工作会多很多，例如如果不是采用 return 和直接 call 来转移所有权，那就可能需要通过直接跳转的方式（插入汇编或 <code class="notion-inline-code">setjmp</code>/<code class="notion-inline-code">longjmp</code> 等）来进行协程的所有权转移。以及可能有更复杂的调度策略决定运行哪一个协程</div><div class="notion-text notion-block-14688756397980879651f7edf931f776">南京大学操作系统课程的其中一个实验就是实现这个程度的协程</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980309993fdec25e9e04f" href="https://jyywiki.cn/OS/2024/labs/M2.md"><div><div class="notion-bookmark-title">M2: 协程库 (libco)</div><div class="notion-bookmark-description">我们在《操作系统》课程中学习了线程：只需要 create 和 join 两个 API，我们就能创建和管理线程。我们也知道，线程的创建和执行需要操作系统的帮助：程序就是状态机，如果执行死循环，这个状态机就 “卡死” 了。那么，我们能在一个状态机内，实现多个状态机 (类似线程切换) 的效果吗？</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fjyywiki.cn%2Ffavicon.ico?table=block&amp;id=14688756-3979-8030-9993-fdec25e9e04f&amp;t=14688756-3979-8030-9993-fdec25e9e04f" alt="M2: 协程库 (libco)" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://jyywiki.cn/OS/2024/labs/M2.md</div></div></div></a></div><div class="notion-blank notion-block-14688756397980dc9f6cf60f88eb3735"> </div><div class="notion-text notion-block-14688756397980a094a4eb51263679a8">接着是一些协程设计上的问题。前面我们转移所有权的时候，yield 是定向地转移回所有权到 caller 上，因此可以用 return 实现。但更多场景是 yield 时协程 A 希望暂停自己的同时定向恢复协程 B 的运行，但又不希望 A 直接 call B（如果 B 也 call A，就会造成无限递归）。</div><div class="notion-text notion-block-146887563979802eb4a8f44b9d6b0166">一种实现是基于调度器的，称为非对称协程，A 返回到调度器，要求调度器 call B。这会带来一些性能损失，且不太能保证实时性</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979800d8df6f3fb9ba47926"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0f71dddd-810b-4881-81bf-75296977bd15%2FUntitled.png?table=block&amp;id=14688756-3979-800d-8df6-f3fb9ba47926&amp;t=14688756-3979-800d-8df6-f3fb9ba47926&amp;width=864&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-1468875639798016bf4aed5e27939ad8">另一类是对称协程，需要一些特殊的指令，让 A 能够直接切换到 B，且 B 返回后直接回到了调度器，这个过程对调度器是不知情的，这种设计架空了调度器，实现上更加复杂，但性能更好更加灵活</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979809aaf5fee8cc4612737"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff34759e5-39ea-43d1-a126-b96a589bb37b%2FUntitled.png?table=block&amp;id=14688756-3979-809a-af5f-ee8cc4612737&amp;t=14688756-3979-809a-af5f-ee8cc4612737&amp;width=768&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-14688756397980aaa95ce9d65dbc3da3"> </div><div class="notion-text notion-block-14688756397980909e2adedf33714a35">设计上另外一个重要的区别是协程的栈帧，也就是有栈协程和无栈协程。前面实现的协程是无栈协程，它们两个的区别从概念上讲，只有是否保存完整栈帧。</div><div class="notion-text notion-block-146887563979809184b3d137c6787666">从实现角度来看，无栈线程的「状态」只有局部变量，转移所有权的位置等，对于该协程来说都是固定的，所以每个无栈协程的帧通常是一个定制的结构体（当然编译器帮你实现了），这个结构体就直接代表了整个无栈协程的所有状态，例如前面 <code class="notion-inline-code">fib</code> 的例子，它的这个结构体可能就是这样的</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-cpp">struct fib_state {
    int a;
    int b;
    int c;
    int state;
}</code></pre><div class="notion-text notion-block-146887563979807a9fb3db5d99c28acc">而有栈协程对于帧的保存，无论是哪个协程，都是直接申请一大块内存，将其作为函数的调用栈来使用，一切状态都保存在内部。从这个角度来讲，有栈协程更接近普通函数</div><pre class="notion-code"><div class="notion-code-copy"><div class="notion-code-copy-button"><svg fill="currentColor" viewBox="0 0 16 16" width="1em" version="1.1"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg></div></div><code class="language-cpp">struct co {
    byte stack[STACK_SIZE];
}</code></pre><div class="notion-blank notion-block-14688756397980019207d993f33a6180"> </div><div class="notion-text notion-block-146887563979804f9eb6fc0203cbae7c">在使用上的一个重要区别是，有栈协程可以在任意处挂起，包括嵌套函数。而无栈协程不可以，因为它的帧结构只保存了它自己特定的那几个的状态，所以无法恢复到嵌套函数内部。这使得有栈协程在使用上和普通函数几乎没有区别，就像线程一样</div><div class="notion-text notion-block-14688756397980a5b3ade71278ef6f81">实现上的差异这也体现出无栈协程更加紧凑，开销更小，因为它只保存了必要的状态。而有栈协程需要保存的状态更多，而且通常是有些浪费的（当然也可以让这个栈更小，但要考虑动态扩展的问题）</div><div class="notion-blank notion-block-1468875639798002b593cc3ba6311252"> </div><div class="notion-text notion-block-1468875639798080a7e3eda84e03c576">现在对于各种语言的协程实现就很清晰了，generator 和 async / await 就是编译器层面上实现的无栈协程，以语法糖的方式来提供。而 goroutine / virtual thread 等更类似线程，这是因为他们是有栈协程，还实现了抢占式的调度器来控制协程的执行，当然这里对于这种抢占式设计是不是协程也有不少争议，因为看起来他们从根本上就违背了协程的「协作式」这一想法</div><div class="notion-blank notion-block-1468875639798086a59ed4cbacfddf31"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-146887563979808a96f4f7a7e87a9fa8" data-id="146887563979808a96f4f7a7e87a9fa8"><span><div id="146887563979808a96f4f7a7e87a9fa8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#146887563979808a96f4f7a7e87a9fa8" title="性能"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能</span></span></h3><div class="notion-text notion-block-14688756397980559c07da37d09532e8">对于无栈协程，性能上的优势是明显的，首先它保存的状态是非常轻量的，只保存了必须的状态。其次，无栈协程的场景通常是「协作式」的，也就是 A 运行一会，然后轮到 B 运行</div><div class="notion-text notion-block-14688756397980529850eb68e59102ba">如果通过线程来做这样的操作，大部分时间是浪费在无意义的上下文切换和互斥开销当中了，而无栈协程主动切换控制权，使其每次切换都是有意义的</div><div class="notion-blank notion-block-146887563979805e996bf4ced1b70697"> </div><div class="notion-text notion-block-14688756397980db9ed1c3e5606dbf65">而对于带抢占式调度器的有栈协程，和线程那么像，或者说它就是一种用户线程，那究竟开销少在哪里？</div><div class="notion-text notion-block-14688756397980e1a78fc90acfe08dff">首先，进程和线程的调度需要到内核态做上下文切换，会有以下开销：</div><ol start="1" class="notion-list notion-list-numbered notion-block-146887563979802db836ec121eac02ad"><li>切换页表全局目录</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-14688756397980f898eed2bd64e6d321"><li>切换内核态堆栈</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-1468875639798027a249cd547c752b7c"><li>切换硬件上下文（进程恢复前，必须装入寄存器的数据统称为硬件上下文）</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-14688756397980cf8f36c05ec9de20d7"><li>刷新TLB</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-1468875639798008b3e4f888cc6e4360"><li>内核调度器的执行</li></ol><div class="notion-text notion-block-14688756397980c5bb29c9576222424a">其中特别是跨 CPU 导致的 Cache 失效问题，会对性能有明显影响。CPU 之间也可以看作是一种分布式系统，在高性能场景中，跨 CPU 之间的交互就像跨节点的网络通信一样，相对于纯本地运算要慢得多，是要尽力避免的</div><div class="notion-blank notion-block-146887563979805b9255f9149fc739af"> </div><div class="notion-text notion-block-14688756397980158a90fe22b70056f9">协程调度也需要进行上下文切换，开销主要少在几个方面：</div><ol start="1" class="notion-list notion-list-numbered notion-block-14688756397980008f6be5f2c194d0a6"><li>协程栈通常只有几 KB，比数 M 的线程栈要小得多（无栈协程连这部分也不需要，就只是一个普通的函数调用）</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-14688756397980459beac54afcbfbe94"><li>协程的上下文切换没有跨进程，也就不需要修改额外的内核数据结构（页表等），也不会造成 Cache 失效</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14688756397980669257fcc6f52ee1e0"><li>协程调度在用户态，而线程调度在内核态，每次调度都会有额外的上下文切换（到内核态）。协程避免了大量线程频繁的内核态上下文切换，能充分利用分给一个线程的时间片</li></ol><div class="notion-blank notion-block-14688756397980ccb6c2c00e0d7fa768"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1468875639798052a1f9d17c88d3d214" data-id="1468875639798052a1f9d17c88d3d214"><span><div id="1468875639798052a1f9d17c88d3d214" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1468875639798052a1f9d17c88d3d214" title="局限"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">局限</span></span></h3><div class="notion-text notion-block-146887563979807f8586e5faaef1e703">协程的轻量和用户态调度带来很高的性能，那么代价是什么？</div><div class="notion-text notion-block-1468875639798080ba04e791d5d22318">首先无栈协程的功能上有局限，例如无法在嵌套函数中挂起，使得它的编程模型还是和普通函数有些不同，也无法实现一些效果，像在大部分语言中 async / await 就会带来传染性</div><div class="notion-text notion-block-14688756397980f29c37f6e2c105bd82">其次对于有栈协程/用户线程，正是因为它运行在用户态，当涉及需要内核支援的部分时就很被动，例如面对阻塞式 I/O 时，无法察觉导致整个内核线程上的所有协程都被阻塞，或者需要一些比较高级的 CPU 亲和性调度时也难以实现</div><div class="notion-text notion-block-1468875639798079bd77f60092eb95af">以及如果当调度不是抢占式时，协程如果不让出执行权或者因为一些异常导致执行权没有正常让出，就会一直占用在那里，导致其他协程无法运行。当然 Go 都解决了上面这两个问题，但设计上更加复杂了</div><div class="notion-blank notion-block-146887563979800dbbc9f25b2ca75edd"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980d9bb4ecc6f1897872a" data-id="14688756397980d9bb4ecc6f1897872a"><span><div id="14688756397980d9bb4ecc6f1897872a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980d9bb4ecc6f1897872a" title="Ref"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Ref</span></span></h3><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-1468875639798009be36f0d02b2506cf" href="https://mthli.xyz/coroutines-in-c/"><div><div class="notion-bookmark-title">使用 C 语言实现协程</div><div class="notion-bookmark-description">本文译自 PuTTY 的作者 Simon Tatham 的文章 Coroutines in C，作者在文中介绍了一种基于 达夫设备 的思想实现的协程。注意， 斜体部分为翻译过程中的补充 。考虑到译者的英文水平有限，部分语句的翻译与原文略有出入，强烈建议读者结合原文观看。 编写大型程序总是一件困难的事。其中常见的一个问题就是：如果你有一段代码正在生产数据，同时有另一段代码正在消费这些数据，它俩之间谁应该是 caller（调用者）谁应该是 callee（被调用者）呢 （译者注，即如何维护它俩之间的调用关系） ？ 这里有一段非常简单的 decompressor 代码，以及一段非常简单的 parser 代码： 两段代码都非常简单易懂。前者通过调用 emit() 每次产生一个字符；后者通过调用 getchar() 每次消费一个字符。只需要调用 emit() 和 getchar() 就可以传送数据了，所以 decompressor 产生的数据可以很轻易地传送到 parser 中。 在很多现代操作系统中，你可以在两个进程或线程之间使用管道（pipe）传输数据。在 decompressor 的 emit() 向管道中写数据，在 parser 的 getchar() 从同一个管道中读数据。简单粗暴，同时也非常繁琐和浪费性能。尤其是在你不想因为要做类似的事就得把程序拆分为多线程时。 在本篇文章中，我为这类结构性问题提供一种极具创造性的解决方案。 一种常见的解决方案是重写通信渠道两端中的一端，使之成为一个可以被调用的函数。以下分别是 decompressor 和 parser</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fmthli.xyz%2Ffavicon-32x32.png%3Fv%3Df165042f9f334601a4ff4a1f1b0b0de2?table=block&amp;id=14688756-3979-8009-be36-f0d02b2506cf&amp;t=14688756-3979-8009-be36-f0d02b2506cf" alt="使用 C 语言实现协程" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://mthli.xyz/coroutines-in-c/</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fmthli.xyz%2Fstatic%2Ff165042f9f334601a4ff4a1f1b0b0de2%2F99438%2Fprofile-pic.jpg?table=block&amp;id=14688756-3979-8009-be36-f0d02b2506cf&amp;t=14688756-3979-8009-be36-f0d02b2506cf" alt="使用 C 语言实现协程" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980388653c50b4c10dc7d" href="https://www.bilibili.com/video/BV1dv4y127YT/"><div><div class="notion-bookmark-title">【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili</div><div class="notion-bookmark-description">理解协程的最好方式就是实现它！最近面试开始流行问协程了，请同学们注意进厂时机？？？, 视频播放量 21613、弹幕量 46、点赞数 802、投硬币枚数 623、收藏人数 1338、转发人数 103, 视频作者 等疾风, 作者简介 C++职业拧螺丝；博客 Codesire-deng.github.io，相关视频：通过画图说一下协程的三种实现方式，我一直以为研究生一觉睡到中午自然醒是一件很小众的事情，大形势正在回暖，未来3-5年普通程序员能赶上的IT红利风口有哪些？卷对方向才能逆天改命！【马士兵】，从零开始刷力扣学C++——第二题：两数相加，MFC感觉已经被QT淘汰差不多了，但还是有很多企业在用，一些招聘要求还是提到MFC，怎么看这件事。，接下来登场的是有着职业生涯幻想大赛、评委拷问大赛、大学生卷王吹牛大赛、ppt模板美化大赛的全国大学生职业生涯规划大赛，从零开始的操作系统(21)  实现简单的任务/协程调度器，不知道做什么项目自我提高， 来试试LLVM教程的编译器项目，Bjarne Stroustrup ：程序员需要学习的5种类型编程语言，研二/大三吃透C++大厂面试真题300问，7天学完，让你面试少走99%弯路！【存下吧，附精心整理的面试宝典，学完即可面试上岗】</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F4ded1ab2f83a0dbafb10a9824850716e7ebdc504.jpg%40100w_100h_1c.png%4057w_57h_1c.png?table=block&amp;id=14688756-3979-8038-8653-c50b4c10dc7d&amp;t=14688756-3979-8038-8653-c50b4c10dc7d" alt="【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.bilibili.com/video/BV1dv4y127YT/</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F4ded1ab2f83a0dbafb10a9824850716e7ebdc504.jpg%40100w_100h_1c.png?table=block&amp;id=14688756-3979-8038-8653-c50b4c10dc7d&amp;t=14688756-3979-8038-8653-c50b4c10dc7d" alt="【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980579f29cec2e5e65e3f" href="https://zhuanlan.zhihu.com/p/330606651"><div><div class="notion-bookmark-title">有栈协程与无栈协程</div><div class="notion-bookmark-description">如今协程已经成为大多数语言的标配，例如 Golang 里的 goroutine，JavaScript 里的 async/await。尽管名称可能不同，但它们都可以被划分为两大类，一类是有栈（stackful）协程，例如 goroutine；一类是无栈（stackless）协程，例如 async/await。 此处「有栈」和「无栈」的含义不是指协程在运行时是否需要栈，对于大多数语言来说，一个函数调用另一个函数，总是存在调用栈的；而是指协程是否可以在其 任意 嵌套函数中被挂起，此处的嵌套函数读者可以理解为子函数、匿名函数等。显然有栈协程是可以的，而无栈协程则不可以。似乎难以理解？不要慌，让我们先从函数调用栈开始讲起。 注意，文中所有讨论均基于 x86 平台，在 x86 平台中，调用栈的地址增长方向是从高位向低位增长的。并且本文选取 32 位系统作为讨论对象，因为 16 位已经过时了；而 64 位又稍显复杂，所占篇幅较大，但读者可以轻易地将本文内容推演至 64 位。 首先我们需要明确的是，调用栈是一段连续的地址空间，无论是 caller（调用方）还是 callee（被调用方）都位于这段空间之内。而调用栈中一个函数所占用的地址空间我们称之为「栈帧」（stack frame），调用栈便是由若干个栈帧拼接而成的。一个典型的调用栈模型如下图所示，图片来自 维基百科 ： 图中涉及到几个关键点，Stack Pointer 即栈顶指针，总是指向调用栈的顶部地址，该地址由 esp 寄存器存储；Frame Pointer 即基址指针，总是指向当前栈帧（当前正在运行的子函数）的底部地址，该地址由 ebp 寄存器存储。Return Address 则在是 callee 返回后，caller 将继续执行的指令所在的地址；而指令地址是由 eip 寄存器负责读取的，且 eip 寄存器总是预先读取了 当前栈帧中 下一条将要执行的指令的地址。</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-8057-9f29-cec2e5e65e3f&amp;t=14688756-3979-8057-9f29-cec2e5e65e3f" alt="有栈协程与无栈协程" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://zhuanlan.zhihu.com/p/330606651</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpic4.zhimg.com%2Fv2-ec808978c0bf85a74c055564b072097b_b.jpg?table=block&amp;id=14688756-3979-8057-9f29-cec2e5e65e3f&amp;t=14688756-3979-8057-9f29-cec2e5e65e3f" alt="有栈协程与无栈协程" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-146887563979806a9d97ee6af88af9cc" href="https://www.zhihu.com/question/50185085/answer/1342613525"><div><div class="notion-bookmark-title">出于什么样的原因，诞生了「协程」这一概念？</div><div class="notion-bookmark-description">其实从处理器的角度看协程更符合直觉，一个处理器核心本来就没法同时处理两件事情，要同时进行多件事情本来就需要正在运行的让出处理器，然后才能去处理另一件事情。只不过这个让出的过程是线程调度器主动抢占的。 所以线程调度器是假定不同的线程是毫无关系的，所以它平均的分配时间片让处理器雨露均沾。 ...</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-806a-9d97-ee6af88af9cc&amp;t=14688756-3979-806a-9d97-ee6af88af9cc" alt="出于什么样的原因，诞生了「协程」这一概念？" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.zhihu.com/question/50185085/answer/1342613525</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpicx.zhimg.com%2F23a5bca736788ab73e3bd58e56761cda_l.jpg%3Fsource%3D1940ef5c?table=block&amp;id=14688756-3979-806a-9d97-ee6af88af9cc&amp;t=14688756-3979-806a-9d97-ee6af88af9cc" alt="出于什么样的原因，诞生了「协程」这一概念？" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-146887563979809cadd4c292aedb0d04" href="https://zhuanlan.zhihu.com/p/80037638"><div><div class="notion-bookmark-title">协程究竟比线程能省多少开销？</div><div class="notion-bookmark-description">前文《进程/线程上下文切换会用掉你多少CPU？》 中中我们用实验的方式验证了Linux进程和线程的上下文切换开销，大约是3-5us之间。这个开销确实不算大，但是海量互联网服务端和一般的计算机程序相比，特点是： 高并发：每秒钟需要处理成千上万的用户请求 周期短：每个用户处理耗时越短越好，经常是ms级别的 高网络IO：经常需要从其它机器上进行网络IO、如Redis、Mysql等等 ...</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-809c-add4-c292aedb0d04&amp;t=14688756-3979-809c-add4-c292aedb0d04" alt="协程究竟比线程能省多少开销？" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://zhuanlan.zhihu.com/p/80037638</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpic1.zhimg.com%2Fv2-dd5f446902a1118de55549d824c0bd01_xs.jpg%3Fsource%3D172ae18b?table=block&amp;id=14688756-3979-809c-add4-c292aedb0d04&amp;t=14688756-3979-809c-add4-c292aedb0d04" alt="协程究竟比线程能省多少开销？" loading="lazy" decoding="async"/></div></a></div><div class="notion-blank notion-block-14688756397980de93f3c8da4704bb58"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MemoryDB: Redis + Remote Log]]></title>
        <id>https://xxxuuu.me/post/memorydb</id>
        <link href="https://xxxuuu.me/post/memorydb"/>
        <updated>2024-11-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MemoryDB 是 Amazon 的一个 Redis 兼容的 KV 数据库，论文发表在 SIGMOD 2024 上]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-1298875639798065aeb4e6ec1258ed90"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-text notion-block-12d887563979807f80b6ef4c5f01124a">MemoryDB 是 Amazon 的一个 Redis 兼容的 KV 数据库，论文发表在 SIGMOD 2024 上</div><div class="notion-text notion-block-12d887563979805bbe4aed2e13640a3d">由于 Redis 是内存数据库，持久性保证比较弱，因此在使用 Redis 作为主存储的低延迟需求场景，大部分人会构建一套复杂的架构来同步或备份 Redis 的数据，Redis 自己也提供了复制和集群的功能，然而这其中的容错处理无法真正保证一致性和持久性。MemoryDB 诞生就是为了解决这个问题，提供一个<b>能保证持久性的高可用强一致 Redis，并且仍然保持内存级性能</b></div><div class="notion-blank notion-block-12d88756397980afaa3ee067b98d492b"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979805289dcffc7b2eed4db" data-id="12d887563979805289dcffc7b2eed4db"><span><div id="12d887563979805289dcffc7b2eed4db" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979805289dcffc7b2eed4db" title="架构"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">架构</span></span></h2><div class="notion-text notion-block-12d8875639798036bb8ec54f1e0ba673">首先回顾下 Redis 自身的持久化和一致性挑战：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12d887563979802c892af5d160ed77cb"><li>Redis 通过副本提供高可用，但这个过程是异步的，当主节点故障，副节点被提升为主节点而复制未完成时，就会永久丢失数据</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12d8875639798013bec0d94c35c41e7c"><li>Redis 包含 RDB 和 AOF 两种持久化方法，分别是快照和事务日志，对于 AOF 可以配置成每次写入都执行 <code class="notion-inline-code">fsync()</code> 以牺牲可用性为代价提供持久化。但多节点场景 AOF 不能提供任何保证，主节点故障时同样没有办法确保选举出的副本具有最新数据，最坏情况下这个副本可能没有任何数据，导致数据完全丢失</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12d88756397980c08fd3e200492d6840"><li>Redis 提供了 <code class="notion-inline-code">WAIT</code> 命令，通过该命令，客户端能阻塞等待数据同步复制直到完成。但 <code class="notion-inline-code">WAIT</code> 只对当前连接有效，不是全局的。对于其他客户端来说仍然无法保证观察到的数据一致性。同样，故障时也没法做任何保证</li></ol><div class="notion-text notion-block-12d887563979801e8237ef32b93a3dbe">简单来说，<b>Redis 故障转移会导致数据丢失</b></div><div class="notion-blank notion-block-139887563979809cbaaae56d8b38fc46"> </div><div class="notion-text notion-block-12d887563979807aad94f901673f65b7">MemoryDB 直接基于 Redis 构建，但并没有进行侵入性修改。这里通过加入一个分布式事务日志服务将两层实现解耦，Redis 只相当于这套架构底下的执行引擎</div><div class="notion-text notion-block-139887563979808cb3dfff263a312774">Redis 主节点自身的复制流会被拦截，重定向到事务日志中。在同步写入日志成功后对客户端返回，所有其他副本都只是重放日志</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12d8875639798038bd8afaad3d98bd5e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc20e8ae2-0be9-402e-a134-7c5ce4a0fa29%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=12d88756-3979-8038-bd8a-faad3d98bd5e&amp;t=12d88756-3979-8038-bd8a-faad3d98bd5e&amp;width=768&amp;cache=v2" alt="MemoryDB 架构（话说这图真糊啊" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">MemoryDB 架构（话说这图真糊啊</figcaption></div></figure><div class="notion-blank notion-block-14088756397980d5a2eaceb9d714ecf5"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-1408875639798061a496d8a366fbab7b" data-id="1408875639798061a496d8a366fbab7b"><span><div id="1408875639798061a496d8a366fbab7b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1408875639798061a496d8a366fbab7b" title="持久性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">持久性</span></span></h2><div class="notion-text notion-block-14088756397980fc8aefe3adbc85db49">事务日志服务是 Multi-AZ 的，能提供持久化的存储，对主节点的操作会同步写入到事务日志中，其他副本就像普通的 Redis 复制过程一样读取事务日志</div><div class="notion-text notion-block-1408875639798070b80dc1e6c078dbec">可以看出这里事务日志是系统的核心，提供了完美的保证，但论文没有具体说明它是如何构建的，应该又是 Amazon 内部的黑盒服务</div><div class="notion-text notion-block-140887563979809eb1aaebfed5766d88">部分分布式数据库允许使用 Kafka 作为 Remote WAL，所以如果要做一个 MemoryDB 的开源实现，Kafka 应该可以承担这个事务日志服务的角色，但还是会有很多额外工作量</div><div class="notion-blank notion-block-14088756397980f69592cc64e91d2ebd"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-14088756397980aaa31ee110a48c67ca" data-id="14088756397980aaa31ee110a48c67ca"><span><div id="14088756397980aaa31ee110a48c67ca" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14088756397980aaa31ee110a48c67ca" title="一致性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">一致性</span></span></h2><div class="notion-text notion-block-1408875639798043bfe9ecdf25d27f5d">MemoryDB 这里的日志是一种 WBL（Write-behind logging），选择 WBL 而不是 WAL 的原因是它天然和 Redis 的复制模型保持一致，例如 SPOP 之类的随机操作也能保证相同的结果</div><div class="notion-blank notion-block-1408875639798018bcbff0bc07649283"> </div><div class="notion-text notion-block-140887563979801abea6fd421d11b7d2">但这样会带来的问题是写入日志前故障会导致不一致，所以这里需要事务日志 ACK 了才能向客户端返回。MemoryDB 通过添加一层 client blocking 层作为 tracker 实现这一点，考虑到 MemoryDB 避免修改 Redis 的前提下，我猜应该类似这样的实现</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979804abb79e2f6312ba5b5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:288px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fbfc3d68f-ea82-430d-99cb-248f2d66a4bc%2F%25E6%259C%25AA%25E5%2591%25BD%25E5%2590%258D%25E7%25BB%2598%25E5%259B%25BE.drawio.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14188756-3979-804a-bb79-e2f6312ba5b5&amp;t=14188756-3979-804a-bb79-e2f6312ba5b5&amp;width=576&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14088756397980539ecefc568a168947">这里的好处同样是解耦了 Redis，即使事务日志写入未确认，仍然可以让 Redis 继续处理接下来的请求</div><div class="notion-text notion-block-140887563979809f8ef8de746992ac8c">但对于主节点的读操作，仍然需要等待其所依赖的写入被持久化，因此在 tracker 需要去 trace 每个尚未被写入日志的 key。只对主节点读写可以提供线性一致性，也允许直接从副本读，这时提供的是顺序一致性，跨多个副本的读取则是最终一致的</div><div class="notion-blank notion-block-14088756397980ae9654e8e95f0f65aa"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979807e94c8d96b7619675c" data-id="12d887563979807e94c8d96b7619675c"><span><div id="12d887563979807e94c8d96b7619675c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979807e94c8d96b7619675c" title="可用性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">可用性</span></span></h2><div class="notion-text notion-block-1408875639798089bad1cad8045e11cd">通过前面的手段，已经能保证主节点正常工作时的持久性和一致性，接下来需要再考虑下分布式系统中最重要的容错处理，主要是以下三个问题：</div><ol start="1" class="notion-list notion-list-numbered notion-block-1408875639798015a2b4e8f7663b46ce"><li>故障检测：副本如何知道主节点故障</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-1408875639798054a61ad9729ec01671"><li>选举方式：哪些副本会被提升为主节点</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14088756397980ca9b57dd2f45869541"><li>故障恢复：临时故障的节点如何恢复</li></ol><div class="notion-blank notion-block-14088756397980ffb8b2e4bb4374bc41"> </div><div class="notion-text notion-block-1408875639798084be23d54c8f286921">MemoryDB 完美利用事务日志实现了以上三点。事务日志中除了正常数据的复制流，还会包括一些控制日志</div><div class="notion-text notion-block-1408875639798004b6cef2446a3f80cb">故障检测的方法就是典型的心跳，但这里心跳是作为一条日志，主节点定期写入心跳/租约日志，如果副本未能在租约期限内观测到这类日志，就认为主节点宕机，触发选举</div><div class="notion-callout notion-yellow_background_co notion-block-14188756397980d69b46d064fa637a1a"><div class="notion-page-icon-inline notion-page-icon-span"><span class="notion-page-icon" role="img" aria-label="❓">❓</span></div><div class="notion-callout-text"><div class="notion-text notion-block-c91a7dc68b084f2b91afff9c291a0c1b">这里感觉会有些时钟问题</div></div></div><div class="notion-blank notion-block-140887563979802daefcefb97cd94599"> </div><div class="notion-text notion-block-1408875639798097a233e83b26700cf5">其次是具体选主方式，选主时所有副本都只会和日志服务交互，不会互相通信，因此这里并不是采用 quorum 之类的投票方式，而同样是采用写入日志的方法</div><div class="notion-text notion-block-141887563979807891f4f31333838f93">每个日志都会有一个唯一 ID，且 append 新日志时，必须指定前序日志 ID。因此多个副本竞争选主时，只有第一个竞选日志是有效的，这也确保了能竞选的副本必然拥有最新数据。新主上台后会通过 gossip 协议通知其他节点，这部分是采用 Redis Cluster 自己的实现</div><div class="notion-blank notion-block-14188756397980b6b04bf0cdcc6b2c00"> </div><div class="notion-text notion-block-141887563979808f9715e6ce6ac40a02">最后，当故障的主节点恢复时，由于租约过期，它会自行下台重新作为副本工作。除了利用心跳日志实现的故障检测，MemoryDB 通过带外监控服务的心跳检测和内部 Redis Cluster 的 gossip 结合来获得一个集群视图，管控面会在其认为故障的节点上重启 Redis 进程或启动新副本轮替该节点</div><div class="notion-text notion-block-141887563979802da7fad4ccb6291952">MemoryDB 做了很多优化去减少 MTTR（Mean time to recovery）。在运行时，Redis 自身的持久化/快照（RDB）机制也在工作，快照被上传到 S3 中，新副本启动或恢复时会通过 S3 获得快照快速赶上进度然后开始回放事务日志</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14088756397980e39143ffcc1806f24d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9f382b69-dd91-4ea1-909c-793eeaef7f63%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14088756-3979-80e3-9143-ffcc1806f24d&amp;t=14088756-3979-80e3-9143-ffcc1806f24d&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-140887563979807fa265ef8743dd7b56">Redis 的快照是通过 Linux 的 fork 写时复制特性来实现的，虽然整体开销已经很小，但也不可避免地带来一些性能抖动，包括瞬时的内存占用</div><div class="notion-text notion-block-14188756397980a1a93be2d938b064bc">MemoryDB 的优化相当于把写时复制从进程扩展到集群层面，快照时会启动一个 off-box 临时集群，临时集群和副本恢复一样，先恢复数据到最新状态，再进行快照。虽然看起来有点重，成本很高，但优点是能完全避免快照导致用户集群产生抖动以及这期间的可用性降低两个问题</div><div class="notion-callout notion-yellow_background_co notion-block-14188756397980fe9ae3d054553db05b"><div class="notion-page-icon-inline notion-page-icon-span"><span class="notion-page-icon" role="img" aria-label="💡">💡</span></div><div class="notion-callout-text"><div class="notion-text notion-block-c68f894d33d14e0ebb0f6098e492c5d6">关于这一点，还可以看看别家的解决方案，例如阿里云直接修改了内核把 fork 时开销最多的的页表复制过程放到子进程中：<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.vldb.org/pvldb/vol16/p1033-chen.pdf">Async-fork: Mitigating Query Latency Spikes Incurred by the Fork-based Snapshot Mechanism from the OS Level</a></div></div></div><div class="notion-blank notion-block-1408875639798038866bda9256578c95"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d88756397980548322d7d948700acf" data-id="12d88756397980548322d7d948700acf"><span><div id="12d88756397980548322d7d948700acf" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d88756397980548322d7d948700acf" title="性能"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能</span></span></h2><div class="notion-text notion-block-1418875639798018badcd6eed4fe422d">最后是例行环节 evaluation</div><div class="notion-blank notion-block-141887563979808b85ddf163a0f02c0c"> </div><div class="notion-text notion-block-14188756397980d994ddc4fb42912833">只读(a)和只写(b)负载：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1418875639798022a5d3dc5667a7f2d2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F85832d91-1442-4d30-a09f-b8357d87adbc%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14188756-3979-8022-a5d3-dc5667a7f2d2&amp;t=14188756-3979-8022-a5d3-dc5667a7f2d2&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980b1b627cae28ba8d78f">写请求由于有对事务日志的同步写入，性能基本是 Redis 的 1/3 到 1/2 左右，符合预期。但读性能没有理由 MemoryDB 能比 Redis 还快啊？感觉有些猫腻，论文里说是因为 MemoryDB 通过优化过的 I/O 多路复用聚合了客户端链接，但我对此保留疑问</div><div class="notion-blank notion-block-141887563979801495acec79fd4813c8"> </div><div class="notion-text notion-block-14188756397980939ed3c92b6068eacf">只读(a)、只写(b)和混合读写(c)的时延表现，基本符合预期：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14188756397980168705e764ae36bcf0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2b826c0e-8de6-44a1-9ad2-ac24b15a0c0b%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14188756-3979-8016-8705-e764ae36bcf0&amp;t=14188756-3979-8016-8705-e764ae36bcf0&amp;width=1415.9658203125&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-141887563979802481ecf7e5f4e21a3d"> </div><div class="notion-text notion-block-14188756397980db8095da56a4bc0e3b">接下来是快照，负载是 2000w 个 500 bytes 的 key，节点配置 2c16G。快照同时 100 个 client 执行 GET，20 个 client 执行 SET</div><div class="notion-text notion-block-141887563979803abd39d774b44417d0">Redis 在快照期间的请求的延迟(a)和吞吐量(b)影响，以及内存占用情况：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979802a8de9f5c33426d156"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2b3b487b-c4c7-430f-80cc-d0c1ab6f5df5%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14188756-3979-802a-8de9-f5c33426d156&amp;t=14188756-3979-802a-8de9-f5c33426d156&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980199157eb9a0a552cf0">MemoryDB 在快照期间的延迟(a)和吞吐量(b)：</div><div class="notion-blank notion-block-14188756397980188ee9f916efef1b6e"> </div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979801ea64cd8ba1480ba0c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F07c212c9-11a1-40a0-a226-8a42735f85fd%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=14188756-3979-801e-a64c-d8ba1480ba0c&amp;t=14188756-3979-801e-a64c-d8ba1480ba0c&amp;width=1415.95166015625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980c5bb6fe39d33c5af6b">也符合预期，MemoryDB 非常稳定，不过看起来显然也田忌赛马了，没有评估这启动一个临时集群的成本开销，整个快照过程也慢不少</div><div class="notion-blank notion-block-141887563979808384afdeab35544309"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979807c9611fc938591b570" data-id="12d887563979807c9611fc938591b570"><span><div id="12d887563979807c9611fc938591b570" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979807c9611fc938591b570" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h2><div class="notion-text notion-block-14188756397980f6bc14f3f33a2f4ee8">总结一下几点：</div><ol start="1" class="notion-list notion-list-numbered notion-block-1418875639798006899ec53dcc29cb16"><li>Redis 仅仅作为执行引擎，解耦实现</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-141887563979802a88afd02e61af4adf"><li>通过事务日志（transaction log）同步写保证持久性</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14188756397980d88f63f740dca9eaa8"><li>tracker 追踪未完成持久化的 key，提供线性一致性</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-14188756397980ee9434c0d2b9e161ae"><li>围绕 log 实现租约和选主</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-14188756397980618f0feb583f5c6e14"><li>快照卸载到 off-box 集群上执行，避免抖动</li></ol><div class="notion-blank notion-block-141887563979808d90f3d2cf6a15b648"> </div><div class="notion-text notion-block-12d8875639798003a689f9e865c65c56">总体来说，是很巧妙的想法和实现，仅仅围绕 log 就实现了这一切。而且从兼容 Redis 这一核心目的角度来看，通过 log 的解耦，能做到极低的侵入性，也就意味着更高的兼容性和可维护性，是非常好的工程实践。大多数开源 fork 魔改到最后，gap 越来越大，再要保持兼容的话维护成本就会很高</div><div class="notion-blank notion-block-14188756397980709d92effe411f181f"> </div><div class="notion-text notion-block-14188756397980f78685fcf5fab9dad7">另一方面也引发了我关于 log 的更多思考，大多数数据系统都会有 WAL 或其他各种 log，这种基于 log 复制的 idea 在共识算法中也很常见。MemoryDB 展示了一个如何通过这些 log 扩展系统的完美例子，再回过头来看其他系统、设计和解决方案，不禁会想是不是也能在 log 上迸发出无限可能</div><div class="notion-blank notion-block-140887563979803cabfac50441fa0657"> </div><div class="notion-text notion-block-140887563979807e9f88cbad08c534c7">之后如果有时间，可能打算去复刻一个 MemoryDB 的实现</div><div class="notion-blank notion-block-12d887563979805a8e7afbcb7fe1157a"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d8875639798031afd1fc31e91d1b2c" data-id="12d8875639798031afd1fc31e91d1b2c"><span><div id="12d8875639798031afd1fc31e91d1b2c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d8875639798031afd1fc31e91d1b2c" title="Ref"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Ref</span></span></h2><ul class="notion-list notion-list-disc notion-block-12d887563979808e844efa6c6a307e58"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://assets.amazon.science/e0/1b/ba6c28034babbc1b18f54aa8102e/amazon-memorydb-a-fast-and-durable-memory-first-cloud-database.pdf">Amazon MemoryDB: A Fast and Durable Memory-First Cloud Database</a></li></ul><ul class="notion-list notion-list-disc notion-block-12d88756397980c6b96cd84821879abe"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://aws.amazon.com/cn/blogs/china/amazon-memorydb-a-brief-introduction-to-the-sigmod-2024-paper/">溯本追源 – Amazon MemoryDB SIGMOD 2024 论文解读 | 亚马逊AWS官方博客</a></li></ul><ul class="notion-list notion-list-disc notion-block-12d887563979804fafb3d33ab8f81c51"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.xiyoulinux.com/blog/104106524">从一到无穷大 #27 从Amazon MemoryDB视角看稳定binlog带来的无限可能性</a></li></ul><div class="notion-blank notion-block-12d8875639798056a5d6e329712464e9"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[应该在 DBMS 中使用 MMAP 吗？]]></title>
        <id>https://xxxuuu.me/post/db-mmap</id>
        <link href="https://xxxuuu.me/post/db-mmap"/>
        <updated>2024-10-27T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-94e03781e74c41d089f7df2e2a7ad93f"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-fa45317e598544ada6c59ed6426453d2" data-id="fa45317e598544ada6c59ed6426453d2"><span><div id="fa45317e598544ada6c59ed6426453d2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#fa45317e598544ada6c59ed6426453d2" title="Buffer Pool 和 MMAP"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Buffer Pool 和 MMAP</span></span></h2><div class="notion-text notion-block-f9fbf6dd0ea3468b96f411874b9499c6">对于（基于磁盘的）数据库来说，缓存（cache + buffer）管理是很重要的，因为次级存储速度很慢，必须设计一个缓存机制才能让数据库高效地进行读写</div><div class="notion-blank notion-block-5788384de0454fc59c2067a7f7c7864a"> </div><div class="notion-text notion-block-1a5eb03f8c344421848aabb573c609e5">传统的方法是数据库实现一个缓冲池（Buffer Pool），像 CMU 15-445 这样的数据库课程，通常第一个 Lab 就是实现一个 Buffer Pool 作为页面和缓存管理的组件</div><div class="notion-text notion-block-7d83d2ff3ac446a88d6a8c52f9f6c078">另一个方法是将一切交给操作系统，也就是使用 <code class="notion-inline-code">mmap()</code> 系统调用，mmap 将文件映射到内存地址空间上，程序透明地对内存进行访问，由内核负责管理页面的加载和刷写</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-e633f5c6aac94be2be6ce7d79fca0959"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F0bb67f4b-fc66-4c7f-8b45-af39e6585204%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=e633f5c6-aac9-4be2-be6c-e7d79fca0959&amp;t=e633f5c6-aac9-4be2-be6c-e7d79fca0959&amp;width=1366.7044677734375&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-dd47c10093494e7783c6cee5d149a144">使用 mmap 能大大简化开发，并且能避免 <code class="notion-inline-code">read</code>/<code class="notion-inline-code">write</code> 等系统调用和缓冲区拷贝的开销，理论上有更高的性能。因此不少数据库或存储系统也使用了 mmap，但也有一些不同的观点</div><div class="notion-blank notion-block-129887563979801a903ed851e11dc8d5"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-1bb19bbca4e24e7fbde107647c830068" data-id="1bb19bbca4e24e7fbde107647c830068"><span><div id="1bb19bbca4e24e7fbde107647c830068" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1bb19bbca4e24e7fbde107647c830068" title="反方：不应该使用 MMAP"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">反方：不应该使用 MMAP</span></span></h2><div class="notion-text notion-block-12a88756397980d6b028d5a43aba1ba6">反方出自 CIDR 2022 上一篇比较短的 paper：<em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf">Are You Sure You Want to Use MMAP in Your Database Management System?</a></em> 作者之一是 Andy Pavlo，刷过 CMU 15-445 的同学肯定不陌生</div><div class="notion-blank notion-block-12a88756397980198f24c8b5d5976365"> </div><div class="notion-text notion-block-129887563979800e9092fe48793ab545">PS：页眉有惊喜</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12988756397980d39666e98f30e6c92f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe6a32e12-65cc-426e-881b-8c2a4eb6b942%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=12988756-3979-80d3-9666-e98f30e6c92f&amp;t=12988756-3979-80d3-9666-e98f30e6c92f&amp;width=4372&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1c1d3016de80489a973ae50a76d80cf2"> </div><div class="notion-text notion-block-12a88756397980fe9a1dd161acc907df">文章的主要观点是在 DBMS 内不应该使用 mmap，论文提出，mmap 存在一些阴暗面（dark side）会带来棘手的问题，而为了解决这些问题，在工程上带来的复杂性，会使得 mmap 本身的收益（简单和性能）都被抵消</div><div class="notion-blank notion-block-12988756397980bdb30af9daef787377"> </div><div class="notion-text notion-block-12988756397980728ff0e1303debe18d">论文具体讨论了 mmap 的以下几宗罪</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980e9ba8fce5f90f1c33d" data-id="12988756397980e9ba8fce5f90f1c33d"><span><div id="12988756397980e9ba8fce5f90f1c33d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980e9ba8fce5f90f1c33d" title="事务安全"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">事务安全</span></span></h3><div class="notion-text notion-block-12988756397980b6ac48d7d2a7cef530">mmap 对程序来说是透明的，何时将脏页刷到磁盘上取决于操作系统。虽然通过 <code class="notion-inline-code">msync</code> 可以强制刷盘，但没有办法能够阻止刷盘（这相当于强制数据库是 steal policy 的），也无法在静默刷盘时得到通知</div><div class="notion-blank notion-block-12b88756397980f1a397eed12112b0f2"> </div><div class="notion-text notion-block-12a88756397980ebb0fdda2dc689f849">为此数据库就需要一些复杂的协议来保证事务安全，论文总结了三种处理方法，都是写时复制的（Copy-on-Write，COW）想法：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12a8875639798091b36ee147c41a2441"><li>内核写时复制</li><ol class="notion-list notion-list-numbered notion-block-12a8875639798091b36ee147c41a2441"><div class="notion-text notion-block-12a887563979807c976fccd38729687c">通过 <code class="notion-inline-code">MAP_PRIVATE</code> flag 创建 mmap，映射出来的地址空间就是写时复制的，不会作用到底层的文件。通过这个方法，可以创建一个私有的副本工作区用来修改数据，最后在私有工作区更新的数据并写入 WAL，再传播修改回主工作区</div><div class="notion-text notion-block-12b88756397980bead6eee0fe8cf2b25">这里要确保已提交事务的更新必须在其他冲突事务运行之前就传播到主工作区上，需要一些额外的数据结构去追踪脏页</div><div class="notion-text notion-block-12b887563979806c8b32daefe90dc2bf">另外因为是 COW 的，私有工作区会随着写入逐渐增长，最终可能会在内存中存在两个完整的数据库副本，可以通过 <code class="notion-inline-code">mremap</code> 定期收缩私有工作区的大小避免无限扩张，但同样有上面的问题，需要确保脏页传播到主工作区上，并在此期间阻止并发更新</div><div class="notion-text notion-block-12b8875639798090aa04d6bc0778e0dd">MongoDB 的 MMAPv1 引擎使用了这种方法</div></ol></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12a887563979804394ecd34e0eb6e1d1"><li>用户态写时复制</li><ol class="notion-list notion-list-numbered notion-block-12a887563979804394ecd34e0eb6e1d1"><div class="notion-text notion-block-12b887563979800aa9fce24e6f24cdf8">第二种方法类似，但是在用户态进行。待更新页面从 mmap 区域手动复制到另一块单独维护的缓冲区上进行更新并写入 WAL，然后再复制回 mmap 区域</div><div class="notion-text notion-block-12b88756397980b0a829f0b2658617ed">SQLite，RavenDB 使用了类似的方法</div></ol></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12a88756397980a3a2d7ee3ade906c2a"><li>影子分页</li><ol class="notion-list notion-list-numbered notion-block-12a88756397980a3a2d7ee3ade906c2a"><div class="notion-text notion-block-12b88756397980c88c73cde1817c776e">影子分页类似一种 swapping pointer 的做法，通过 mmap 映射两份出副本，其中一个是主副本。当要修改时将页面复制到影子副本上进行更新，<code class="notion-inline-code">msync</code> 刷盘后 swap pointer 将影子副本变为主副本，原主副本变为新的影子副本</div><div class="notion-text notion-block-12b88756397980ef83b5e8284bd610cb">LMDB 使用了这种方法，但只允许单个写者进行更新</div></ol></ol><div class="notion-blank notion-block-12b887563979806c8fa4fc304a2de619"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980cabb7def893e5bf4f2" data-id="12988756397980cabb7def893e5bf4f2"><span><div id="12988756397980cabb7def893e5bf4f2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980cabb7def893e5bf4f2" title="I/O 停顿"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">I/O 停顿</span></span></h3><div class="notion-text notion-block-12b88756397980bd8b32eb9e05746d9e">很多 DBMS 都使用了异步 I/O（例如 libaio 或 io_uring），例如对 B+ Tree 的叶子节点扫描可以通过异步 I/O 访问以避免非连续页面的阻塞读取导致的延迟。但 mmap 是不支持异步的</div><div class="notion-text notion-block-12b8875639798093b385eec2d68342c9">此外，操作系统可能会随时会将页面驱逐，再次访问就会导致缺页中断，会有明显的性能抖动。DBMS 无法知道页面是否真正在内存中，虽然可以使用 <code class="notion-inline-code">mlock</code> 将页面 pin 在内存中，但这又需要实现一些额外的页面管理工作</div><div class="notion-text notion-block-12b88756397980dab056c7bbd48d676b">或者通过 <code class="notion-inline-code">madvise</code> 来告知操作系统应用的访问模式以尽量避免接下来访问的页面被驱逐，但这只是一种 “advise” 而不是强力的控制，并且也只提供了简单的 <code class="notion-inline-code">MADV_SEQUENTIAL</code>、<code class="notion-inline-code">MADV_RANDOM</code> 和 <code class="notion-inline-code">MADV_WILLNEED</code> 等几个 flag，无法精细管理</div><div class="notion-blank notion-block-12b887563979806ba75eecd7d5a2dab5"> </div><div class="notion-text notion-block-12b887563979803c9a2dc4ceb7a2daf5">也许还可以创建额外的线程去做预取以避免阻塞主线程，但这额外的复杂性完全违背了使用 mmap 的初衷</div><div class="notion-blank notion-block-12988756397980b4adfdd5d8f7603e44"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-1298875639798046857bff3c95abcbe5" data-id="1298875639798046857bff3c95abcbe5"><span><div id="1298875639798046857bff3c95abcbe5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1298875639798046857bff3c95abcbe5" title="错误处理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">错误处理</span></span></h3><div class="notion-text notion-block-12b88756397980a8b5b5e9884205677c">DBMS 的一个核心职责是确保数据的完整性，大多数 DBMS 都会在各种级别的数据上维护 checksum，例如 SQL Server 在页面级别上维护了 checksum，从磁盘上读取数据时就会进行校验</div><div class="notion-blank notion-block-12b887563979809c840cff48282d23d1"> </div><div class="notion-text notion-block-12b8875639798073aafaee04c51f4899">但使用 mmap 的话难以实现，原因还是 DBMS 无法知道页面到底在哪里，没有一个明确的边界隔离内存和磁盘访问。操作系统可能在任意时刻将页面驱逐，下次访问再透明地重新从磁盘读取，因此必须每次进行页面访问都重新校验才能确保安全，但显然很多时候这种校验是不必要的</div><div class="notion-text notion-block-12b887563979800aa3f7e31462b91913">另外从语言角度考虑，如果使用了非内存安全的语言，有可能在不经意间破坏了 mmap 映射区域的内存数据，而这些错误的数据又会被静默地写入磁盘，永久损坏。如果是 Buffer Pool 实现，则可以在刷盘时显式检查</div><div class="notion-blank notion-block-12b88756397980bb8be9ca49714c04f3"> </div><div class="notion-text notion-block-12b887563979802bb964e3ef612d7ec8">mmap 这种透明性的「优点」也会导致在代码里更难进行 I/O 错误处理。Buffer Pool 实现中 I/O 交互只局限于它自身，可以很轻易地包装对 I/O 错误的处理。但 mmap 中任意时刻的内存访问都可能导致 I/O 错误，给异常处理流带来很大的不便</div><div class="notion-blank notion-block-129887563979809abc62f48973add07e"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980e39ed5e8af4e22fd67" data-id="12988756397980e39ed5e8af4e22fd67"><span><div id="12988756397980e39ed5e8af4e22fd67" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980e39ed5e8af4e22fd67" title="性能问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能问题</span></span></h3><div class="notion-text notion-block-12b887563979801aa04fe88c7f631a74">最后，mmap 真的性能更好吗？</div><div class="notion-blank notion-block-12b88756397980dcab37d7d68377ca2f"> </div><div class="notion-text notion-block-12b88756397980ba90cbf4bacf66baab">传统观点认为 mmap 性能好的点在于避免了 <code class="notion-inline-code">read</code>/<code class="notion-inline-code">write</code> 的系统调用，以及避免内核和用户态缓冲区来回拷贝的开销（这也降低了内存使用）。从这些点来看，随着 NVMe SSD 的提升，理论上 mmap 和传统 I/O 方法的差距还会进一步扩大</div><div class="notion-blank notion-block-12b887563979806fa0e3d7c9c7605ca1"> </div><div class="notion-text notion-block-12b88756397980d898b2ddf29c713237">但论文指出，内核的页面驱逐机制成为主要瓶颈，该机制无法扩展到更多的线程和更大带宽的存储设备上。除非没有内核级别的重大重写，这个问题无法解决。具体来说有下面三个瓶颈：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12b8875639798065acd4c40cff49a5b0"><li>页表竞争：内核需要同步页面，在大量更新的时候会有显著竞争开销</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12b8875639798097965ed32e2885e175"><li>单线程页面驱逐：内核使用单线程进行页面驱逐，扩展性受限</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12b887563979801bacc2cd214518bfc1"><li>TLB shootdown：驱逐页面时，内核还要清理每个核心上的 TLB 项，这里多核设备的核间中断会有高昂的开销，需要数千个周期</li></ol><div class="notion-text notion-block-12b887563979809e8638ca163e9c8a11">
OLTP 比较常见的随机读负载实验中，mmap 如果使用 <code class="notion-inline-code">MADV_RANDOM</code> 的 hint，在一开始还能达到 fio 的基线性能，但马上就会 I/O 跌 0 将近 5 秒，最终恢复到基线性能的一半。右图可以看到此时正好是 Page cache 被填满，开始驱逐页面</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12b88756397980af9b95e0d8d5496145"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fca6f2a55-8f94-4ce6-a6ff-9816dc9898ef%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=12b88756-3979-80af-9b95-e0d8d5496145&amp;t=12b88756-3979-80af-9b95-e0d8d5496145&amp;width=4112&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-12b8875639798015bc83ec2327647b01">对于 OLAP 场景的顺序读负载试验，<code class="notion-inline-code">MADV_SEQUENTIAL</code> hint 的 mmap 在一开始还能维持较高的性能，但同样在 20 秒左右 Page cache 被打满，性能严重下降。而在同时使用 10 块 SSD 的场景，mmap 性能和只有 1 块 SSD 时几乎完全一样，说明 mmap 性能无法随着硬件线性提升</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12b8875639798082830adc6913a96ed5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4bffeaa1-bcba-4bbc-baf3-2a9c49313af1%2Fimage.png%3FspaceId%3D4cc04375-345a-4a1e-bdf0-3a7c88ef0425?table=block&amp;id=12b88756-3979-8082-830a-dc6913a96ed5&amp;t=12b88756-3979-8082-830a-dc6913a96ed5&amp;width=4252&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12c887563979806886f8d8c226ce3808"> </div><div class="notion-text notion-block-12b88756397980b8b954dcd04f53a66a">不过在我看来这个 benchmark 应该得加上 Buffer Pool 的数据，只和 fio 来比较显然是不公平的，fio 读写方式和真实数据库的负载不同，Buffer Pool 肯定也远达不到 fio 压测的基线性能</div><div class="notion-blank notion-block-12c887563979806f9d71d0ab8b222d28"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12988756397980ba9b7eefe1c7fdde0a" data-id="12988756397980ba9b7eefe1c7fdde0a"><span><div id="12988756397980ba9b7eefe1c7fdde0a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980ba9b7eefe1c7fdde0a" title="正方：使用 MMAP 完全没问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">正方：使用 MMAP 完全没问题</span></span></h2><div class="notion-text notion-block-12a887563979803285aaca3305cfa36f">RavenDB 的 CEO, Oren Eini 发表了一篇文章回复：<em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://ayende.com/blog/196161-C/re-are-you-sure-you-want-to-use-mmap-in-your-database-management-system">Re: Are You Sure You Want to Use MMAP in Your Database Management System?</a></em></div><div class="notion-text notion-block-12c88756397980d19f3be0ac276f1873">RavenDB 的 Voron 存储引擎使用 mmap 构建，他们还出了一本<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/ayende/libgavran">关于如何构建存储引擎的书</a>，其内部也使用了 mmap</div><div class="notion-blank notion-block-12c88756397980dcbffffa1e7081310e"> </div><div class="notion-text notion-block-12c88756397980dcbae5c869c188e5ae">文章首先指出了 Buffer Pool 要做的事情并不少，而且也对实现有一定要求，如果不是高度优化的实现，不会有好的性能，而在 mmap 这些都能由操作系统来保障</div><div class="notion-blank notion-block-12c8875639798074a685f236b1817562"> </div><div class="notion-text notion-block-12c887563979801981edef988504a1c8">接下来，文章对四个问题进行了逐一反驳</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980a895f7e01867822607" data-id="12c88756397980a895f7e01867822607"><span><div id="12c88756397980a895f7e01867822607" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980a895f7e01867822607" title="事务安全"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">事务安全</span></span></h3><div class="notion-text notion-block-12c88756397980499521e5865fe9ca32">mmap 确实无法知道数据何时落盘，但作者认为这本质上与使用 Buffer Pool 时没有区别，在 Buffer Pool 中也同样需要考虑页面的驱逐和各种管理</div><div class="notion-text notion-block-12c88756397980f68772d2340fdcc080">文中还提到 RavenDB 使用写时复制的主要目的也是为了方便实现 MVCC，更容易处理并发事务。并且单写者模型在 DBMS 中并不罕见</div><div class="notion-blank notion-block-12c88756397980e38057c5dc06a974e8"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980aaa2eaddf259ca9447" data-id="12c88756397980aaa2eaddf259ca9447"><span><div id="12c88756397980aaa2eaddf259ca9447" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980aaa2eaddf259ca9447" title="I/O 停顿"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">I/O 停顿</span></span></h3><div class="notion-text notion-block-12c8875639798024a356e40a096833a9">作者承认关于缺页导致的 I/O 抖动是使用 mmap 必须要处理的最重要的问题，但实际情况并没有想象中那么严重。RavenDB 中通过在专用线程上调用 <code class="notion-inline-code">madvise(WILL_NEED)</code>，他认为这和异步 I/O 的方式没什么不同</div><div class="notion-blank notion-block-12c88756397980e19663c27556f86066"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c887563979806e918fe4d24fb0c307" data-id="12c887563979806e918fe4d24fb0c307"><span><div id="12c887563979806e918fe4d24fb0c307" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c887563979806e918fe4d24fb0c307" title="错误处理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">错误处理</span></span></h3><div class="notion-text notion-block-12c8875639798083b949c12c4fe0fb07">校验和的问题，即使在 Buffer Pool 中也会存在，因为数据可能从 cache 中读取，但实际上在磁盘中损坏；RavenDB 只会进行一次校验和检查，不需要每次都检查，两者没什么差别</div><div class="notion-text notion-block-12c887563979804792bcd92af5e844eb">对于 I/O 错误，作者认为在数据库中处理该类错误的唯一答案是 crash 掉整个数据库然后从头恢复运行，因此在这里不需要什么额外工作</div><div class="notion-blank notion-block-12c88756397980939c88d10f38690a7e"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980bbaef4fa08b65e579e" data-id="12c88756397980bbaef4fa08b65e579e"><span><div id="12c88756397980bbaef4fa08b65e579e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980bbaef4fa08b65e579e" title="性能问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能问题</span></span></h3><div class="notion-text notion-block-12c88756397980869602d58e3b130f7f">对于 mmap 的三个性能瓶颈:</div><ol start="1" class="notion-list notion-list-numbered notion-block-12c88756397980d78fe4c5e7b0cebf50"><li>页表竞争：是一个<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://ravendb.net/articles/production-postmortem-the-guinness-record-for-page-faults-high-cpu">已修复的内核 bug</a>，现在无需操心</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12c887563979809690b0d7260b927574"><li>单线程页面驱逐：RavenDB 从未遇到过，脏页是少数，页面驱逐的压力并不大</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12c88756397980a8a9c3ff8ddb208bf8"><li>TLB shootdown：触发这个问题需要极快的 I/O 加上远超内存大小的工作集</li></ol><div class="notion-text notion-block-12c887563979802a824ec1b3cc40a44a">作者认为论文中的基准测试假设了不使用 mmap（也就是使用 Buffer Pool）的情况下没有其他成本，这是不现实的，例如使用 Buffer Pool，也同样需要考虑这些页面驱逐的问题，只不过现在是由 Buffer Pool 来负责。这个观点我是赞同的，前文的基准测试确实没有体现出 Buffer Pool 的对比</div><div class="notion-blank notion-block-12c88756397980329e3fda3cb2e51728"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12a887563979804c9010d0af55e5569b" data-id="12a887563979804c9010d0af55e5569b"><span><div id="12a887563979804c9010d0af55e5569b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12a887563979804c9010d0af55e5569b" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h2><div class="notion-text notion-block-12c887563979801caaadfbc75072f3ad">两篇文章看下来，个人感觉 Oren Eini 反驳的文章中内容稍显空洞，没有什么特别有力的证据或数据支撑，例如异步 I/O 性能那块没有给出具体数据，在我个人的经验中异步 I/O 还是能带来很大的提升的，除非这里的数据集很小，能大部分都缓存命中</div><div class="notion-text notion-block-12c88756397980f8a36ac3438606c126">但这篇文章也可以作为一个不同角度的参考，有些地方还是值得思考的，比如关于错误处理，另一个相似的问题是，对于底层软件，内存分配失败的情况下应该如何处理？mmap 无法像手动实现 Buffer Pool 一样限制缓存容量，可能更需要考虑这个问题</div><div class="notion-text notion-block-12c8875639798051948accc0ba11f41a">另外还可以参考下 codedump 老师的这篇 blog：</div><ul class="notion-list notion-list-disc notion-block-12c887563979802ab722deef829acfa2"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.codedump.info/post/20220327-weekly-11/">周刊（第11期）：mmap适用于存储引擎吗？ - codedump的网络日志</a></li></ul><div class="notion-blank notion-block-12c8875639798003b771ff37be2da95e"> </div><div class="notion-text notion-block-12c88756397980e48ac8e9255219326b">回到 mmap 上，使用 mmap 确实需要考虑比想象中更多的问题，但随着内核发展，某些痛点也逐渐被解决了，例如现在内核支持了原子 <code class="notion-inline-code">msync</code> 调用，如果它失败了，就会禁用内核的透明页驱逐功能，这样就不需要再操心一些使用 mmap 带来的事务安全问题了</div><div class="notion-text notion-block-12c88756397980ffba8fd1164cc68022">但总的来说我认为是否使用 mmap 是一个 trade-off，如果你希望系统更加简单，有更低的开发成本，那就使用 mmap，把一切都交给内核；但反之这也可能会让内核实现成为整个系统的瓶颈，因为内核是 general-purpose 的实现，而不是针对数据库的 special-purpose 的实现。当内核会成为你的瓶颈，或需要更多细粒度的控制，为此需要进行大量改造的话，还不如从头就开始自己实现</div><div class="notion-blank notion-block-12c8875639798053a5a3d68e25dcece2"> </div></main></div>]]></content>
    </entry>
</feed>