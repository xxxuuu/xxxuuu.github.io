<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id/>
    <title>x³u³</title>
    <updated>2024-11-22T13:46:42.656Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>xxxuuu</name>
        <email>xxuuu0@outlook.com</email>
        <uri>https://xxxuuu.me</uri>
    </author>
    <link rel="alternate" href="https://xxxuuu.me/"/>
    <subtitle>🗒 碎碎念</subtitle>
    <icon>https://xxxuuu.me/favicon.png</icon>
    <rights>All rights reserved 2024, xxxuuu</rights>
    <entry>
        <title type="html"><![CDATA[浅谈协程]]></title>
        <id>https://xxxuuu.me/post/coroutine</id>
        <link href="https://xxxuuu.me/post/coroutine"/>
        <updated>2024-11-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最近经常被各种人问到一些关于协程的事情，例如 xx 语言的 xx 是不是协程，xx 语言和 xx 语言的协程有什么区别，我不得不一次次 share 出我的文章，索性直接发到 blog 上吧]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-146887563979806caf3cf23f4c85d88e"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-text notion-block-146887563979807ab4fcd59ffda28582">最近经常被各种人问到一些关于协程的事情，例如 xx 语言的 xx 是不是协程，xx 语言和 xx 语言的协程有什么区别，我不得不一次次 share 出我的文章，索性直接发到 blog 上吧</div><div class="notion-blank notion-block-146887563979801fb7c3d62a97a4a26a"> </div><div class="notion-text notion-block-146887563979804a9ba2d8e79a9f896c">首先，协程是什么？一开始应该抛开一切具体语言的实现去理解协程，给出一个明确定义，但协程的定义实在太多，并且扩展出了各种不同形态，这里我们简单定义<b>协程就是一个「可以暂停和恢复的函数」</b></div><div class="notion-blank notion-block-14688756397980c4a8f0f61f3800faf6"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980fea80afcd165f32bc7" data-id="14688756397980fea80afcd165f32bc7"><span><div id="14688756397980fea80afcd165f32bc7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980fea80afcd165f32bc7" title="达夫设备"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">达夫设备</span></span></h3><div class="notion-text notion-block-1468875639798047951ee800d02438dc">了解了协程的定义，就是实现问题了</div><div class="notion-text notion-block-14688756397980b5bf64c8eccabec849">来看一个 fib 协程</div><div class="notion-text notion-block-146887563979808a9ce5c10168ff51fd">对 fib 进行调用，会返回斐波那契数列 1，1，2，3，5，8… </div><div class="notion-text notion-block-14688756397980daa519d7f366691b5f">在 <code class="notion-inline-code">yield</code> 时，协程被暂停，再次调用，协程被恢复</div><div class="notion-blank notion-block-146887563979805eb266ee0ab49f5057"> </div><div class="notion-text notion-block-1468875639798045a913c7894ec76e41">现在我们要实现类似的效果，核心无非两点，如何暂停和如何恢复</div><div class="notion-text notion-block-146887563979807ea8d5e54dfb0fe98b">一种简单的协程实现是达夫设备，它是一个状态机，状态机上的状态对应每个 yield 的位置</div><div class="notion-text notion-block-14688756397980ddace1dffbd89acf46">首先通过 static 变量存储状态（也可以通过一个外部的协程结构体来在任意地方存储），接着，yield 时直接 return 返回控制权，调用时通过 switch + goto 跳转回之前的位置，也就是上次 yield 后的位置，这就恢复了状态：</div><div class="notion-blank notion-block-1468875639798056bc1ff8f443ffb009"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-146887563979804da80dd28d12dd75c2" data-id="146887563979804da80dd28d12dd75c2"><span><div id="146887563979804da80dd28d12dd75c2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#146887563979804da80dd28d12dd75c2" title="扩展"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">扩展</span></span></h3><div class="notion-text notion-block-14688756397980e89fc7d8fb17484f7c">有了基本的协程后，就可以谈谈其它语言中的 generator、async / await、goroutine / virtual thread 等实现了</div><div class="notion-blank notion-block-14688756397980a097cdca331630f4f4"> </div><div class="notion-text notion-block-146887563979809e81d2c77541de17fc">对于 generator 和 async / await 模式，实际上和我们上面的实现是类似的，都是一个状态机。但它们通过编译器来生成了这堆繁琐的部分，作为语言的一个语法来提供，可以说是真正能用的协程。例如这样一段 Rust 的 generator 代码</div><div class="notion-text notion-block-146887563979802a8710ec1ae9775392">编译器会生成类似这样的实现，和我们前面的达夫设备基本基本没区别：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979801b8e1ecf72d1848856"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F3a9e11cf-1dd2-4987-b330-8e9d67ea3555%2FUntitled.png?table=block&amp;id=14688756-3979-801b-8e1e-cf72d1848856&amp;t=14688756-3979-801b-8e1e-cf72d1848856&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-14688756397980168485fd784b6b13c9"> </div><div class="notion-blank notion-block-14688756397980c0b015cb541aa4362a"> </div><div class="notion-text notion-block-146887563979802d991bd3b9e56d1925">剩下的一些，就基本属于是对协程的「扩展」了</div><div class="notion-text notion-block-146887563979808a844fd74ae87600dc">首先就是所谓的调度器，前面 generator 的模式是没有调度的，或者说，是用户手动控制调度，自己决定何时运行哪个协程，而且这里调度一个协程，就是执行它这个函数。</div><div class="notion-text notion-block-14688756397980bdb5d1f0014db863a9">而 async / await 模式就会有调度器，例如一个函数在 await 另一个 async 函数，此时如果该函数并没有执行完成，await 这里就需要等待，控制流会被切换出去（类似 generator 模式的 yield），调度器会进行调度</div><div class="notion-text notion-block-1468875639798095904fe1f70a447108">在设计更复杂的情况下，调度器的工作会多很多，例如如果不是采用 return 和直接 call 来转移所有权，那就可能需要通过直接跳转的方式（插入汇编或 <code class="notion-inline-code">setjmp</code>/<code class="notion-inline-code">longjmp</code> 等）来进行协程的所有权转移。以及可能有更复杂的调度策略决定运行哪一个协程</div><div class="notion-text notion-block-14688756397980879651f7edf931f776">南京大学操作系统课程的其中一个实验就是实现这个程度的协程</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980309993fdec25e9e04f" href="https://jyywiki.cn/OS/2024/labs/M2.md"><div><div class="notion-bookmark-title">M2: 协程库 (libco)</div><div class="notion-bookmark-description">我们在《操作系统》课程中学习了线程：只需要 create 和 join 两个 API，我们就能创建和管理线程。我们也知道，线程的创建和执行需要操作系统的帮助：程序就是状态机，如果执行死循环，这个状态机就 “卡死” 了。那么，我们能在一个状态机内，实现多个状态机 (类似线程切换) 的效果吗？</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fjyywiki.cn%2Ffavicon.ico?table=block&amp;id=14688756-3979-8030-9993-fdec25e9e04f&amp;t=14688756-3979-8030-9993-fdec25e9e04f" alt="M2: 协程库 (libco)" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://jyywiki.cn/OS/2024/labs/M2.md</div></div></div></a></div><div class="notion-blank notion-block-14688756397980dc9f6cf60f88eb3735"> </div><div class="notion-text notion-block-14688756397980a094a4eb51263679a8">接着是一些协程设计上的问题。前面我们转移所有权的时候，yield 是定向地转移回所有权到 caller 上，因此可以用 return 实现。但更多场景是 yield 时协程 A 希望暂停自己的同时定向恢复协程 B 的运行，但又不希望 A 直接 call B（如果 B 也 call A，就会造成无限递归）。</div><div class="notion-text notion-block-146887563979802eb4a8f44b9d6b0166">一种实现是基于调度器的，称为非对称协程，A 返回到调度器，要求调度器 call B。这会带来一些性能损失，且不太能保证实时性</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979800d8df6f3fb9ba47926"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0f71dddd-810b-4881-81bf-75296977bd15%2FUntitled.png?table=block&amp;id=14688756-3979-800d-8df6-f3fb9ba47926&amp;t=14688756-3979-800d-8df6-f3fb9ba47926&amp;width=864&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-1468875639798016bf4aed5e27939ad8">另一类是对称协程，需要一些特殊的指令，让 A 能够直接切换到 B，且 B 返回后直接回到了调度器，这个过程对调度器是不知情的，这种设计架空了调度器，实现上更加复杂，但性能更好更加灵活</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-146887563979809aaf5fee8cc4612737"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff34759e5-39ea-43d1-a126-b96a589bb37b%2FUntitled.png?table=block&amp;id=14688756-3979-809a-af5f-ee8cc4612737&amp;t=14688756-3979-809a-af5f-ee8cc4612737&amp;width=768&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-14688756397980aaa95ce9d65dbc3da3"> </div><div class="notion-text notion-block-14688756397980909e2adedf33714a35">设计上另外一个重要的区别是协程的栈帧，也就是有栈协程和无栈协程。前面实现的协程是无栈协程，它们两个的区别从概念上讲，只有是否保存完整栈帧。</div><div class="notion-text notion-block-146887563979809184b3d137c6787666">从实现角度来看，无栈线程的「状态」只有局部变量，转移所有权的位置等，对于该协程来说都是固定的，所以每个无栈协程的帧通常是一个定制的结构体（当然编译器帮你实现了），这个结构体就直接代表了整个无栈协程的所有状态，例如前面 <code class="notion-inline-code">fib</code> 的例子，它的这个结构体可能就是这样的</div><div class="notion-text notion-block-146887563979807a9fb3db5d99c28acc">而有栈协程对于帧的保存，无论是哪个协程，都是直接申请一大块内存，将其作为函数的调用栈来使用，一切状态都保存在内部。从这个角度来讲，有栈协程更接近普通函数</div><div class="notion-blank notion-block-14688756397980019207d993f33a6180"> </div><div class="notion-text notion-block-146887563979804f9eb6fc0203cbae7c">在使用上的一个重要区别是，有栈协程可以在任意处挂起，包括嵌套函数。而无栈协程不可以，因为它的帧结构只保存了它自己特定的那几个的状态，所以无法恢复到嵌套函数内部。这使得有栈协程在使用上和普通函数几乎没有区别，就像线程一样</div><div class="notion-text notion-block-14688756397980a5b3ade71278ef6f81">实现上的差异这也体现出无栈协程更加紧凑，开销更小，因为它只保存了必要的状态。而有栈协程需要保存的状态更多，而且通常是有些浪费的（当然也可以让这个栈更小，但要考虑动态扩展的问题）</div><div class="notion-blank notion-block-1468875639798002b593cc3ba6311252"> </div><div class="notion-text notion-block-1468875639798080a7e3eda84e03c576">现在对于各种语言的协程实现就很清晰了，generator 和 async / await 就是编译器层面上实现的无栈协程，以语法糖的方式来提供。而 goroutine / virtual thread 等更类似线程，这是因为他们是有栈协程，还实现了抢占式的调度器来控制协程的执行，当然这里对于这种抢占式设计是不是协程也有不少争议，因为看起来他们从根本上就违背了协程的「协作式」这一想法</div><div class="notion-blank notion-block-1468875639798086a59ed4cbacfddf31"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-146887563979808a96f4f7a7e87a9fa8" data-id="146887563979808a96f4f7a7e87a9fa8"><span><div id="146887563979808a96f4f7a7e87a9fa8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#146887563979808a96f4f7a7e87a9fa8" title="性能"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能</span></span></h3><div class="notion-text notion-block-14688756397980559c07da37d09532e8">对于无栈协程，性能上的优势是明显的，首先它保存的状态是非常轻量的，只保存了必须的状态。其次，无栈协程的场景通常是「协作式」的，也就是 A 运行一会，然后轮到 B 运行</div><div class="notion-text notion-block-14688756397980529850eb68e59102ba">如果通过线程来做这样的操作，大部分时间是浪费在无意义的上下文切换和互斥开销当中了，而无栈协程主动切换控制权，使其每次切换都是有意义的</div><div class="notion-blank notion-block-146887563979805e996bf4ced1b70697"> </div><div class="notion-text notion-block-14688756397980db9ed1c3e5606dbf65">而对于带抢占式调度器的有栈协程，和线程那么像，或者说它就是一种用户线程，那究竟开销少在哪里？</div><div class="notion-text notion-block-14688756397980e1a78fc90acfe08dff">首先，进程和线程的调度需要到内核态做上下文切换，会有以下开销：</div><ol start="1" class="notion-list notion-list-numbered notion-block-146887563979802db836ec121eac02ad"><li>切换页表全局目录</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-14688756397980f898eed2bd64e6d321"><li>切换内核态堆栈</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-1468875639798027a249cd547c752b7c"><li>切换硬件上下文（进程恢复前，必须装入寄存器的数据统称为硬件上下文）</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-14688756397980cf8f36c05ec9de20d7"><li>刷新TLB</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-1468875639798008b3e4f888cc6e4360"><li>内核调度器的执行</li></ol><div class="notion-text notion-block-14688756397980c5bb29c9576222424a">其中特别是跨 CPU 导致的 Cache 失效问题，会对性能有明显影响。CPU 之间也可以看作是一种分布式系统，在高性能场景中，跨 CPU 之间的交互就像跨节点的网络通信一样，相对于纯本地运算要慢得多，是要尽力避免的</div><div class="notion-blank notion-block-146887563979805b9255f9149fc739af"> </div><div class="notion-text notion-block-14688756397980158a90fe22b70056f9">协程调度也需要进行上下文切换，开销主要少在几个方面：</div><ol start="1" class="notion-list notion-list-numbered notion-block-14688756397980008f6be5f2c194d0a6"><li>协程栈通常只有几 KB，比数 M 的线程栈要小得多（无栈协程连这部分也不需要，就只是一个普通的函数调用）</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-14688756397980459beac54afcbfbe94"><li>协程的上下文切换没有跨进程，也就不需要修改额外的内核数据结构（页表等），也不会造成 Cache 失效</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14688756397980669257fcc6f52ee1e0"><li>协程调度在用户态，而线程调度在内核态，每次调度都会有额外的上下文切换（到内核态）。协程避免了大量线程频繁的内核态上下文切换，能充分利用分给一个线程的时间片</li></ol><div class="notion-blank notion-block-14688756397980ccb6c2c00e0d7fa768"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1468875639798052a1f9d17c88d3d214" data-id="1468875639798052a1f9d17c88d3d214"><span><div id="1468875639798052a1f9d17c88d3d214" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1468875639798052a1f9d17c88d3d214" title="局限"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">局限</span></span></h3><div class="notion-text notion-block-146887563979807f8586e5faaef1e703">协程的轻量和用户态调度带来很高的性能，那么代价是什么？</div><div class="notion-text notion-block-1468875639798080ba04e791d5d22318">首先无栈协程的功能上有局限，例如无法在嵌套函数中挂起，使得它的编程模型还是和普通函数有些不同，也无法实现一些效果，像在大部分语言中 async / await 就会带来传染性</div><div class="notion-text notion-block-14688756397980f29c37f6e2c105bd82">其次对于有栈协程/用户线程，正是因为它运行在用户态，当涉及需要内核支援的部分时就很被动，例如面对阻塞式 I/O 时，无法察觉导致整个内核线程上的所有协程都被阻塞，或者需要一些比较高级的 CPU 亲和性调度时也难以实现</div><div class="notion-text notion-block-1468875639798079bd77f60092eb95af">以及如果当调度不是抢占式时，协程如果不让出执行权或者因为一些异常导致执行权没有正常让出，就会一直占用在那里，导致其他协程无法运行。当然 Go 都解决了上面这两个问题，但设计上更加复杂了</div><div class="notion-blank notion-block-146887563979800dbbc9f25b2ca75edd"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-14688756397980d9bb4ecc6f1897872a" data-id="14688756397980d9bb4ecc6f1897872a"><span><div id="14688756397980d9bb4ecc6f1897872a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14688756397980d9bb4ecc6f1897872a" title="Ref"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Ref</span></span></h3><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-1468875639798009be36f0d02b2506cf" href="https://mthli.xyz/coroutines-in-c/"><div><div class="notion-bookmark-title">使用 C 语言实现协程</div><div class="notion-bookmark-description">本文译自 PuTTY 的作者 Simon Tatham 的文章 Coroutines in C，作者在文中介绍了一种基于 达夫设备 的思想实现的协程。注意， 斜体部分为翻译过程中的补充 。考虑到译者的英文水平有限，部分语句的翻译与原文略有出入，强烈建议读者结合原文观看。 编写大型程序总是一件困难的事。其中常见的一个问题就是：如果你有一段代码正在生产数据，同时有另一段代码正在消费这些数据，它俩之间谁应该是 caller（调用者）谁应该是 callee（被调用者）呢 （译者注，即如何维护它俩之间的调用关系） ？ 这里有一段非常简单的 decompressor 代码，以及一段非常简单的 parser 代码： 两段代码都非常简单易懂。前者通过调用 emit() 每次产生一个字符；后者通过调用 getchar() 每次消费一个字符。只需要调用 emit() 和 getchar() 就可以传送数据了，所以 decompressor 产生的数据可以很轻易地传送到 parser 中。 在很多现代操作系统中，你可以在两个进程或线程之间使用管道（pipe）传输数据。在 decompressor 的 emit() 向管道中写数据，在 parser 的 getchar() 从同一个管道中读数据。简单粗暴，同时也非常繁琐和浪费性能。尤其是在你不想因为要做类似的事就得把程序拆分为多线程时。 在本篇文章中，我为这类结构性问题提供一种极具创造性的解决方案。 一种常见的解决方案是重写通信渠道两端中的一端，使之成为一个可以被调用的函数。以下分别是 decompressor 和 parser</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fmthli.xyz%2Ffavicon-32x32.png%3Fv%3Df165042f9f334601a4ff4a1f1b0b0de2?table=block&amp;id=14688756-3979-8009-be36-f0d02b2506cf&amp;t=14688756-3979-8009-be36-f0d02b2506cf" alt="使用 C 语言实现协程" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://mthli.xyz/coroutines-in-c/</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fmthli.xyz%2Fstatic%2Ff165042f9f334601a4ff4a1f1b0b0de2%2F99438%2Fprofile-pic.jpg?table=block&amp;id=14688756-3979-8009-be36-f0d02b2506cf&amp;t=14688756-3979-8009-be36-f0d02b2506cf" alt="使用 C 语言实现协程" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980388653c50b4c10dc7d" href="https://www.bilibili.com/video/BV1dv4y127YT/"><div><div class="notion-bookmark-title">【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili</div><div class="notion-bookmark-description">理解协程的最好方式就是实现它！最近面试开始流行问协程了，请同学们注意进厂时机？？？, 视频播放量 21613、弹幕量 46、点赞数 802、投硬币枚数 623、收藏人数 1338、转发人数 103, 视频作者 等疾风, 作者简介 C++职业拧螺丝；博客 Codesire-deng.github.io，相关视频：通过画图说一下协程的三种实现方式，我一直以为研究生一觉睡到中午自然醒是一件很小众的事情，大形势正在回暖，未来3-5年普通程序员能赶上的IT红利风口有哪些？卷对方向才能逆天改命！【马士兵】，从零开始刷力扣学C++——第二题：两数相加，MFC感觉已经被QT淘汰差不多了，但还是有很多企业在用，一些招聘要求还是提到MFC，怎么看这件事。，接下来登场的是有着职业生涯幻想大赛、评委拷问大赛、大学生卷王吹牛大赛、ppt模板美化大赛的全国大学生职业生涯规划大赛，从零开始的操作系统(21)  实现简单的任务/协程调度器，不知道做什么项目自我提高， 来试试LLVM教程的编译器项目，Bjarne Stroustrup ：程序员需要学习的5种类型编程语言，研二/大三吃透C++大厂面试真题300问，7天学完，让你面试少走99%弯路！【存下吧，附精心整理的面试宝典，学完即可面试上岗】</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F4ded1ab2f83a0dbafb10a9824850716e7ebdc504.jpg%40100w_100h_1c.png%4057w_57h_1c.png?table=block&amp;id=14688756-3979-8038-8653-c50b4c10dc7d&amp;t=14688756-3979-8038-8653-c50b4c10dc7d" alt="【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.bilibili.com/video/BV1dv4y127YT/</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F4ded1ab2f83a0dbafb10a9824850716e7ebdc504.jpg%40100w_100h_1c.png?table=block&amp;id=14688756-3979-8038-8653-c50b4c10dc7d&amp;t=14688756-3979-8038-8653-c50b4c10dc7d" alt="【协程革命】实现篇！无栈协程 有手就行？！ 全程字幕_哔哩哔哩_bilibili" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-14688756397980579f29cec2e5e65e3f" href="https://zhuanlan.zhihu.com/p/330606651"><div><div class="notion-bookmark-title">有栈协程与无栈协程</div><div class="notion-bookmark-description">如今协程已经成为大多数语言的标配，例如 Golang 里的 goroutine，JavaScript 里的 async/await。尽管名称可能不同，但它们都可以被划分为两大类，一类是有栈（stackful）协程，例如 goroutine；一类是无栈（stackless）协程，例如 async/await。 此处「有栈」和「无栈」的含义不是指协程在运行时是否需要栈，对于大多数语言来说，一个函数调用另一个函数，总是存在调用栈的；而是指协程是否可以在其 任意 嵌套函数中被挂起，此处的嵌套函数读者可以理解为子函数、匿名函数等。显然有栈协程是可以的，而无栈协程则不可以。似乎难以理解？不要慌，让我们先从函数调用栈开始讲起。 注意，文中所有讨论均基于 x86 平台，在 x86 平台中，调用栈的地址增长方向是从高位向低位增长的。并且本文选取 32 位系统作为讨论对象，因为 16 位已经过时了；而 64 位又稍显复杂，所占篇幅较大，但读者可以轻易地将本文内容推演至 64 位。 首先我们需要明确的是，调用栈是一段连续的地址空间，无论是 caller（调用方）还是 callee（被调用方）都位于这段空间之内。而调用栈中一个函数所占用的地址空间我们称之为「栈帧」（stack frame），调用栈便是由若干个栈帧拼接而成的。一个典型的调用栈模型如下图所示，图片来自 维基百科 ： 图中涉及到几个关键点，Stack Pointer 即栈顶指针，总是指向调用栈的顶部地址，该地址由 esp 寄存器存储；Frame Pointer 即基址指针，总是指向当前栈帧（当前正在运行的子函数）的底部地址，该地址由 ebp 寄存器存储。Return Address 则在是 callee 返回后，caller 将继续执行的指令所在的地址；而指令地址是由 eip 寄存器负责读取的，且 eip 寄存器总是预先读取了 当前栈帧中 下一条将要执行的指令的地址。</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-8057-9f29-cec2e5e65e3f&amp;t=14688756-3979-8057-9f29-cec2e5e65e3f" alt="有栈协程与无栈协程" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://zhuanlan.zhihu.com/p/330606651</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpic4.zhimg.com%2Fv2-ec808978c0bf85a74c055564b072097b_b.jpg?table=block&amp;id=14688756-3979-8057-9f29-cec2e5e65e3f&amp;t=14688756-3979-8057-9f29-cec2e5e65e3f" alt="有栈协程与无栈协程" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-146887563979806a9d97ee6af88af9cc" href="https://www.zhihu.com/question/50185085/answer/1342613525"><div><div class="notion-bookmark-title">出于什么样的原因，诞生了「协程」这一概念？</div><div class="notion-bookmark-description">其实从处理器的角度看协程更符合直觉，一个处理器核心本来就没法同时处理两件事情，要同时进行多件事情本来就需要正在运行的让出处理器，然后才能去处理另一件事情。只不过这个让出的过程是线程调度器主动抢占的。 所以线程调度器是假定不同的线程是毫无关系的，所以它平均的分配时间片让处理器雨露均沾。 ...</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-806a-9d97-ee6af88af9cc&amp;t=14688756-3979-806a-9d97-ee6af88af9cc" alt="出于什么样的原因，诞生了「协程」这一概念？" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.zhihu.com/question/50185085/answer/1342613525</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpicx.zhimg.com%2F23a5bca736788ab73e3bd58e56761cda_l.jpg%3Fsource%3D1940ef5c?table=block&amp;id=14688756-3979-806a-9d97-ee6af88af9cc&amp;t=14688756-3979-806a-9d97-ee6af88af9cc" alt="出于什么样的原因，诞生了「协程」这一概念？" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-146887563979809cadd4c292aedb0d04" href="https://zhuanlan.zhihu.com/p/80037638"><div><div class="notion-bookmark-title">协程究竟比线程能省多少开销？</div><div class="notion-bookmark-description">前文《进程/线程上下文切换会用掉你多少CPU？》 中中我们用实验的方式验证了Linux进程和线程的上下文切换开销，大约是3-5us之间。这个开销确实不算大，但是海量互联网服务端和一般的计算机程序相比，特点是： 高并发：每秒钟需要处理成千上万的用户请求 周期短：每个用户处理耗时越短越好，经常是ms级别的 高网络IO：经常需要从其它机器上进行网络IO、如Redis、Mysql等等 ...</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.notion.so/image/https%3A%2F%2Fstatic.zhihu.com%2Fheifetz%2Ffavicon.ico?table=block&amp;id=14688756-3979-809c-add4-c292aedb0d04&amp;t=14688756-3979-809c-add4-c292aedb0d04" alt="协程究竟比线程能省多少开销？" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://zhuanlan.zhihu.com/p/80037638</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fpic1.zhimg.com%2Fv2-dd5f446902a1118de55549d824c0bd01_xs.jpg%3Fsource%3D172ae18b?table=block&amp;id=14688756-3979-809c-add4-c292aedb0d04&amp;t=14688756-3979-809c-add4-c292aedb0d04" alt="协程究竟比线程能省多少开销？" loading="lazy" decoding="async"/></div></a></div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MemoryDB: Redis + Remote Log]]></title>
        <id>https://xxxuuu.me/post/memorydb</id>
        <link href="https://xxxuuu.me/post/memorydb"/>
        <updated>2024-11-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MemoryDB 是 Amazon 的一个 Redis 兼容的 KV 数据库，论文发表在 SIGMOD 2024 上]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-1298875639798065aeb4e6ec1258ed90"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-text notion-block-12d887563979807f80b6ef4c5f01124a">MemoryDB 是 Amazon 的一个 Redis 兼容的 KV 数据库，论文发表在 SIGMOD 2024 上</div><div class="notion-text notion-block-12d887563979805bbe4aed2e13640a3d">由于 Redis 是内存数据库，持久性保证比较弱，因此在使用 Redis 作为主存储的低延迟需求场景，大部分人会构建一套复杂的架构来同步或备份 Redis 的数据，Redis 自己也提供了复制和集群的功能，然而这其中的容错处理无法真正保证一致性和持久性。MemoryDB 诞生就是为了解决这个问题，提供一个<b>能保证持久性的高可用强一致 Redis，并且仍然保持内存级性能</b></div><div class="notion-blank notion-block-12d88756397980afaa3ee067b98d492b"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979805289dcffc7b2eed4db" data-id="12d887563979805289dcffc7b2eed4db"><span><div id="12d887563979805289dcffc7b2eed4db" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979805289dcffc7b2eed4db" title="架构"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">架构</span></span></h2><div class="notion-text notion-block-12d8875639798036bb8ec54f1e0ba673">首先回顾下 Redis 自身的持久化和一致性挑战：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12d887563979802c892af5d160ed77cb"><li>Redis 通过副本提供高可用，但这个过程是异步的，当主节点故障，副节点被提升为主节点而复制未完成时，就会永久丢失数据</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12d8875639798013bec0d94c35c41e7c"><li>Redis 包含 RDB 和 AOF 两种持久化方法，分别是快照和事务日志，对于 AOF 可以配置成每次写入都执行 <code class="notion-inline-code">fsync()</code> 以牺牲可用性为代价提供持久化。但多节点场景 AOF 不能提供任何保证，主节点故障时同样没有办法确保选举出的副本具有最新数据，最坏情况下这个副本可能没有任何数据，导致数据完全丢失</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12d88756397980c08fd3e200492d6840"><li>Redis 提供了 <code class="notion-inline-code">WAIT</code> 命令，通过该命令，客户端能阻塞等待数据同步复制直到完成。但 <code class="notion-inline-code">WAIT</code> 只对当前连接有效，不是全局的。对于其他客户端来说仍然无法保证观察到的数据一致性。同样，故障时也没法做任何保证</li></ol><div class="notion-text notion-block-12d887563979801e8237ef32b93a3dbe">简单来说，<b>Redis 故障转移会导致数据丢失</b></div><div class="notion-blank notion-block-139887563979809cbaaae56d8b38fc46"> </div><div class="notion-text notion-block-12d887563979807aad94f901673f65b7">MemoryDB 直接基于 Redis 构建，但并没有进行侵入性修改。这里通过加入一个分布式事务日志服务将两层实现解耦，Redis 只相当于这套架构底下的执行引擎</div><div class="notion-text notion-block-139887563979808cb3dfff263a312774">Redis 主节点自身的复制流会被拦截，重定向到事务日志中。在同步写入日志成功后对客户端返回，所有其他副本都只是重放日志</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12d8875639798038bd8afaad3d98bd5e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc20e8ae2-0be9-402e-a134-7c5ce4a0fa29%2Fimage.png?table=block&amp;id=12d88756-3979-8038-bd8a-faad3d98bd5e&amp;t=12d88756-3979-8038-bd8a-faad3d98bd5e&amp;width=768&amp;cache=v2" alt="MemoryDB 架构（话说这图真糊啊" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">MemoryDB 架构（话说这图真糊啊</figcaption></div></figure><div class="notion-blank notion-block-14088756397980d5a2eaceb9d714ecf5"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-1408875639798061a496d8a366fbab7b" data-id="1408875639798061a496d8a366fbab7b"><span><div id="1408875639798061a496d8a366fbab7b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1408875639798061a496d8a366fbab7b" title="持久性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">持久性</span></span></h2><div class="notion-text notion-block-14088756397980fc8aefe3adbc85db49">事务日志服务是 Multi-AZ 的，能提供持久化的存储，对主节点的操作会同步写入到事务日志中，其他副本就像普通的 Redis 复制过程一样读取事务日志</div><div class="notion-text notion-block-1408875639798070b80dc1e6c078dbec">可以看出这里事务日志是系统的核心，提供了完美的保证，但论文没有具体说明它是如何构建的，应该又是 Amazon 内部的黑盒服务</div><div class="notion-text notion-block-140887563979809eb1aaebfed5766d88">部分分布式数据库允许使用 Kafka 作为 Remote WAL，所以如果要做一个 MemoryDB 的开源实现，Kafka 应该可以承担这个事务日志服务的角色，但还是会有很多额外工作量</div><div class="notion-blank notion-block-14088756397980f69592cc64e91d2ebd"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-14088756397980aaa31ee110a48c67ca" data-id="14088756397980aaa31ee110a48c67ca"><span><div id="14088756397980aaa31ee110a48c67ca" class="notion-header-anchor"></div><a class="notion-hash-link" href="#14088756397980aaa31ee110a48c67ca" title="一致性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">一致性</span></span></h2><div class="notion-text notion-block-1408875639798043bfe9ecdf25d27f5d">MemoryDB 这里的日志是一种 WBL（Write-behind logging），选择 WBL 而不是 WAL 的原因是它天然和 Redis 的复制模型保持一致，例如 SPOP 之类的随机操作也能保证相同的结果</div><div class="notion-blank notion-block-1408875639798018bcbff0bc07649283"> </div><div class="notion-text notion-block-140887563979801abea6fd421d11b7d2">但这样会带来的问题是写入日志前故障会导致不一致，所以这里需要事务日志 ACK 了才能向客户端返回。MemoryDB 通过添加一层 client blocking 层作为 tracker 实现这一点，考虑到 MemoryDB 避免修改 Redis 的前提下，我猜应该类似这样的实现</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979804abb79e2f6312ba5b5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:288px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fbfc3d68f-ea82-430d-99cb-248f2d66a4bc%2F%25E6%259C%25AA%25E5%2591%25BD%25E5%2590%258D%25E7%25BB%2598%25E5%259B%25BE.drawio.png?table=block&amp;id=14188756-3979-804a-bb79-e2f6312ba5b5&amp;t=14188756-3979-804a-bb79-e2f6312ba5b5&amp;width=576&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14088756397980539ecefc568a168947">这里的好处同样是解耦了 Redis，即使事务日志写入未确认，仍然可以让 Redis 继续处理接下来的请求</div><div class="notion-text notion-block-140887563979809f8ef8de746992ac8c">但对于主节点的读操作，仍然需要等待其所依赖的写入被持久化，因此在 tracker 需要去 trace 每个尚未被写入日志的 key。只对主节点读写可以提供线性一致性，也允许直接从副本读，这时提供的是顺序一致性，跨多个副本的读取则是最终一致的</div><div class="notion-blank notion-block-14088756397980ae9654e8e95f0f65aa"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979807e94c8d96b7619675c" data-id="12d887563979807e94c8d96b7619675c"><span><div id="12d887563979807e94c8d96b7619675c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979807e94c8d96b7619675c" title="可用性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">可用性</span></span></h2><div class="notion-text notion-block-1408875639798089bad1cad8045e11cd">通过前面的手段，已经能保证主节点正常工作时的持久性和一致性，接下来需要再考虑下分布式系统中最重要的容错处理，主要是以下三个问题：</div><ol start="1" class="notion-list notion-list-numbered notion-block-1408875639798015a2b4e8f7663b46ce"><li>故障检测：副本如何知道主节点故障</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-1408875639798054a61ad9729ec01671"><li>选举方式：哪些副本会被提升为主节点</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14088756397980ca9b57dd2f45869541"><li>故障恢复：临时故障的节点如何恢复</li></ol><div class="notion-blank notion-block-14088756397980ffb8b2e4bb4374bc41"> </div><div class="notion-text notion-block-1408875639798084be23d54c8f286921">MemoryDB 完美利用事务日志实现了以上三点。事务日志中除了正常数据的复制流，还会包括一些控制日志</div><div class="notion-text notion-block-1408875639798004b6cef2446a3f80cb">故障检测的方法就是典型的心跳，但这里心跳是作为一条日志，主节点定期写入心跳/租约日志，如果副本未能在租约期限内观测到这类日志，就认为主节点宕机，触发选举</div><div class="notion-callout notion-yellow_background_co notion-block-14188756397980d69b46d064fa637a1a"><div class="notion-page-icon-inline notion-page-icon-span"><span class="notion-page-icon" role="img" aria-label="❓">❓</span></div><div class="notion-callout-text"><div class="notion-text notion-block-c91a7dc68b084f2b91afff9c291a0c1b">这里感觉会有些时钟问题</div></div></div><div class="notion-blank notion-block-140887563979802daefcefb97cd94599"> </div><div class="notion-text notion-block-1408875639798097a233e83b26700cf5">其次是具体选主方式，选主时所有副本都只会和日志服务交互，不会互相通信，因此这里并不是采用 quorum 之类的投票方式，而同样是采用写入日志的方法</div><div class="notion-text notion-block-141887563979807891f4f31333838f93">每个日志都会有一个唯一 ID，且 append 新日志时，必须指定前序日志 ID。因此多个副本竞争选主时，只有第一个竞选日志是有效的，这也确保了能竞选的副本必然拥有最新数据。新主上台后会通过 gossip 协议通知其他节点，这部分是采用 Redis Cluster 自己的实现</div><div class="notion-blank notion-block-14188756397980b6b04bf0cdcc6b2c00"> </div><div class="notion-text notion-block-141887563979808f9715e6ce6ac40a02">最后，当故障的主节点恢复时，由于租约过期，它会自行下台重新作为副本工作。除了利用心跳日志实现的故障检测，MemoryDB 通过带外监控服务的心跳检测和内部 Redis Cluster 的 gossip 结合来获得一个集群视图，管控面会在其认为故障的节点上重启 Redis 进程或启动新副本轮替该节点</div><div class="notion-text notion-block-141887563979802da7fad4ccb6291952">MemoryDB 做了很多优化去减少 MTTR（Mean time to recovery）。在运行时，Redis 自身的持久化/快照（RDB）机制也在工作，快照被上传到 S3 中，新副本启动或恢复时会通过 S3 获得快照快速赶上进度然后开始回放事务日志</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14088756397980e39143ffcc1806f24d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9f382b69-dd91-4ea1-909c-793eeaef7f63%2Fimage.png?table=block&amp;id=14088756-3979-80e3-9143-ffcc1806f24d&amp;t=14088756-3979-80e3-9143-ffcc1806f24d&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-140887563979807fa265ef8743dd7b56">Redis 的快照是通过 Linux 的 fork 写时复制特性来实现的，虽然整体开销已经很小，但也不可避免地带来一些性能抖动，包括瞬时的内存占用</div><div class="notion-text notion-block-14188756397980a1a93be2d938b064bc">MemoryDB 的优化相当于把写时复制从进程扩展到集群层面，快照时会启动一个 off-box 临时集群，临时集群和副本恢复一样，先恢复数据到最新状态，再进行快照。虽然看起来有点重，成本很高，但优点是能完全避免快照导致用户集群产生抖动以及这期间的可用性降低两个问题</div><div class="notion-callout notion-yellow_background_co notion-block-14188756397980fe9ae3d054553db05b"><div class="notion-page-icon-inline notion-page-icon-span"><span class="notion-page-icon" role="img" aria-label="💡">💡</span></div><div class="notion-callout-text"><div class="notion-text notion-block-c68f894d33d14e0ebb0f6098e492c5d6">关于这一点，还可以看看别家的解决方案，例如阿里云直接修改了内核把 fork 时开销最多的的页表复制过程放到子进程中：<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.vldb.org/pvldb/vol16/p1033-chen.pdf">Async-fork: Mitigating Query Latency Spikes Incurred by the Fork-based Snapshot Mechanism from the OS Level</a></div></div></div><div class="notion-blank notion-block-1408875639798038866bda9256578c95"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d88756397980548322d7d948700acf" data-id="12d88756397980548322d7d948700acf"><span><div id="12d88756397980548322d7d948700acf" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d88756397980548322d7d948700acf" title="性能"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能</span></span></h2><div class="notion-text notion-block-1418875639798018badcd6eed4fe422d">最后是例行环节 evaluation</div><div class="notion-blank notion-block-141887563979808b85ddf163a0f02c0c"> </div><div class="notion-text notion-block-14188756397980d994ddc4fb42912833">只读(a)和只写(b)负载：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1418875639798022a5d3dc5667a7f2d2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F85832d91-1442-4d30-a09f-b8357d87adbc%2Fimage.png?table=block&amp;id=14188756-3979-8022-a5d3-dc5667a7f2d2&amp;t=14188756-3979-8022-a5d3-dc5667a7f2d2&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980b1b627cae28ba8d78f">写请求由于有对事务日志的同步写入，性能基本是 Redis 的 1/3 到 1/2 左右，符合预期。但读性能没有理由 MemoryDB 能比 Redis 还快啊？感觉有些猫腻，论文里说是因为 MemoryDB 通过优化过的 I/O 多路复用聚合了客户端链接，但我对此保留疑问</div><div class="notion-blank notion-block-141887563979801495acec79fd4813c8"> </div><div class="notion-text notion-block-14188756397980939ed3c92b6068eacf">只读(a)、只写(b)和混合读写(c)的时延表现，基本符合预期：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-14188756397980168705e764ae36bcf0"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2b826c0e-8de6-44a1-9ad2-ac24b15a0c0b%2Fimage.png?table=block&amp;id=14188756-3979-8016-8705-e764ae36bcf0&amp;t=14188756-3979-8016-8705-e764ae36bcf0&amp;width=1415.9658203125&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-141887563979802481ecf7e5f4e21a3d"> </div><div class="notion-text notion-block-14188756397980db8095da56a4bc0e3b">接下来是快照，负载是 2000w 个 500 bytes 的 key，节点配置 2c16G。快照同时 100 个 client 执行 GET，20 个 client 执行 SET</div><div class="notion-text notion-block-141887563979803abd39d774b44417d0">Redis 在快照期间的请求的延迟(a)和吞吐量(b)影响，以及内存占用情况：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979802a8de9f5c33426d156"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2b3b487b-c4c7-430f-80cc-d0c1ab6f5df5%2Fimage.png?table=block&amp;id=14188756-3979-802a-8de9-f5c33426d156&amp;t=14188756-3979-802a-8de9-f5c33426d156&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980199157eb9a0a552cf0">MemoryDB 在快照期间的延迟(a)和吞吐量(b)：</div><div class="notion-blank notion-block-14188756397980188ee9f916efef1b6e"> </div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-141887563979801ea64cd8ba1480ba0c"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F07c212c9-11a1-40a0-a226-8a42735f85fd%2Fimage.png?table=block&amp;id=14188756-3979-801e-a64c-d8ba1480ba0c&amp;t=14188756-3979-801e-a64c-d8ba1480ba0c&amp;width=1415.95166015625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-14188756397980c5bb6fe39d33c5af6b">也符合预期，MemoryDB 非常稳定，不过看起来显然也田忌赛马了，没有评估这启动一个临时集群的成本开销，整个快照过程也慢不少</div><div class="notion-blank notion-block-141887563979808384afdeab35544309"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d887563979807c9611fc938591b570" data-id="12d887563979807c9611fc938591b570"><span><div id="12d887563979807c9611fc938591b570" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d887563979807c9611fc938591b570" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h2><div class="notion-text notion-block-14188756397980f6bc14f3f33a2f4ee8">总结一下几点：</div><ol start="1" class="notion-list notion-list-numbered notion-block-1418875639798006899ec53dcc29cb16"><li>Redis 仅仅作为执行引擎，解耦实现</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-141887563979802a88afd02e61af4adf"><li>通过事务日志（transaction log）同步写保证持久性</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-14188756397980d88f63f740dca9eaa8"><li>tracker 追踪未完成持久化的 key，提供线性一致性</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-14188756397980ee9434c0d2b9e161ae"><li>围绕 log 实现租约和选主</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-14188756397980618f0feb583f5c6e14"><li>快照卸载到 off-box 集群上执行，避免抖动</li></ol><div class="notion-blank notion-block-141887563979808d90f3d2cf6a15b648"> </div><div class="notion-text notion-block-12d8875639798003a689f9e865c65c56">总体来说，是很巧妙的想法和实现，仅仅围绕 log 就实现了这一切。而且从兼容 Redis 这一核心目的角度来看，通过 log 的解耦，能做到极低的侵入性，也就意味着更高的兼容性和可维护性，是非常好的工程实践。大多数开源 fork 魔改到最后，gap 越来越大，再要保持兼容的话维护成本就会很高</div><div class="notion-blank notion-block-14188756397980709d92effe411f181f"> </div><div class="notion-text notion-block-14188756397980f78685fcf5fab9dad7">另一方面也引发了我关于 log 的更多思考，大多数数据系统都会有 WAL 或其他各种 log，这种基于 log 复制的 idea 在共识算法中也很常见。MemoryDB 展示了一个如何通过这些 log 扩展系统的完美例子，再回过头来看其他系统、设计和解决方案，不禁会想是不是也能在 log 上迸发出无限可能</div><div class="notion-blank notion-block-140887563979803cabfac50441fa0657"> </div><div class="notion-text notion-block-140887563979807e9f88cbad08c534c7">之后如果有时间，可能打算去复刻一个 MemoryDB 的实现</div><div class="notion-blank notion-block-12d887563979805a8e7afbcb7fe1157a"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12d8875639798031afd1fc31e91d1b2c" data-id="12d8875639798031afd1fc31e91d1b2c"><span><div id="12d8875639798031afd1fc31e91d1b2c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12d8875639798031afd1fc31e91d1b2c" title="Ref"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Ref</span></span></h2><ul class="notion-list notion-list-disc notion-block-12d887563979808e844efa6c6a307e58"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://assets.amazon.science/e0/1b/ba6c28034babbc1b18f54aa8102e/amazon-memorydb-a-fast-and-durable-memory-first-cloud-database.pdf">Amazon MemoryDB: A Fast and Durable Memory-First Cloud Database</a></li></ul><ul class="notion-list notion-list-disc notion-block-12d88756397980c6b96cd84821879abe"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://aws.amazon.com/cn/blogs/china/amazon-memorydb-a-brief-introduction-to-the-sigmod-2024-paper/">溯本追源 – Amazon MemoryDB SIGMOD 2024 论文解读 | 亚马逊AWS官方博客</a></li></ul><ul class="notion-list notion-list-disc notion-block-12d887563979804fafb3d33ab8f81c51"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.xiyoulinux.com/blog/104106524">从一到无穷大 #27 从Amazon MemoryDB视角看稳定binlog带来的无限可能性</a></li></ul><div class="notion-blank notion-block-12d8875639798056a5d6e329712464e9"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[应该在 DBMS 中使用 MMAP 吗？]]></title>
        <id>https://xxxuuu.me/post/db-mmap</id>
        <link href="https://xxxuuu.me/post/db-mmap"/>
        <updated>2024-10-27T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-94e03781e74c41d089f7df2e2a7ad93f"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-fa45317e598544ada6c59ed6426453d2" data-id="fa45317e598544ada6c59ed6426453d2"><span><div id="fa45317e598544ada6c59ed6426453d2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#fa45317e598544ada6c59ed6426453d2" title="Buffer Pool 和 MMAP"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Buffer Pool 和 MMAP</span></span></h2><div class="notion-text notion-block-f9fbf6dd0ea3468b96f411874b9499c6">对于（基于磁盘的）数据库来说，缓存（cache + buffer）管理是很重要的，因为次级存储速度很慢，必须设计一个缓存机制才能让数据库高效地进行读写</div><div class="notion-blank notion-block-5788384de0454fc59c2067a7f7c7864a"> </div><div class="notion-text notion-block-1a5eb03f8c344421848aabb573c609e5">传统的方法是数据库实现一个缓冲池（Buffer Pool），像 CMU 15-445 这样的数据库课程，通常第一个 Lab 就是实现一个 Buffer Pool 作为页面和缓存管理的组件</div><div class="notion-text notion-block-7d83d2ff3ac446a88d6a8c52f9f6c078">另一个方法是将一切交给操作系统，也就是使用 <code class="notion-inline-code">mmap()</code> 系统调用，mmap 将文件映射到内存地址空间上，程序透明地对内存进行访问，由内核负责管理页面的加载和刷写</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-e633f5c6aac94be2be6ce7d79fca0959"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F0bb67f4b-fc66-4c7f-8b45-af39e6585204%2Fimage.png?table=block&amp;id=e633f5c6-aac9-4be2-be6c-e7d79fca0959&amp;t=e633f5c6-aac9-4be2-be6c-e7d79fca0959&amp;width=1366.7044677734375&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-dd47c10093494e7783c6cee5d149a144">使用 mmap 能大大简化开发，并且能避免 <code class="notion-inline-code">read</code>/<code class="notion-inline-code">write</code> 等系统调用和缓冲区拷贝的开销，理论上有更高的性能。因此不少数据库或存储系统也使用了 mmap，但也有一些不同的观点</div><div class="notion-blank notion-block-129887563979801a903ed851e11dc8d5"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-1bb19bbca4e24e7fbde107647c830068" data-id="1bb19bbca4e24e7fbde107647c830068"><span><div id="1bb19bbca4e24e7fbde107647c830068" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1bb19bbca4e24e7fbde107647c830068" title="反方：不应该使用 MMAP"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">反方：不应该使用 MMAP</span></span></h2><div class="notion-text notion-block-12a88756397980d6b028d5a43aba1ba6">反方出自 CIDR 2022 上一篇比较短的 paper：<em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf">Are You Sure You Want to Use MMAP in Your Database Management System?</a></em> 作者之一是 Andy Pavlo，刷过 CMU 15-445 的同学肯定不陌生</div><div class="notion-blank notion-block-12a88756397980198f24c8b5d5976365"> </div><div class="notion-text notion-block-129887563979800e9092fe48793ab545">PS：页眉有惊喜</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12988756397980d39666e98f30e6c92f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe6a32e12-65cc-426e-881b-8c2a4eb6b942%2Fimage.png?table=block&amp;id=12988756-3979-80d3-9666-e98f30e6c92f&amp;t=12988756-3979-80d3-9666-e98f30e6c92f&amp;width=4372&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1c1d3016de80489a973ae50a76d80cf2"> </div><div class="notion-text notion-block-12a88756397980fe9a1dd161acc907df">文章的主要观点是在 DBMS 内不应该使用 mmap，论文提出，mmap 存在一些阴暗面（dark side）会带来棘手的问题，而为了解决这些问题，在工程上带来的复杂性，会使得 mmap 本身的收益（简单和性能）都被抵消</div><div class="notion-blank notion-block-12988756397980bdb30af9daef787377"> </div><div class="notion-text notion-block-12988756397980728ff0e1303debe18d">论文具体讨论了 mmap 的以下几宗罪</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980e9ba8fce5f90f1c33d" data-id="12988756397980e9ba8fce5f90f1c33d"><span><div id="12988756397980e9ba8fce5f90f1c33d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980e9ba8fce5f90f1c33d" title="事务安全"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">事务安全</span></span></h3><div class="notion-text notion-block-12988756397980b6ac48d7d2a7cef530">mmap 对程序来说是透明的，何时将脏页刷到磁盘上取决于操作系统。虽然通过 <code class="notion-inline-code">msync</code> 可以强制刷盘，但没有办法能够阻止刷盘（这相当于强制数据库是 steal policy 的），也无法在静默刷盘时得到通知</div><div class="notion-blank notion-block-12b88756397980f1a397eed12112b0f2"> </div><div class="notion-text notion-block-12a88756397980ebb0fdda2dc689f849">为此数据库就需要一些复杂的协议来保证事务安全，论文总结了三种处理方法，都是写时复制的（Copy-on-Write，COW）想法：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12a8875639798091b36ee147c41a2441"><li>内核写时复制</li><ol class="notion-list notion-list-numbered notion-block-12a8875639798091b36ee147c41a2441"><div class="notion-text notion-block-12a887563979807c976fccd38729687c">通过 <code class="notion-inline-code">MAP_PRIVATE</code> flag 创建 mmap，映射出来的地址空间就是写时复制的，不会作用到底层的文件。通过这个方法，可以创建一个私有的副本工作区用来修改数据，最后在私有工作区更新的数据并写入 WAL，再传播修改回主工作区</div><div class="notion-text notion-block-12b88756397980bead6eee0fe8cf2b25">这里要确保已提交事务的更新必须在其他冲突事务运行之前就传播到主工作区上，需要一些额外的数据结构去追踪脏页</div><div class="notion-text notion-block-12b887563979806c8b32daefe90dc2bf">另外因为是 COW 的，私有工作区会随着写入逐渐增长，最终可能会在内存中存在两个完整的数据库副本，可以通过 <code class="notion-inline-code">mremap</code> 定期收缩私有工作区的大小避免无限扩张，但同样有上面的问题，需要确保脏页传播到主工作区上，并在此期间阻止并发更新</div><div class="notion-text notion-block-12b8875639798090aa04d6bc0778e0dd">MongoDB 的 MMAPv1 引擎使用了这种方法</div></ol></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12a887563979804394ecd34e0eb6e1d1"><li>用户态写时复制</li><ol class="notion-list notion-list-numbered notion-block-12a887563979804394ecd34e0eb6e1d1"><div class="notion-text notion-block-12b887563979800aa9fce24e6f24cdf8">第二种方法类似，但是在用户态进行。待更新页面从 mmap 区域手动复制到另一块单独维护的缓冲区上进行更新并写入 WAL，然后再复制回 mmap 区域</div><div class="notion-text notion-block-12b88756397980b0a829f0b2658617ed">SQLite，RavenDB 使用了类似的方法</div></ol></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12a88756397980a3a2d7ee3ade906c2a"><li>影子分页</li><ol class="notion-list notion-list-numbered notion-block-12a88756397980a3a2d7ee3ade906c2a"><div class="notion-text notion-block-12b88756397980c88c73cde1817c776e">影子分页类似一种 swapping pointer 的做法，通过 mmap 映射两份出副本，其中一个是主副本。当要修改时将页面复制到影子副本上进行更新，<code class="notion-inline-code">msync</code> 刷盘后 swap pointer 将影子副本变为主副本，原主副本变为新的影子副本</div><div class="notion-text notion-block-12b88756397980ef83b5e8284bd610cb">LMDB 使用了这种方法，但只允许单个写者进行更新</div></ol></ol><div class="notion-blank notion-block-12b887563979806c8fa4fc304a2de619"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980cabb7def893e5bf4f2" data-id="12988756397980cabb7def893e5bf4f2"><span><div id="12988756397980cabb7def893e5bf4f2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980cabb7def893e5bf4f2" title="I/O 停顿"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">I/O 停顿</span></span></h3><div class="notion-text notion-block-12b88756397980bd8b32eb9e05746d9e">很多 DBMS 都使用了异步 I/O（例如 libaio 或 io_uring），例如对 B+ Tree 的叶子节点扫描可以通过异步 I/O 访问以避免非连续页面的阻塞读取导致的延迟。但 mmap 是不支持异步的</div><div class="notion-text notion-block-12b8875639798093b385eec2d68342c9">此外，操作系统可能会随时会将页面驱逐，再次访问就会导致缺页中断，会有明显的性能抖动。DBMS 无法知道页面是否真正在内存中，虽然可以使用 <code class="notion-inline-code">mlock</code> 将页面 pin 在内存中，但这又需要实现一些额外的页面管理工作</div><div class="notion-text notion-block-12b88756397980dab056c7bbd48d676b">或者通过 <code class="notion-inline-code">madvise</code> 来告知操作系统应用的访问模式以尽量避免接下来访问的页面被驱逐，但这只是一种 “advise” 而不是强力的控制，并且也只提供了简单的 <code class="notion-inline-code">MADV_SEQUENTIAL</code>、<code class="notion-inline-code">MADV_RANDOM</code> 和 <code class="notion-inline-code">MADV_WILLNEED</code> 等几个 flag，无法精细管理</div><div class="notion-blank notion-block-12b887563979806ba75eecd7d5a2dab5"> </div><div class="notion-text notion-block-12b887563979803c9a2dc4ceb7a2daf5">也许还可以创建额外的线程去做预取以避免阻塞主线程，但这额外的复杂性完全违背了使用 mmap 的初衷</div><div class="notion-blank notion-block-12988756397980b4adfdd5d8f7603e44"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-1298875639798046857bff3c95abcbe5" data-id="1298875639798046857bff3c95abcbe5"><span><div id="1298875639798046857bff3c95abcbe5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1298875639798046857bff3c95abcbe5" title="错误处理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">错误处理</span></span></h3><div class="notion-text notion-block-12b88756397980a8b5b5e9884205677c">DBMS 的一个核心职责是确保数据的完整性，大多数 DBMS 都会在各种级别的数据上维护 checksum，例如 SQL Server 在页面级别上维护了 checksum，从磁盘上读取数据时就会进行校验</div><div class="notion-blank notion-block-12b887563979809c840cff48282d23d1"> </div><div class="notion-text notion-block-12b8875639798073aafaee04c51f4899">但使用 mmap 的话难以实现，原因还是 DBMS 无法知道页面到底在哪里，没有一个明确的边界隔离内存和磁盘访问。操作系统可能在任意时刻将页面驱逐，下次访问再透明地重新从磁盘读取，因此必须每次进行页面访问都重新校验才能确保安全，但显然很多时候这种校验是不必要的</div><div class="notion-text notion-block-12b887563979800aa3f7e31462b91913">另外从语言角度考虑，如果使用了非内存安全的语言，有可能在不经意间破坏了 mmap 映射区域的内存数据，而这些错误的数据又会被静默地写入磁盘，永久损坏。如果是 Buffer Pool 实现，则可以在刷盘时显式检查</div><div class="notion-blank notion-block-12b88756397980bb8be9ca49714c04f3"> </div><div class="notion-text notion-block-12b887563979802bb964e3ef612d7ec8">mmap 这种透明性的「优点」也会导致在代码里更难进行 I/O 错误处理。Buffer Pool 实现中 I/O 交互只局限于它自身，可以很轻易地包装对 I/O 错误的处理。但 mmap 中任意时刻的内存访问都可能导致 I/O 错误，给异常处理流带来很大的不便</div><div class="notion-blank notion-block-129887563979809abc62f48973add07e"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12988756397980e39ed5e8af4e22fd67" data-id="12988756397980e39ed5e8af4e22fd67"><span><div id="12988756397980e39ed5e8af4e22fd67" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980e39ed5e8af4e22fd67" title="性能问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能问题</span></span></h3><div class="notion-text notion-block-12b887563979801aa04fe88c7f631a74">最后，mmap 真的性能更好吗？</div><div class="notion-blank notion-block-12b88756397980dcab37d7d68377ca2f"> </div><div class="notion-text notion-block-12b88756397980ba90cbf4bacf66baab">传统观点认为 mmap 性能好的点在于避免了 <code class="notion-inline-code">read</code>/<code class="notion-inline-code">write</code> 的系统调用，以及避免内核和用户态缓冲区来回拷贝的开销（这也降低了内存使用）。从这些点来看，随着 NVMe SSD 的提升，理论上 mmap 和传统 I/O 方法的差距还会进一步扩大</div><div class="notion-blank notion-block-12b887563979806fa0e3d7c9c7605ca1"> </div><div class="notion-text notion-block-12b88756397980d898b2ddf29c713237">但论文指出，内核的页面驱逐机制成为主要瓶颈，该机制无法扩展到更多的线程和更大带宽的存储设备上。除非没有内核级别的重大重写，这个问题无法解决。具体来说有下面三个瓶颈：</div><ol start="1" class="notion-list notion-list-numbered notion-block-12b8875639798065acd4c40cff49a5b0"><li>页表竞争：内核需要同步页面，在大量更新的时候会有显著竞争开销</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12b8875639798097965ed32e2885e175"><li>单线程页面驱逐：内核使用单线程进行页面驱逐，扩展性受限</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12b887563979801bacc2cd214518bfc1"><li>TLB shootdown：驱逐页面时，内核还要清理每个核心上的 TLB 项，这里多核设备的核间中断会有高昂的开销，需要数千个周期</li></ol><div class="notion-text notion-block-12b887563979809e8638ca163e9c8a11">
OLTP 比较常见的随机读负载实验中，mmap 如果使用 <code class="notion-inline-code">MADV_RANDOM</code> 的 hint，在一开始还能达到 fio 的基线性能，但马上就会 I/O 跌 0 将近 5 秒，最终恢复到基线性能的一半。右图可以看到此时正好是 Page cache 被填满，开始驱逐页面</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12b88756397980af9b95e0d8d5496145"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fca6f2a55-8f94-4ce6-a6ff-9816dc9898ef%2Fimage.png?table=block&amp;id=12b88756-3979-80af-9b95-e0d8d5496145&amp;t=12b88756-3979-80af-9b95-e0d8d5496145&amp;width=4112&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-12b8875639798015bc83ec2327647b01">对于 OLAP 场景的顺序读负载试验，<code class="notion-inline-code">MADV_SEQUENTIAL</code> hint 的 mmap 在一开始还能维持较高的性能，但同样在 20 秒左右 Page cache 被打满，性能严重下降。而在同时使用 10 块 SSD 的场景，mmap 性能和只有 1 块 SSD 时几乎完全一样，说明 mmap 性能无法随着硬件线性提升</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12b8875639798082830adc6913a96ed5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4bffeaa1-bcba-4bbc-baf3-2a9c49313af1%2Fimage.png?table=block&amp;id=12b88756-3979-8082-830a-dc6913a96ed5&amp;t=12b88756-3979-8082-830a-dc6913a96ed5&amp;width=4252&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12c887563979806886f8d8c226ce3808"> </div><div class="notion-text notion-block-12b88756397980b8b954dcd04f53a66a">不过在我看来这个 benchmark 应该得加上 Buffer Pool 的数据，只和 fio 来比较显然是不公平的，fio 读写方式和真实数据库的负载不同，Buffer Pool 肯定也远达不到 fio 压测的基线性能</div><div class="notion-blank notion-block-12c887563979806f9d71d0ab8b222d28"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12988756397980ba9b7eefe1c7fdde0a" data-id="12988756397980ba9b7eefe1c7fdde0a"><span><div id="12988756397980ba9b7eefe1c7fdde0a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12988756397980ba9b7eefe1c7fdde0a" title="正方：使用 MMAP 完全没问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">正方：使用 MMAP 完全没问题</span></span></h2><div class="notion-text notion-block-12a887563979803285aaca3305cfa36f">RavenDB 的 CEO, Oren Eini 发表了一篇文章回复：<em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://ayende.com/blog/196161-C/re-are-you-sure-you-want-to-use-mmap-in-your-database-management-system">Re: Are You Sure You Want to Use MMAP in Your Database Management System?</a></em></div><div class="notion-text notion-block-12c88756397980d19f3be0ac276f1873">RavenDB 的 Voron 存储引擎使用 mmap 构建，他们还出了一本<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/ayende/libgavran">关于如何构建存储引擎的书</a>，其内部也使用了 mmap</div><div class="notion-blank notion-block-12c88756397980dcbffffa1e7081310e"> </div><div class="notion-text notion-block-12c88756397980dcbae5c869c188e5ae">文章首先指出了 Buffer Pool 要做的事情并不少，而且也对实现有一定要求，如果不是高度优化的实现，不会有好的性能，而在 mmap 这些都能由操作系统来保障</div><div class="notion-blank notion-block-12c8875639798074a685f236b1817562"> </div><div class="notion-text notion-block-12c887563979801981edef988504a1c8">接下来，文章对四个问题进行了逐一反驳</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980a895f7e01867822607" data-id="12c88756397980a895f7e01867822607"><span><div id="12c88756397980a895f7e01867822607" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980a895f7e01867822607" title="事务安全"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">事务安全</span></span></h3><div class="notion-text notion-block-12c88756397980499521e5865fe9ca32">mmap 确实无法知道数据何时落盘，但作者认为这本质上与使用 Buffer Pool 时没有区别，在 Buffer Pool 中也同样需要考虑页面的驱逐和各种管理</div><div class="notion-text notion-block-12c88756397980f68772d2340fdcc080">文中还提到 RavenDB 使用写时复制的主要目的也是为了方便实现 MVCC，更容易处理并发事务。并且单写者模型在 DBMS 中并不罕见</div><div class="notion-blank notion-block-12c88756397980e38057c5dc06a974e8"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980aaa2eaddf259ca9447" data-id="12c88756397980aaa2eaddf259ca9447"><span><div id="12c88756397980aaa2eaddf259ca9447" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980aaa2eaddf259ca9447" title="I/O 停顿"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">I/O 停顿</span></span></h3><div class="notion-text notion-block-12c8875639798024a356e40a096833a9">作者承认关于缺页导致的 I/O 抖动是使用 mmap 必须要处理的最重要的问题，但实际情况并没有想象中那么严重。RavenDB 中通过在专用线程上调用 <code class="notion-inline-code">madvise(WILL_NEED)</code>，他认为这和异步 I/O 的方式没什么不同</div><div class="notion-blank notion-block-12c88756397980e19663c27556f86066"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c887563979806e918fe4d24fb0c307" data-id="12c887563979806e918fe4d24fb0c307"><span><div id="12c887563979806e918fe4d24fb0c307" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c887563979806e918fe4d24fb0c307" title="错误处理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">错误处理</span></span></h3><div class="notion-text notion-block-12c8875639798083b949c12c4fe0fb07">校验和的问题，即使在 Buffer Pool 中也会存在，因为数据可能从 cache 中读取，但实际上在磁盘中损坏；RavenDB 只会进行一次校验和检查，不需要每次都检查，两者没什么差别</div><div class="notion-text notion-block-12c887563979804792bcd92af5e844eb">对于 I/O 错误，作者认为在数据库中处理该类错误的唯一答案是 crash 掉整个数据库然后从头恢复运行，因此在这里不需要什么额外工作</div><div class="notion-blank notion-block-12c88756397980939c88d10f38690a7e"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-12c88756397980bbaef4fa08b65e579e" data-id="12c88756397980bbaef4fa08b65e579e"><span><div id="12c88756397980bbaef4fa08b65e579e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c88756397980bbaef4fa08b65e579e" title="性能问题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能问题</span></span></h3><div class="notion-text notion-block-12c88756397980869602d58e3b130f7f">对于 mmap 的三个性能瓶颈:</div><ol start="1" class="notion-list notion-list-numbered notion-block-12c88756397980d78fe4c5e7b0cebf50"><li>页表竞争：是一个<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://ravendb.net/articles/production-postmortem-the-guinness-record-for-page-faults-high-cpu">已修复的内核 bug</a>，现在无需操心</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-12c887563979809690b0d7260b927574"><li>单线程页面驱逐：RavenDB 从未遇到过，脏页是少数，页面驱逐的压力并不大</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-12c88756397980a8a9c3ff8ddb208bf8"><li>TLB shootdown：触发这个问题需要极快的 I/O 加上远超内存大小的工作集</li></ol><div class="notion-text notion-block-12c887563979802a824ec1b3cc40a44a">作者认为论文中的基准测试假设了不使用 mmap（也就是使用 Buffer Pool）的情况下没有其他成本，这是不现实的，例如使用 Buffer Pool，也同样需要考虑这些页面驱逐的问题，只不过现在是由 Buffer Pool 来负责。这个观点我是赞同的，前文的基准测试确实没有体现出 Buffer Pool 的对比</div><div class="notion-blank notion-block-12c88756397980329e3fda3cb2e51728"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-12a887563979804c9010d0af55e5569b" data-id="12a887563979804c9010d0af55e5569b"><span><div id="12a887563979804c9010d0af55e5569b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12a887563979804c9010d0af55e5569b" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h2><div class="notion-text notion-block-12c887563979801caaadfbc75072f3ad">两篇文章看下来，个人感觉 Oren Eini 反驳的文章中内容稍显空洞，没有什么特别有力的证据或数据支撑，例如异步 I/O 性能那块没有给出具体数据，在我个人的经验中异步 I/O 还是能带来很大的提升的，除非这里的数据集很小，能大部分都缓存命中</div><div class="notion-text notion-block-12c88756397980f8a36ac3438606c126">但这篇文章也可以作为一个不同角度的参考，有些地方还是值得思考的，比如关于错误处理，另一个相似的问题是，对于底层软件，内存分配失败的情况下应该如何处理？mmap 无法像手动实现 Buffer Pool 一样限制缓存容量，可能更需要考虑这个问题</div><div class="notion-text notion-block-12c8875639798051948accc0ba11f41a">另外还可以参考下 codedump 老师的这篇 blog：</div><ul class="notion-list notion-list-disc notion-block-12c887563979802ab722deef829acfa2"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.codedump.info/post/20220327-weekly-11/">周刊（第11期）：mmap适用于存储引擎吗？ - codedump的网络日志</a></li></ul><div class="notion-blank notion-block-12c8875639798003b771ff37be2da95e"> </div><div class="notion-text notion-block-12c88756397980e48ac8e9255219326b">回到 mmap 上，使用 mmap 确实需要考虑比想象中更多的问题，但随着内核发展，某些痛点也逐渐被解决了，例如现在内核支持了原子 <code class="notion-inline-code">msync</code> 调用，如果它失败了，就会禁用内核的透明页驱逐功能，这样就不需要再操心一些使用 mmap 带来的事务安全问题了</div><div class="notion-text notion-block-12c88756397980ffba8fd1164cc68022">但总的来说我认为是否使用 mmap 是一个 trade-off，如果你希望系统更加简单，有更低的开发成本，那就使用 mmap，把一切都交给内核；但反之这也可能会让内核实现成为整个系统的瓶颈，因为内核是 general-purpose 的实现，而不是针对数据库的 special-purpose 的实现。当内核会成为你的瓶颈，或需要更多细粒度的控制，为此需要进行大量改造的话，还不如从头就开始自己实现</div><div class="notion-blank notion-block-12c8875639798053a5a3d68e25dcece2"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[日本游记]]></title>
        <id>https://xxxuuu.me/post/japan-travel</id>
        <link href="https://xxxuuu.me/post/japan-travel"/>
        <updated>2024-10-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[次の駅は、東京です]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-1168875639798028b7d8ce8bf2ec4253"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980f288d2d1aab1fcaffa" data-id="11788756397980f288d2d1aab1fcaffa"><span><div id="11788756397980f288d2d1aab1fcaffa" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980f288d2d1aab1fcaffa" title="Day 0 前期准备"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 0 前期准备</span></span></h2><div class="notion-text notion-block-117887563979802d9261f53e8c2bb079">很久之前就想去日本玩，这趟计划其实早在四五个月前就和朋友约好了，当时恰好抢到了 ANA 的深圳到东京机票，双人往返只用 4000。但特价机票只能预约在非假期时间，由于后面时间安排的问题，一路推迟了行程到国庆假期，也刚好凑够 7 天游</div><div class="notion-blank notion-block-117887563979801c9021eed31b8be2e5"> </div><div class="notion-text notion-block-117887563979805c93ccf361894b2e34">国庆期间的机票就不好买了，ANA 深圳飞东京单程基本要 4000+，只能改去香港坐廉航，去程是快运航空飞东京，返程是大湾区航空从大阪回。这些廉航还都没有行李额度（包括手提行李），得额外加钱托运。最后算下来单人往返 3000 出头</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-117887563979801ba8bad4007162ff8d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F6ce09f8e-8e00-4c91-8ff9-0b767eaf92d2%2Fimage.png?table=block&amp;id=11788756-3979-801b-a8ba-d4007162ff8d&amp;t=11788756-3979-801b-a8ba-d4007162ff8d&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-117887563979803687d4fb076a150857"> </div><div class="notion-text notion-block-117887563979804da1aff0010871d09d">然后是签证，日本旅游签门槛比较低，只是必须通过旅行社办理。本来想用 20w 以上年收入的条件直接办理三年多次签证，但问了几家旅行社，要的都是 2023 年完整自然年的收入。我去年才毕业，只有半年的收入还不够 20w，而唯一能用非自然年收入（也就是 2023 年 7 月到 2024 年 7 月这样）的旅行社还不是广州领区的，也无法受理</div><div class="notion-blank notion-block-11788756397980e3b011f2239f69b922"> </div><div class="notion-text notion-block-1178875639798029bfdae26e352bd020">最后只能作罢，改办单次旅游签，单次旅游签只要本科在读或毕业三年内就可以简化办理，不需要在职证明和存款等额外材料。但没想到<s>案底</s>专升本经历又把我坑了一把，几家大旅行社都不认可这个学历。最后找到一家广东中旅能办理，交完资料后刚好五个工作日丝滑下签</div><div class="notion-blank notion-block-11788756397980b28d2dcc83c28c1569"> </div><div class="notion-text notion-block-11788756397980008ab5d7d264e8d027">虽然先订了机票，但攻略是直到出发前两周才做的。和朋友两人都是第一次去日本，还是打算先去一些比较热门的新手村区域，<s>而且朋友不是二次元，</s>小众城市和浓度高一点的圣地巡礼就等到下次再去吧<s>（可能得自己去了）</s>。在小红书看了一圈后，基本计划是东京 3 天，镰仓 1 天，京都和大阪 3 天。本来还想去箱根的，但考虑到不熟悉交通 + 一天来回可能太赶，就砍掉了。除去坐飞机的两天，实际上真正能玩的也只剩下 5 天</div><div class="notion-blank notion-block-117887563979809f823bf3e103f89466"> </div><div class="notion-text notion-block-11788756397980ec8c7ce134a280c77b">定好了具体行程后，就是酒店了，攻略做的比较晚，当时很多酒店已经没有空房，只能随便订了车站附近的几家：</div><ul class="notion-list notion-list-disc notion-block-117887563979806e9184d2778b547f19"><li>东京：the b 池袋，3 晚</li></ul><ul class="notion-list notion-list-disc notion-block-117887563979804aad2bd38b025607e0"><li>京都：Dormy Inn 京都站，1 晚</li></ul><ul class="notion-list notion-list-disc notion-block-11788756397980f3ba37cc66e34e60ff"><li>大阪：Vessel Inn 心斋桥，1 晚</li></ul><div class="notion-text notion-block-1218875639798045a895f418e205d98a">下次可以尝试一下在 Airbnb 上订民宿</div><div class="notion-blank notion-block-1178875639798027890cf739c79cb493"> </div><div class="notion-text notion-block-117887563979801c8764f061d47a9038">机酒合计一人将近 6000，基本就是这趟旅程的主要开销了（不购物的情况下）。不过另一个间接开销是，为了拍照，买了台相机，Nikon Z30 配 18-140 旅游头，算下来差不多 9000：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1178875639798065a2dce0303fa382b7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4ada107d-9d7b-473c-b184-7ec068ed1f46%2Fimage.png?table=block&amp;id=11788756-3979-8065-a2dc-e0303fa382b7&amp;t=11788756-3979-8065-a2dc-e0303fa382b7&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11788756397980dc8d31c75fc8da7c11"> </div><div class="notion-text notion-block-117887563979806b91b4f8a648a650fa">语言方面，我刚好擦边过了 7 月的 JLPT N2，虽然口语属于哑巴水平，但自我感觉应付旅游应该问题不大，也打算顺便练练口语（后来证明也确实只能应付，口语还得再练练），日本語を話しましょう！不过不会日语也不用担心，说英语完全没问题（我朋友甚至是直接说中文+肢体语言完成交流）</div><div class="notion-text notion-block-11e88756397980709ebae3fa699bed83">日本大部分旅游区都可以支持微信和支付宝付款，但一些地方还只能刷卡或使用现金，所以还是去银行办了 VISA 卡和换了 3w 円。上网可以去淘宝买 Softbank 的上网卡，交通卡则直接在 iPhone 钱包添加 Suica：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-117887563979801f8877eaec8eba4193"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F7cbb31c1-b252-476c-8c37-64ff7b22527e%2Fimage.png?table=block&amp;id=11788756-3979-801f-8877-eaec8eba4193&amp;t=11788756-3979-801f-8877-eaec8eba4193&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11788756397980769cccc4d1a5e2692b"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980caa7fbd623bd3af302" data-id="11788756397980caa7fbd623bd3af302"><span><div id="11788756397980caa7fbd623bd3af302" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980caa7fbd623bd3af302" title="Day 1（9.28）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 1（9.28）</span></span></h2><div class="notion-text notion-block-117887563979807cb8f7e6c882b953be">出发当天，中午吃完饭后去皇岗口岸入境香港，坐永东巴士一小时直达机场。登机口不出意外在最角落，走了很远。飞机 17 点半起飞，东京时间 23 点左右到，廉航没有免费餐食，在机场买了两个🍙饭团作为晚餐</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980508886ee86f5c7c541"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F041098fb-b273-47c8-b088-8a08f0b57057%2FIMG_6680.jpeg?table=block&amp;id=11788756-3979-8050-8886-ee86f5c7c541&amp;t=11788756-3979-8050-8886-ee86f5c7c541&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-12188756397980bfa529fc8d846d81b5">落地时比计划早了半小时，东京的天气很凉快，是深圳几乎没有的秋天感觉，十分舒适</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12188756397980d6a55af8309e4eeaf8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fa9b9703c-32d4-4d86-99b0-11908d82d6fc%2FIMG_6689.jpeg?table=block&amp;id=12188756-3979-80d6-a55a-f8309e4eeaf8&amp;t=12188756-3979-80d6-a55a-f8309e4eeaf8&amp;width=1248&amp;cache=v2" alt="舷窗好脏😥" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">舷窗好脏😥</figcaption></div></figure><div class="notion-text notion-block-1178875639798096b518cf06ddcd5048">虽然已经是晚上十点多，入境处还是挤满了人，目测一半中国人，一半南亚人</div><div class="notion-row notion-block-121887563979805fa71bfd61f471bd82"><div class="notion-column notion-block-1218875639798038ac4df5a23418d880" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12188756397980f1a0c6fa69881821db"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fad524ead-5a40-41f7-adc5-7e4832fe276f%2FIMG_6691.jpeg?table=block&amp;id=12188756-3979-80f1-a0c6-fa69881821db&amp;t=12188756-3979-80f1-a0c6-fa69881821db&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1238875639798048819df78d9d42b4e5"> </div></div><div class="notion-spacer"></div><div class="notion-column notion-block-1218875639798039a188e9ae3abe6ea0" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980629a89cdf804a2ce01"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:288px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd1da0edd-9c1b-46a4-bcfd-c81540ade16e%2Fimage.png?table=block&amp;id=11788756-3979-8062-9a89-cdf804a2ce01&amp;t=11788756-3979-8062-9a89-cdf804a2ce01&amp;width=576&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-121887563979800ebd64e51977d03f41">飞机上空乘会发纸质入境单填写，但 Visit Japan Web 能直接出示二维码扫描，更方便些。这里 VJW 需要填写电子签证的申请号，申请号写在签证办理后寄回来的那张纸上，所以千万不要直接把它丢了</div><div class="notion-text notion-block-117887563979807886c7fe0684c5cc80">一直排了大概半个多小时才过境，上陆许可get</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12188756397980718251f80d3e50eb27"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4a213b66-febe-4827-8d5a-b942ad844bcd%2FIMG_6692.jpeg?table=block&amp;id=12188756-3979-8071-8251-f80d3e50eb27&amp;t=12188756-3979-8071-8251-f80d3e50eb27&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-12188756397980c6947bd9e6ce577355">越过过境处的门，就能看到「ようこそ東京へ」</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-117887563979808f9837ca3d17307145"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fca450923-0daa-4c74-a9e1-924120745962%2FIMG_6694.jpeg?table=block&amp;id=11788756-3979-808f-9837-ca3d17307145&amp;t=11788756-3979-808f-9837-ca3d17307145&amp;width=864&amp;cache=v2" alt="ようこそ東京へ" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">ようこそ東京へ</figcaption></div></figure><div class="notion-text notion-block-11788756397980ca8dc5eecdf6460b80">机场大厅内的自助售票机可以买机场大巴车票，直达新宿和池袋。但不知道为什么这个机子上我的两张 VISA 卡都用不了，最后只能花了现金，机场大巴这个价还是不便宜的。大巴最后一班在 2 点半，所以落地比较晚也不用担心，如果实在超过了这个点，不如直接在机场等到 5 点多电车发车后再去酒店</div><div class="notion-text notion-block-12188756397980e5ba72d37a4f7bf91d">PS：这趟大巴上也基本全是中国游客（包括一个台湾同胞</div><div class="notion-row notion-block-1218875639798052bd24e748ca38605e"><div class="notion-column notion-block-12188756397980209830e3daa36e2f4d" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980b295d2dbc3dbffc041"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fa85cb65e-51bd-46c3-b623-396def17df5e%2FIMG_6695.jpeg?table=block&amp;id=11788756-3979-80b2-95d2-dbc3dbffc041&amp;t=11788756-3979-80b2-95d2-dbc3dbffc041&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12188756397980b6a182e738ebe234d2" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1178875639798015aaecdeeaa8976c8b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F6eceb09f-30b4-4430-8c21-d159ab89dcb4%2FIMG_6697.jpeg?table=block&amp;id=11788756-3979-8015-aaec-deeaa8976c8b&amp;t=11788756-3979-8015-aaec-deeaa8976c8b&amp;width=672&amp;cache=v2" alt="“台湾制造”" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">“台湾制造”</figcaption></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-117887563979809c84dade11c0f4a5b3">从机场到池袋大概一个小时车程，下车时已经接近两点半。池袋站附近路边散落着不少喝醉酒的上班族，每个路口还都有拉客的メイドさん，马路上时不时穿过炸街的摩托党，给了我点初到东京的小震撼。不过一天行程后实在太累，没有精力再逛，到离车站 3 分钟路程的酒店 check in 完就匆匆洗漱躺下睡觉了，结束第一天</div><div class="notion-blank notion-block-11788756397980deb351f331ab0c056b"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980aea239d390975be965" data-id="11788756397980aea239d390975be965"><span><div id="11788756397980aea239d390975be965" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980aea239d390975be965" title="Day 2（9.29）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 2（9.29）</span></span></h2><div class="notion-text notion-block-11788756397980df9a5bf8c41e9b199c">第二天睡到了十点半，一出酒店，街道上人群熙熙攘攘，混杂着街边店铺扩音喇叭的叫卖声，昨晚的那些 dark side 都已经消失不见，街道干净整洁有序，白天的东京仿佛是另一个城市</div><div class="notion-blank notion-block-117887563979803982e2f735dd69d2b7"> </div><div class="notion-text notion-block-117887563979808aa5afec6259d74504">因为朋友用的是国行 Android，没法使用电子 Suica，我们先出发去了车站办理实体的 Suica 卡，我也打算顺便一张留为纪念</div><div class="notion-text notion-block-11e8875639798057bb99f427517d240c">过程中还出了点小意外，在一台自助售票机上 VISA 卡被机器吞了。正想找工作人员时，机子旁边的墙上直接开了个洞，车站工作人员从洞里把头钻出来，把我们吓了一跳：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980ffbfb6c338ca35475a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9d2ce9f9-29f3-4259-aaa2-c6d2cce2328e%2Fimage.png?table=block&amp;id=11788756-3979-80ff-bfb6-c338ca35475a&amp;t=11788756-3979-80ff-bfb6-c338ca35475a&amp;width=1056&amp;cache=v2" alt="原来机子背后有人是真的" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">原来机子背后有人是真的</figcaption></div></figure><div class="notion-text notion-block-1178875639798093a3d1dd81ced9878f">整个早上和中午都在车站附近闲逛，因为是在落地后正式的第一天，什么都充满了新鲜感，所以并没有设定任何实际的目标，暂时沉浸在探索街道的乐趣中</div><div class="notion-text notion-block-117887563979807fb3cacd651def9ecc">在传说中的池袋西北口，确实到处都是面向国人的中文广告，不过国人比例好像也并没有想象的那么高。一出站还碰到了当地的祭奠活动，整条路都封了，查了一下那两天刚好是「ふくろ祭り」：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980ce925bf1bd70bff0b5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F780c8d22-a782-4a45-9777-ad21a38a756a%2FIMG_6710.jpeg?table=block&amp;id=11788756-3979-80ce-925b-f1bd70bff0b5&amp;t=11788756-3979-80ce-925b-f1bd70bff0b5&amp;width=1248&amp;cache=v2" alt="ふくろ祭り" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">ふくろ祭り</figcaption></div></figure><div class="notion-text notion-block-11888756397980509826d210905ec89e">往南走出 500 米左右，就到了居民区，是窄路和一户建，典型的日本街道，非常安静</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-117887563979806eb2ddd91e45064b1f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F888cc8db-6dbe-4854-b8d6-69c155687751%2FIMG_6712.jpeg?table=block&amp;id=11788756-3979-806e-b2dd-d91e45064b1f&amp;t=11788756-3979-806e-b2dd-d91e45064b1f&amp;width=864&amp;cache=v2" alt="乱入居民区" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">乱入居民区</figcaption></div></figure><div class="notion-text notion-block-11788756397980c0a850e55691ef7239">之后一路沿着铁道走，沿途这种铁道挨着街道的街景有种天气之子的即视感，一直到了下一个车站目白，天上下起小雨，我们才准备吃午饭顺便避避雨。打开 Google 地图，第一眼就看到一家蔡徐坤餐厅，虽然一看就是国人恶搞改的名，评分也不太高，但还是忍不住去探险了一番</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11788756397980c6bb3ddef23eba2789"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F5a9c799a-ecdb-42ae-8c19-2eb44c697c65%2FIMG_7756.png?table=block&amp;id=11788756-3979-80c6-bb3d-def23eba2789&amp;t=11788756-3979-80c6-bb3d-def23eba2789&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-117887563979808fb4fdd8c433560571">这是一家拉面店，猪肉拉面看样子和印象中的日式拉面一模一样，配菜堆得比面还高</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1178875639798086a689fd72e55f1d3e"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F00dc15ef-894d-4da8-8a21-b7543c4e12af%2FIMG_6715.jpeg?table=block&amp;id=11788756-3979-8086-a689-fd72e55f1d3e&amp;t=11788756-3979-8086-a689-fd72e55f1d3e&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-11788756397980d6916bcd22249ab71b">但当我正吃下第一口时，やばいー 浓重的大蒜和猪油味直冲脑门，还特别咸，这才想起“印象中”的拉面出处是这玩意：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-118887563979809d81eed94ea63d34f8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F73a1e84f-a7b5-4dff-a026-bf8ac69e13a4%2Fimage.png?table=block&amp;id=11888756-3979-809d-81ee-d94ea63d34f8&amp;t=11888756-3979-809d-81ee-d94ea63d34f8&amp;width=1248&amp;cache=v2" alt="拉面咒语" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">拉面咒语</figcaption></div></figure><div class="notion-blank notion-block-1238875639798076a5b0c4b7435baf56"> </div><div class="notion-text notion-block-117887563979805185d9c3e4d1b9216d">好不容易吃完后，直奔目白站坐电车，正式开始今天的打卡之旅。东京的轨交相比国内复杂很多，分地铁、JR 和其他一些线路，但乘坐地点和方式都是一样的，所以对乘客来说没有明显区别。不过给我的第一个感受是，进站不用安检，带包方便了很多</div><div class="notion-blank notion-block-12388756397980ec8ec9f1debe29111a"> </div><div class="notion-text notion-block-123887563979801b8ef4f7b3b87b2592">中途在日本桥逛了逛，这里附近的建筑维护得很好，外立面很干净，看起来有一股高级感。高楼大厦紧挨在人行道边上，离得很近，显得密度很高，建筑压迫感也更强。国内相比通常是有一片园林或空地隔断，搜了下，这种概念还有个专有名词，叫「建筑退线」</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1238875639798079af5ad67e52685bc7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F93786b2d-892a-4a80-b257-b6299c6e4e1d%2FIMG_6720.heic?table=block&amp;id=12388756-3979-8079-af5a-d67e52685bc7&amp;t=12388756-3979-8079-af5a-d67e52685bc7&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1218875639798065893efe2e82f5d2e3"> </div><div class="notion-text notion-block-1218875639798025ac14c19cf25dd7b6">继续来到浅草寺后，天气完全变成了阴天，但游客是一点不少，耳边还不断传来中文</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1238875639798049bd45d0ea74b6092a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F45476acb-1dd4-4e3f-9e8c-2fa120d742a3%2FIMG_6723.heic?table=block&amp;id=12388756-3979-8049-bd45-d0ea74b6092a&amp;t=12388756-3979-8049-bd45-d0ea74b6092a&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-123887563979803eb6e7e14e31875108">不过浅草寺的人实在多到对我这种 I 人来说有点生理不适了，而且除了一条街的纪念品商店和御守、抽签外，也没啥别的东西了</div><div class="notion-row notion-block-12388756397980c99733cf2afcc24880"><div class="notion-column notion-block-123887563979809291f8d1d0316a2f4e" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-123887563979803a84d2f5daeeceef9f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd45d073d-7626-48ac-a6d0-024f2c022f8c%2FDSC_0383.jpg?table=block&amp;id=12388756-3979-803a-84d2-f5daeeceef9f&amp;t=12388756-3979-803a-84d2-f5daeeceef9f&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-123887563979807fa8e2e019890a837c" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12388756397980b0aac0c8b7738b7ef8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fb93e9acb-bd90-40d9-8256-f0e6ae3ed0e1%2FDSC_0388.jpg?table=block&amp;id=12388756-3979-80b0-aac0-c8b7738b7ef8&amp;t=12388756-3979-80b0-aac0-c8b7738b7ef8&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12388756397980de914de8564ed2d73c"> </div><div class="notion-text notion-block-1238875639798017a49ac07b674663f4">匆匆逛完后，就向着在浅草寺看起来近在咫尺的天空树走去</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1238875639798019af67c994d6c69764"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fb2a1c913-3594-4c41-a666-187006e1a670%2FDSC_0390.jpg?table=block&amp;id=12388756-3979-8019-af67-c994d6c69764&amp;t=12388756-3979-8019-af67-c994d6c69764&amp;width=1152&amp;cache=v2" alt="虽然看着很近，但实际上要走将近两公里" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">虽然看着很近，但实际上要走将近两公里</figcaption></div></figure><div class="notion-blank notion-block-12388756397980dd881af5b6d937326b"> </div><div class="notion-text notion-block-12588756397980eda315fd90a7f58388">中途在一座桥上发现了「恋人の聖地」</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980f8b6a2f0349c210a0b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F0da93567-0197-41e3-b982-bf84b5214db5%2FDSC_0455.jpg?table=block&amp;id=12588756-3979-80f8-b6a2-f0349c210a0b&amp;t=12588756-3979-80f8-b6a2-f0349c210a0b&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-123887563979804a9806ed711ca5c319"> </div><div class="notion-text notion-block-12588756397980f09441c91dd755e2b0">天空树底下是一大块商业综合体，叫「スカイツリータウン」（SKYTREE TOWN），刚好广场上在办啤酒节🍺，不过我痛风就没去凑热闹了。在小红书上找到一家据说不错的寿喜锅吃，但实际上味道很一般，人均还得 4000 円，又踩雷了（</div><div class="notion-row notion-block-12588756397980259e94ce99da908fc8"><div class="notion-column notion-block-1258875639798034b6dbd640a788c564" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979806f9941da0e7153db57"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F26fd13f2-abd0-4591-8e6c-00230eeb97e9%2FDSC_0467.jpg?table=block&amp;id=12588756-3979-806f-9941-da0e7153db57&amp;t=12588756-3979-806f-9941-da0e7153db57&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980f49281c44d282e5ad6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F905d0fc5-6ba9-4544-8ff9-d5b51e1fae1c%2FDSC_0480.jpg?table=block&amp;id=12588756-3979-80f4-9281-c44d282e5ad6&amp;t=12588756-3979-80f4-9281-c44d282e5ad6&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980479a82e00da6e6acdd" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980d882bee46b1b04b040"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fabdda432-982e-4e73-8eb2-b931ddec751d%2FIMG_6816.heic?table=block&amp;id=12588756-3979-80d8-82be-e46b1b04b040&amp;t=12588756-3979-80d8-82be-e46b1b04b040&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-1258875639798027ab80d177b1dbf2ac"> </div><div class="notion-text notion-block-12588756397980669959d56e286c2c0a">买了晚上的天空树观景票，要 3000 多円，东京的夜景还是不错的，不会用很土的大片 LED 提亮。天空树最近还和咒术回战有联名活动，查了下一直持续到 12 月，很多樱花妹特地来打卡，拍照点排了一条长队</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980b6a8a8f5de37f55766"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F209570b0-e34a-42ee-b8b2-74eafaea2699%2FIMG_6843.heic?table=block&amp;id=12588756-3979-80b6-a8a8-f5de37f55766&amp;t=12588756-3979-80b6-a8a8-f5de37f55766&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-121887563979804dbcfbd3af980e65c2"> </div><div class="notion-text notion-block-121887563979806383cbd3c61e5fd983">返程路上的天空树，底下哐当哐当穿过的电车很有感觉</div><div class="notion-row notion-block-1258875639798025a27ae2b596a7dad5"><div class="notion-column notion-block-12588756397980b78a40daff278aa509" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980f789faf69dcf16c7be"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4263a201-3477-4efb-8794-7ed56b405fba%2FDSC_0516.jpg?table=block&amp;id=12588756-3979-80f7-89fa-f69dcf16c7be&amp;t=12588756-3979-80f7-89fa-f69dcf16c7be&amp;width=661.9744262695312&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979809fa4a6ca98a7a1f18d" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5000000000000001)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980999a50dcafb43de187"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F1ea7e19a-8401-4360-80b6-9baccbcdb3aa%2FDSC_0501.jpg?table=block&amp;id=12588756-3979-8099-9a50-dcafb43de187&amp;t=12588756-3979-8099-9a50-dcafb43de187&amp;width=7128&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-125887563979805ebe08d2ab19fa7be5"> </div><div class="notion-text notion-block-12188756397980a1b56ad1591e65a60e">顺便去了趟秋叶原逛，⚠️这里メイドさん密度极高</div><div class="notion-row notion-block-12588756397980e68697d2ab1545a836"><div class="notion-column notion-block-1258875639798013b068cbce548363b7" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980969d4cd68ff44f10cd"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2cfa8b45-bc5f-4861-bb77-ea08aacead80%2FDSC_0529.jpg?table=block&amp;id=12588756-3979-8096-9d4c-d68ff44f10cd&amp;t=12588756-3979-8096-9d4c-d68ff44f10cd&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-1258875639798016a197c03db1a59a57" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979806b82c3f4cee2d00e05"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fcd05901b-98ce-440c-b444-59af0a255256%2FIMG_6890.heic?table=block&amp;id=12588756-3979-806b-82c3-f4cee2d00e05&amp;t=12588756-3979-806b-82c3-f4cee2d00e05&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-12588756397980bdb8c8d9ca2b5fdc3a">10000 円都夹不下来的茜… 被资本主义狠狠收割</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c58de7fc5beaa67542"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F130ea3f4-2ce7-4eba-9de4-a169d07f80fc%2FIMG_6894.heic?table=block&amp;id=12588756-3979-80c5-8de7-fc5beaa67542&amp;t=12588756-3979-80c5-8de7-fc5beaa67542&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980b29d70deebd7908fbe"> </div><div class="notion-text notion-block-12188756397980cda765c6ad19292cfa">晚上坐电车回去的时候发现，日本这边头发花白却还穿着西装、背着公文包下班的老年白领特别多，这也是国内未来我们这代人需要经历的吧，高教育普及率 + 老龄化的社会</div><div class="notion-text notion-block-12588756397980658a46e77383c904b5">另外这边电车体验很好的一点是，大家都很遵守规矩，会老实排队，先下后上。在深圳坐地铁最恼火的是永远有人不排队，每天坐地铁都会遇到，在你认真排队的时候，直接站在应该下客的正中心区域而不是排在队伍后面，门一开就往里挤，不会等其他人先下来。这些人有没有大义不知道，但小礼我想是肯定没有的</div><div class="notion-blank notion-block-1258875639798007b387d68c77c6d6ca"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980969027e0940c6749a9" data-id="11788756397980969027e0940c6749a9"><span><div id="11788756397980969027e0940c6749a9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980969027e0940c6749a9" title="Day 3（9.30）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 3（9.30）</span></span></h2><div class="notion-text notion-block-1258875639798055a3a4cbdd13540dc1">第三天天气还是阴沉沉的，早上起来想尝试一下这边的早餐，但看了下，发现日本好像没什么专门的早餐，大部分人只是便利店吃个三明治解决，不像国内有豆浆油条肠粉这样的丰富选择</div><div class="notion-blank notion-block-12588756397980199cfde02356b4cfec"> </div><div class="notion-text notion-block-12588756397980e5ae42fd5cf6be9b00">在酒店继续赖床，等到中午直接去吃了麦，每个地方的麦当劳都有些当地特供食物。试着点了个国内没有的汉堡🍔，上面有一层很腻的肉酱，我的评价是不如板烧</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980fa895ce5d4eab16e7f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F0f04c5a9-3d06-42fe-b873-31f7e446cd85%2FIMG_7050.heic?table=block&amp;id=12588756-3979-80fa-895c-e5d4eab16e7f&amp;t=12588756-3979-80fa-895c-e5d4eab16e7f&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-119887563979801a8e51f6bc640a7e40"> </div><div class="notion-text notion-block-12188756397980b5944ff6ef060a1b9c">来到六本木，在一个公园里发现藏在城市间的美军基地，是个直升机场</div><div class="notion-row notion-block-12588756397980a6bae7dd8bdb561129"><div class="notion-column notion-block-12588756397980048d6ce567ef806345" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979801ba8aaec3beac838b5"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F50dbc9db-d733-4a25-9c1f-7bc709dc5bb8%2FIMG_7054.heic?table=block&amp;id=12588756-3979-801b-a8aa-ec3beac838b5&amp;t=12588756-3979-801b-a8aa-ec3beac838b5&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980d9bc0fd90cc4a32986" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979801ba935f24e848ec3bc"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fcd0e632d-92c0-41fd-a607-71e71039966a%2Fimage.png?table=block&amp;id=12588756-3979-801b-a935-f24e848ec3bc&amp;t=12588756-3979-801b-a935-f24e848ec3bc&amp;width=4448&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-11988756397980f4b93fecebcd33340d">公园对面是一大片墓地，非常安静</div><div class="notion-row notion-block-125887563979808d96cfed34387ca3c2"><div class="notion-column notion-block-125887563979805cbdc5e56d3d43317a" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798030a6fde18893fe32ce"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ffd866d97-dcc4-4c50-a6f7-f18cb7ade03f%2FIMG_7057.heic?table=block&amp;id=12588756-3979-8030-a6fd-e18893fe32ce&amp;t=12588756-3979-8030-a6fd-e18893fe32ce&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979802082d1c2263c542bb1" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798050874dfae099d3f090"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd131605f-c759-45d5-8174-1d2d37b98567%2FIMG_7056.heic?table=block&amp;id=12588756-3979-8050-874d-fae099d3f090&amp;t=12588756-3979-8050-874d-fae099d3f090&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12588756397980e19d8fd3c657284c93"> </div><div class="notion-text notion-block-12588756397980e2a553deb84032c8b6">经常能看到成群的乌鸦，貌似乌鸦在日本还有特殊的地位和意义</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979808cb30cebb840a79320"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff11b32f6-f4b7-48c8-9377-9a1054a59d83%2FIMG_7060.heic?table=block&amp;id=12588756-3979-808c-b30c-ebb840a79320&amp;t=12588756-3979-808c-b30c-ebb840a79320&amp;width=800&amp;cache=v2" alt="道理我都懂，但为什么这只乌鸦🐦‍⬛那么大" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">道理我都懂，但为什么这只乌鸦🐦‍⬛那么大</figcaption></div></figure><div class="notion-blank notion-block-12588756397980959e01dfcc1e60c9d8"> </div><div class="notion-text notion-block-12588756397980c6bca0efd1ff90e910">再对面就是国立新美术馆，进入是免费的，但内部具体的展需要单独买门票</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980dd9e8ec5a40ffdbaaf"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F73506c70-9649-4e41-8e02-f603f28705f6%2FDSC_0534.jpg?table=block&amp;id=12588756-3979-80dd-9e8e-c5a40ffdbaaf&amp;t=12588756-3979-80dd-9e8e-c5a40ffdbaaf&amp;width=10608&amp;cache=v2" alt="君名机位，也算是圣地巡礼了一回" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">君名机位，也算是圣地巡礼了一回</figcaption></div></figure><div class="notion-blank notion-block-12588756397980faac1bcabe06e187de"> </div><div class="notion-text notion-block-1258875639798034a91cf8210bec5c9b">附近不远有处乃木神社，待了半小时，人很少，但期间不断有人过来参拜</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979802590f9e131021e955f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ffcc53ddb-5370-426f-80d9-7c3ebbcfdc0c%2FDSC_0560.jpg?table=block&amp;id=12588756-3979-8025-90f9-e131021e955f&amp;t=12588756-3979-8025-90f9-e131021e955f&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-1258875639798088a8a0f906b62a4389">一大半绘马都是给乃木坂46应援的，日本的偶像文化确实十分广泛，其中国人也不少</div><div class="notion-row notion-block-1258875639798031963defe36c0adb71"><div class="notion-column notion-block-12588756397980fa9065e330e6e67e69" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980af9052cacc54ffb53f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F88479caf-cdf1-4c55-bf7a-ad0539423628%2FDSC_0564.jpg?table=block&amp;id=12588756-3979-80af-9052-cacc54ffb53f&amp;t=12588756-3979-80af-9052-cacc54ffb53f&amp;width=661.9885864257812&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980559734dd437d0d009a" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980fe8f2ff451714625d7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F06524adf-dcd1-4b00-b7f6-f8588dde8ff1%2FDSC_0566.jpg?table=block&amp;id=12588756-3979-80fe-8f2f-f451714625d7&amp;t=12588756-3979-80fe-8f2f-f451714625d7&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-1258875639798099a80fc44cfa8cb7ef"> </div><div class="notion-text notion-block-11988756397980239bdeeb9a273050f3">一路走到东京塔下，有很多不错的机位，可惜一直是阴天</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798051b5e1cb84703ccaef"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F481db67d-60bd-4f19-9e2d-4e05c125b870%2FDSC_0586.jpg?table=block&amp;id=12588756-3979-8051-b5e1-cb84703ccaef&amp;t=12588756-3979-8051-b5e1-cb84703ccaef&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-125887563979806891cdd2d6f2999648">经常看到有人开着卡丁车一样的东西，感觉很好玩。回去搜了下才知道是有试驾卡丁车的游客服务，还带 Cosplay。但需要日本驾照或国际驾照，而大陆没加入《联合国道路交通公约》，不能换国际驾照（怪不得没见过国人开</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c9a340d7c06342edb7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe68f03e3-59ab-4e61-b9ee-fe636897cdcf%2FDSC_0605.jpg?table=block&amp;id=12588756-3979-80c9-a340-d7c06342edb7&amp;t=12588756-3979-80c9-a340-d7c06342edb7&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1258875639798000a276e0cb05cd9601"> </div><div class="notion-text notion-block-11788756397980e98f96e47c7129c6b9">坐电车回去路上又在路边发现一座西久保八幡神社</div><div class="notion-row notion-block-12588756397980f99975cc073768f17e"><div class="notion-column notion-block-12588756397980f2a73bd6cca69a8889" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798033b10ee11da0c5b33a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff37fb0fb-45e8-4283-9643-487dfb0eec59%2FDSC_0608.jpg?table=block&amp;id=12588756-3979-8033-b10e-e11da0c5b33a&amp;t=12588756-3979-8033-b10e-e11da0c5b33a&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-1258875639798023917bc221bef9d8c2" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980fba954c990022e4cf4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F573aa8f1-9274-488a-8276-a11ec4e5e2fb%2FDSC_0636.jpg?table=block&amp;id=12588756-3979-80fb-a954-c990022e4cf4&amp;t=12588756-3979-80fb-a954-c990022e4cf4&amp;width=661.9885864257812&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-12388756397980009c9bf78d55184069">作为日本文化的象征之一，大大小小的神社藏在城市之间，真是遍地都是</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c08dfdeda9bf925d50"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F59583336-e5a3-49ac-9c7b-2ed7db604cc2%2FDSC_0624.jpg?table=block&amp;id=12588756-3979-80c0-8dfd-eda9bf925d50&amp;t=12588756-3979-80c0-8dfd-eda9bf925d50&amp;width=1248&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12288756397980b7966cc39e42c125e1"> </div><div class="notion-text notion-block-123887563979803cb0c8f261c0cb05f9">晚饭吃了スシロー（寿司郎），味道和国内一模一样。想着来了两天好像还没吃过什么好吃的… </div><div class="notion-blank notion-block-12588756397980458ffdee68c4bc1b71"> </div><div class="notion-text notion-block-12588756397980c09509e8001a23ecef">回到酒店，想起白天偶尔能看到有人在骑一样的青绿色滑板车，查了下发现是 LUUP 这个共享滑板车/电瓶车服务，在去年日本放宽道路交通法后才诞生的，注册账号时有个简单的考试，要全部通过才可以使用。这玩意必须骑在机动车道上，不能骑到人行道上，但碰到右转这类情况时也不能像汽车一样直接右转，而是得跟着左边的人行道走，也就是绕个圈等两次红灯。这点比深圳好不少，深圳就没有分离人行道和非机动车道，在外卖泛滥的情况下，骑手都在人行道上横冲直撞，我不止一次被撞到过，非常危险</div><div class="notion-text notion-block-1258875639798085b150cece83ec1ae6">LUUP 作为电动交通工具，投放点还是蛮多的，但价格不低，50 円的“起步费”加每分钟 15 円，如果骑一个钟就得 50 + 60*15 = 950 円了，考虑到东京电车的价格，也不算很离谱？</div><div class="notion-row notion-block-125887563979807db62bc87de5f04f06"><div class="notion-column notion-block-1258875639798017a01cc2d070ff070b" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980e794fae04485b33a31"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4545cd1f-37cf-4178-b008-d5cf5a034f02%2Fimage.png?table=block&amp;id=12588756-3979-80e7-94fa-e04485b33a31&amp;t=12588756-3979-80e7-94fa-e04485b33a31&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979804db960cd83291ced13" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979803ca913d874377cccf3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff345281b-bca1-490c-b826-30785a7638b5%2Fimage.png?table=block&amp;id=12588756-3979-803c-a913-d874377cccf3&amp;t=12588756-3979-803c-a913-d874377cccf3&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12588756397980ba9018c962e19efb1d"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980408fd9e837d2e2035b" data-id="11788756397980408fd9e837d2e2035b"><span><div id="11788756397980408fd9e837d2e2035b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980408fd9e837d2e2035b" title="Day 4（10.1）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 4（10.1）</span></span></h2><div class="notion-text notion-block-125887563979802b9dfdfbbacb27d789">今天计划是去镰仓，但一大早起来起来看到又是阴天，心凉了一半，在海边如果还是阴天就太糟糕了</div><div class="notion-blank notion-block-125887563979800c9f94fe982beba849"> </div><div class="notion-text notion-block-12588756397980dda3a3eca25667b16e">我们计划坐湘南新宿线（JS），横跨川崎、横滨两个城市到镰仓，全程需要一个钟出头。一开始在池袋站找不到 JS 方向的指示牌，被十几条线搞晕。去万能的小红书查了一番才知道，J 开头的线路都是 JR，只要按着 JR 的方向走即可</div><div class="notion-text notion-block-1258875639798033ae87f35026d954a8">这里又不得不提东京轨交的快慢车了，每趟车分为「各駅停車」「快速」「特急」和其他各种，它们都在同一条路线上行驶，区别是「各駅停車」会每一站都停车，就像国内的地铁一样；但后者并不是每一站都停的，所以在查交通路线的时候，一定坐对应时间点的那一趟车，不然可能不会停你想下的站。快车只停大站，对于长距离交通方便很多，加上慢车组合也能覆盖各种小站（跳表即视感</div><div class="notion-text notion-block-12588756397980199b33f75f42d95440">对比国内，我在深圳每天从龙岗到南山长距离通勤（大约 30 公里），坐地铁得要将近一个半钟。但在东京相同的距离坐快车只用半个钟，我想这种交通的便利也是东京都市圈能发展到这样一个规模的重要原因</div><div class="notion-blank notion-block-125887563979805bba43fa66f199060e"> </div><div class="notion-text notion-block-125887563979807ba223d994c97f05d5">在镰仓站刚下车，走进车站大厅，能看到一堆旅行指南，满是游客。旅游氛围特别浓，但又不像浅草寺那样人山人海。出站后左转穿过一条长长的路，就来到了鹤冈八幡宫前</div><div class="notion-row notion-block-12588756397980f4b2a3f8a7c4d14cde"><div class="notion-column notion-block-12588756397980f598c3f7ee8539636a" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979802c9cccfb1d8a1d5d64"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F66f30ce9-6574-4d74-8732-f2b49e9fc17f%2FDSC_0649.jpg?table=block&amp;id=12588756-3979-802c-9ccc-fb1d8a1d5d64&amp;t=12588756-3979-802c-9ccc-fb1d8a1d5d64&amp;width=11136&amp;cache=v2" alt="旅行的中学生" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">旅行的中学生</figcaption></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980b988f4f82821238a43" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980adb8f0e00c162f01b6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fb49e5f2d-5042-41ba-9f63-15615d8d6757%2FDSC_0657.jpg?table=block&amp;id=12588756-3979-80ad-b8f0-e00c162f01b6&amp;t=12588756-3979-80ad-b8f0-e00c162f01b6&amp;width=661.9885864257812&amp;cache=v2" alt="瓦罐STI" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">瓦罐STI</figcaption></div></figure></div><div class="notion-spacer"></div></div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979802bbeabc47b978ae475"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd06e6e7c-453f-48db-91e7-3fede0e2a0c7%2FDSC_0663.jpg?table=block&amp;id=12588756-3979-802b-beab-c47b978ae475&amp;t=12588756-3979-802b-beab-c47b978ae475&amp;width=1344&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1258875639798055975acef1a4c55b32"> </div><div class="notion-text notion-block-125887563979805cb1e5d6a2d6264819">逛完后中午走到了游客少一点，比较靠近居民区的地方，尝了一家烤蔬菜咖喱🍛，蔬菜烤得脆脆的，撒上盐，味道很不错，是这几天吃过最好吃的一餐了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c7ac36dc425cd0cef6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fac689152-f5c8-4e6d-860e-79b99d236f29%2FIMG_7220.heic?table=block&amp;id=12588756-3979-80c7-ac36-dc425cd0cef6&amp;t=12588756-3979-80c7-ac36-dc425cd0cef6&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980fcb1c2da95570a49cd"> </div><div class="notion-text notion-block-12588756397980499d93c62d6111a446">吃完饭过后，天气已经完全放晴，我们向着海边出发。中途去了一下镰仓大佛，这里除了一尊大佛像基本就没别的东西了，有点无聊，不过还好门票才 300 円</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980bd9fddfb9c18bfb798"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fbcf83629-55b3-4566-a972-f14041c6a01b%2FDSC_0712.jpg?table=block&amp;id=12588756-3979-80bd-9fdd-fb9c18bfb798&amp;t=12588756-3979-80bd-9fdd-fb9c18bfb798&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-125887563979808fb892f24134d7af01"> </div><div class="notion-text notion-block-125887563979805abd4afd221be6fef7">镰仓的街道我觉得是最有意思的，不像东京那么吵闹。这里也没有高楼和明显的单独商业区，商业和住宅结合得更加紧密，加上窄路网。也许下个路口就能发现一家新的文艺的咖啡馆、餐厅或手工店，探索街道的惊喜要远比东京更多，每走一步都能有新收获</div><div class="notion-row notion-block-125887563979807eb303da9d7d1640b0"><div class="notion-column notion-block-125887563979805ba661dbe272dac4ec" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798012904bda821e7b9b92"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fc4270243-c040-4323-ac74-98726f04e6f1%2FDSC_0693.jpg?table=block&amp;id=12588756-3979-8012-904b-da821e7b9b92&amp;t=12588756-3979-8012-904b-da821e7b9b92&amp;width=661.9744262695312&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-1258875639798039ba66fa93904cad2f" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5000000000000001)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979806e9d5ddb7229b30872"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F3bdc7207-a416-4660-8115-8f7b5e981032%2FDSC_0695.jpg?table=block&amp;id=12588756-3979-806e-9d5d-db7229b30872&amp;t=12588756-3979-806e-9d5d-db7229b30872&amp;width=661.9885864257812&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-row notion-block-12588756397980a1910cc5b2bbd2b78c"><div class="notion-column notion-block-125887563979805ea3dbdb122b70cbb4" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980528aeac2a359bf5dab"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2807ab23-65b9-4a53-b3c5-5a74601349ed%2FDSC_0720.jpg?table=block&amp;id=12588756-3979-8052-8aea-c2a359bf5dab&amp;t=12588756-3979-8052-8aea-c2a359bf5dab&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980d7b416e5010171a7b6" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5000000000000001)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798055979cd5164f1f421a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fddfa1642-c521-42c0-96ed-1646cf336d98%2FDSC_0719.jpg?table=block&amp;id=12588756-3979-8055-979c-d5164f1f421a&amp;t=12588756-3979-8055-979c-d5164f1f421a&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-125887563979803dab99f6a86e68c292"> </div><div class="notion-text notion-block-125887563979809bb0ceed8293cf4601">直到某个路口转弯时，一瞬间大海🌊映入眼帘</div><div class="notion-row notion-block-125887563979804b9f3ef93390cb214d"><div class="notion-column notion-block-125887563979803c9695c7c5d4104b40" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980ca8906c1bdf511141b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F5585c981-df0b-423b-b537-b7459ec4746b%2FDSC_0725.jpg?table=block&amp;id=12588756-3979-80ca-8906-c1bdf511141b&amp;t=12588756-3979-80ca-8906-c1bdf511141b&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980f2b9e3cee4e14377a7" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980759b5bdde61e8a40f9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F72162034-4876-4e12-aa70-86c1b526db5c%2FDSC_0739.jpg?table=block&amp;id=12588756-3979-8075-9b5b-dde61e8a40f9&amp;t=12588756-3979-8075-9b5b-dde61e8a40f9&amp;width=6878&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-1258875639798094997fd431156e0f52"> </div><div class="notion-text notion-block-125887563979808686f1fa44671fa3b1">沿海公路，真的像动漫里一样。还好下午天气转晴，太感动了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980ae804edcbbc1beb016"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fa950317c-a2ec-4e2e-856e-2b6681661b22%2FDSC_0758.jpg?table=block&amp;id=12588756-3979-80ae-804e-dcbbc1beb016&amp;t=12588756-3979-80ae-804e-dcbbc1beb016&amp;width=6446&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-125887563979800dbcc0f39d01957d1a"> </div><div class="notion-text notion-block-12588756397980a79acbf85831629944">已经能看到江之岛啦</div><div class="notion-row notion-block-12588756397980e4ae60c32afb1df990"><div class="notion-column notion-block-12588756397980f7800ffc7ab6e6d179" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979807d98a5f5903effb714"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F471279ce-6204-4298-9d5e-c025e4e19bc1%2FDSC_0763.jpg?table=block&amp;id=12588756-3979-807d-98a5-f5903effb714&amp;t=12588756-3979-807d-98a5-f5903effb714&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980a3a075fee484f0d31f" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979800b80d1cf5879ed8114"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe029a743-1e3e-4870-b32d-ffc2751fd1c8%2FDSC_0783.jpg?table=block&amp;id=12588756-3979-800b-80d1-cf5879ed8114&amp;t=12588756-3979-800b-80d1-cf5879ed8114&amp;width=7424&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12588756397980e68908df3bba606e21"> </div><div class="notion-text notion-block-12588756397980ea8edbd83eb7b956e8">咲太和麻衣前辈来过的地方（可惜游客太多了</div><div class="notion-row notion-block-12588756397980c584bbc748e33fe92d"><div class="notion-column notion-block-125887563979800bb9fdeb3299de81ba" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980a7afc2f6ce5ba22abb"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ff664a468-a30e-44a3-9bfa-d9d684faac23%2FDSC_0820.jpg?table=block&amp;id=12588756-3979-80a7-afc2-f6ce5ba22abb&amp;t=12588756-3979-80a7-afc2-f6ce5ba22abb&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979805dbd28db0ab308920a" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980ac9a48f8e6ce5e8a6f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd83dc5fe-ea5e-4703-85a3-3ee3532de295%2FDSC_0821.jpg?table=block&amp;id=12588756-3979-80ac-9a48-f8e6ce5e8a6f&amp;t=12588756-3979-80ac-9a48-f8e6ce5e8a6f&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-1258875639798068bde0e9bd0cc5d7b8"> </div><div class="notion-text notion-block-125887563979808f9974d99f7f3ff891">最后，在江之岛上看完了日落🌄</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979800f9f16c19cab50ca6d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F3304cd48-1eb5-4683-b45f-45adb55f8497%2FDSC_0824.jpg?table=block&amp;id=12588756-3979-800f-9f16-c19cab50ca6d&amp;t=12588756-3979-800f-9f16-c19cab50ca6d&amp;width=1415.9942626953125&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980248b7fcb07e5df99f5"> </div><div class="notion-text notion-block-1258875639798034ace1dda7a886ac4e">傍晚在江之岛站坐小田急回了东京（怎么没看到虹夏小天使</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980169912e5c75729e5b9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fbdddaf91-4dea-4e66-9c64-c6c9a09c1023%2FDSC_0843.jpg?table=block&amp;id=12588756-3979-8016-9912-e5c75729e5b9&amp;t=12588756-3979-8016-9912-e5c75729e5b9&amp;width=11136&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-13988756397980daab6ed97bea959a8a">镰仓真有意思，下次还打算再来多待两天</div><div class="notion-blank notion-block-125887563979800387b5db78772e4337"> </div><div class="notion-text notion-block-1258875639798062a32be114de23b8fc">回到东京后吃了すき家的チーズ牛丼（芝士牛肉饭），味道也和国内差不多，但在日本的味增汤还是第一次喝，难以形容，一股水+中药+酱油的味道，实在不喜欢</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979801d8470c49d1a01a7c7"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fabe11b95-17de-4281-b0bc-48af65aa8cf9%2FIMG_7365.heic?table=block&amp;id=12588756-3979-801d-8470-c49d1a01a7c7&amp;t=12588756-3979-801d-8470-c49d1a01a7c7&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980a8b634da64a31dcb03"> </div><div class="notion-text notion-block-12588756397980cdad1be35cb204464c">这边すき家的工资最低是1300円／時，来这种地方上班的一般都是学生来做アルバイト，日本貌似很多学生都会这样去做兼职，这在国内很罕见，不清楚是什么原因。对于学生来说这个薪水应该还算不错了（是不是应该拍个购买力挑战</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979803fa63cc3e7588d4fd2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2bb662d1-68a8-47d2-99e4-b230204b8c79%2FIMG_7366.heic?table=block&amp;id=12588756-3979-803f-a63c-c3e7588d4fd2&amp;t=12588756-3979-803f-a63c-c3e7588d4fd2&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-125887563979803a9375e51ba0026ede"> </div><div class="notion-text notion-block-1258875639798003bc9fde84be72d8cc">晚上在车站买了第二天到京都的新干线票，自由席 12000 円，价格大概是国内高铁的 2-3 倍左右。回到酒店收拾好行李，这就是待在东京的最后一天了</div><div class="notion-blank notion-block-125887563979806c8bc4e1a46aec8d61"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980118ac1e12723bf0e6c" data-id="11788756397980118ac1e12723bf0e6c"><span><div id="11788756397980118ac1e12723bf0e6c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980118ac1e12723bf0e6c" title="Day 5（10.2）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 5（10.2）</span></span></h2><div class="notion-text notion-block-12588756397980999707c9d4711812d5">出发去京都的这天，没有急着出门，因为我们买的车票是自由席，这意味着不需要坐指定趟的车，一天内任意哪趟车都可以坐，没有固定座位，1-3 号车厢是自由席专属，有位置就可以坐，与之对应的是指定席，就和国内一样必须坐指定趟的指定位置。这种接近地铁的运行方式很方便，不需要把时间卡得太死，每一趟间隔也只有 20 分钟</div><div class="notion-text notion-block-12588756397980ec81cad6b5f05200dd">从池袋站坐电车到东京站就可以转乘新干线，和普通电车是在同一个站，比较无缝（实际上应该还是有换乘这个操作的，不过换乘路线都在地下连通，间隔也不远）</div><div class="notion-row notion-block-1258875639798002a450c271d844ce2a"><div class="notion-column notion-block-12588756397980e88ed4e86480972240" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980d7b0bfcb85f26268ef"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F50e6af55-5d45-4e7f-baed-b5cf02427c90%2FIMG_7659.heic?table=block&amp;id=12588756-3979-80d7-b0bf-cb85f26268ef&amp;t=12588756-3979-80d7-b0bf-cb85f26268ef&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-1258875639798037ab42e2ea4b68830b" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979807aa3b7e69aa16e8fe6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Faaaea2df-2011-47d5-a75c-86d02665c978%2FIMG_7661.heic?table=block&amp;id=12588756-3979-807a-a3b7-e69aa16e8fe6&amp;t=12588756-3979-807a-a3b7-e69aa16e8fe6&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-1258875639798082915bc265e1c0111d">新干线座位空间很大，在座位前面放个行李箱也很富余，运行起来速度和稳定性上感觉和国内高铁没什么区别</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979801daf3afcf1f95e7e5d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4c365fdc-46c8-44dd-8c07-ca518949718b%2FIMG_7662.heic?table=block&amp;id=12588756-3979-801d-af3a-fcf1f95e7e5d&amp;t=12588756-3979-801d-af3a-fcf1f95e7e5d&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-125887563979802eb990ea7ecbbe8c10"> </div><div class="notion-text notion-block-125887563979809bae17dc326ce2f935">到京都的路线上能近距离看到富士山（不过那时候我睡着了，只有一张比较远的照片</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979803fb3f0d3c49cc07715"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Ffcc0be9e-bc48-4f1b-8831-7748dafba738%2FIMG_7666.heic?table=block&amp;id=12588756-3979-803f-b3f0-d3c49cc07715&amp;t=12588756-3979-803f-b3f0-d3c49cc07715&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980c1af22f6459d57cb2c"> </div><div class="notion-text notion-block-11788756397980449e22c33c3bd529fe">到京都时，先在车站寄存了行李（日本酒店这边一般是下午 3 点后才能 check in），然后准备像在东京一样到处逛逛</div><div class="notion-blank notion-block-125887563979802c98d4fa8eefb25bd3"> </div><div class="notion-text notion-block-12588756397980b8a83ad8f21076af72">京都的建筑看起来更加有历史感，电车线路密度比东京少了很多，只有寥寥几条线，也没有机场，据说是为了保存历史古迹？</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979803d95b0e2e76e1b5f55"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd78798ed-dddc-4fb5-9d15-9c3042b432d4%2FIMG_7671.heic?table=block&amp;id=12588756-3979-803d-95b0-e2e76e1b5f55&amp;t=12588756-3979-803d-95b0-e2e76e1b5f55&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980c5897dd0e38400476d"> </div><div class="notion-text notion-block-12588756397980b4906ad06e53bf87ca">而且这边的政党宣传貌似比东京更多，路边时不时能看到各个党派的海报，还有放着广播的宣传车路过。日本的共产党没什么存在感，因为过去赤军的事情大部分民众也认为是极左，不太喜欢</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980028733d47966f21a30"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F67d481a5-7223-4d9d-99f3-cb6feda4cb62%2FIMG_7669.heic?table=block&amp;id=12588756-3979-8002-8733-d47966f21a30&amp;t=12588756-3979-8002-8733-d47966f21a30&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1258875639798015b9a7cf2dfebdabe9"> </div><div class="notion-text notion-block-125887563979803eaaddf00e7fe3dc91">下午想找点吃的，但京都人都有种松弛感，除了连锁的品牌，其他店铺没几家开门的。唯一进去的一家，店里的老奶奶说 4 点后才有吃的，只能灰溜溜地去便利店买了三明治凑合一餐</div><div class="notion-blank notion-block-12588756397980479c8cd78046e15893"> </div><div class="notion-text notion-block-12588756397980609089cc25bffdfafd">之后打算去伏见稻荷大社，在一座山上，山脚下就是千本鸟居，游客比浅草寺还多，挤得完全没法拍照</div><div class="notion-row notion-block-12588756397980d89881c8e4f62b09c3"><div class="notion-column notion-block-12588756397980d2a107e7fa4b296901" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c889d3e736b00f661f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F46dd43c9-2196-42d0-b3d9-e365fe6341c0%2FDSC_0844.jpg?table=block&amp;id=12588756-3979-80c8-89d3-e736b00f661f&amp;t=12588756-3979-80c8-89d3-e736b00f661f&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979805988cddf8939ed4ffe" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979809ebdbfc1fca3b82ada"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F1b6c0328-e1c6-453a-ac9c-9afec8f9c5ce%2FDSC_0848.jpg?table=block&amp;id=12588756-3979-809e-bdbf-c1fca3b82ada&amp;t=12588756-3979-809e-bdbf-c1fca3b82ada&amp;width=1416&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-12588756397980d1bb37edb9fd9c4fd9">山里一路上都是神社，很有氛围（只要游客别那么多</div><div class="notion-row notion-block-125887563979806dbc66f718e6548911"><div class="notion-column notion-block-12588756397980efae0ceca7d8cf8d56" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980cf86abfae9952243c2"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4f93aa65-7faf-4a89-8838-719b54dd8670%2FDSC_0851.jpg?table=block&amp;id=12588756-3979-80cf-86ab-fae9952243c2&amp;t=12588756-3979-80cf-86ab-fae9952243c2&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-12588756397980d2a839e6effdea5de3" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798029a2edc67cd3f43c93"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fd48a732e-97e2-4284-86ea-c0e3f3135b6f%2FDSC_0856.jpg?table=block&amp;id=12588756-3979-8029-a2ed-c67cd3f43c93&amp;t=12588756-3979-8029-a2ed-c67cd3f43c93&amp;width=662&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-1258875639798058b95bd7c40b86bdeb">爬到半山腰时一个牌子写着登顶（到伏见稻荷大社）还要 40 分钟，累得直接放弃了，下山打道回府</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c99431d850a52c2aa8"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:576px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F8f72ce38-7ded-4d1e-a6ec-0ace77378fa6%2FDSC_0874.jpg?table=block&amp;id=12588756-3979-80c9-9431-d850a52c2aa8&amp;t=12588756-3979-80c9-9431-d850a52c2aa8&amp;width=1152&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980da9b5ae5977fc78f84"> </div><div class="notion-text notion-block-125887563979803eac9bd3c1589919f3">晚餐豚三昧，炸猪排蘸的肉酱味道和前两天麦当劳的汉堡一模一样，味增汤也还是同样难喝</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980909f98e94aa7ce0dbe"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F560debea-e936-4765-bc3b-58b044a8b041%2FIMG_7706.heic?table=block&amp;id=12588756-3979-8090-9f98-e94aa7ce0dbe&amp;t=12588756-3979-8090-9f98-e94aa7ce0dbe&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1258875639798094a2c1db3a1a39acf7"> </div><div class="notion-text notion-block-125887563979801d866ac6fe4e7e42f7">在酒店附近逛了两圈，京都真的非常安静，路上完全没几个人。之前说东京神社遍地都是，但京都的神社和寺庙比东京还多一个数量级，一天下来不算伏见稻荷大社这样的景点，也碰到了十来个大大小小的神社和寺庙。只要在京都，就仿佛进入了神界一样</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980fa94c4e852e88474a6"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Faeebef4d-98b0-4ad0-b555-0eaf1c521900%2FIMG_7703.heic?table=block&amp;id=12588756-3979-80fa-94c4-e852e88474a6&amp;t=12588756-3979-80fa-94c4-e852e88474a6&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980798e45f1e18153ce25"> </div><div class="notion-text notion-block-12588756397980e9871af45839fc24b1">我们在京都入住的这家酒店很不错，环境和配套明显比东京的好得多，有免费宵夜（拉面🍜）、零食饮料和温泉，还有收费的按摩服务。晚上原本准备去尝试一下温泉♨️来平替没能去成的箱根，但一进去就看到几个全裸的大叔，直接把我劝退了，还是乖乖回房睡觉吧</div><div class="notion-blank notion-block-125887563979802192e6ed28ccf0a865"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-11788756397980e58c67d5109830ff1a" data-id="11788756397980e58c67d5109830ff1a"><span><div id="11788756397980e58c67d5109830ff1a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11788756397980e58c67d5109830ff1a" title="Day 6（10.3）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 6（10.3）</span></span></h2><div class="notion-text notion-block-11788756397980048ecde048bbc1248b">在京都我们只住一晚，第二天起来退房后，准备上午再逛一下京都，下午出发去大阪。但天公不作美，一大早就下着不小的雨</div><div class="notion-blank notion-block-1258875639798056891be302d187559c"> </div><div class="notion-text notion-block-12588756397980e1b858d43527994529">来到京都站寄存行李，在附近的东本愿寺避了一会雨</div><div class="notion-row notion-block-12588756397980189fa9ca186375b9f0"><div class="notion-column notion-block-12588756397980418ec4dc45b68f433a" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979806a893afb268262bc08"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe4a7be27-b193-4a18-82e7-06db7db6b85c%2FIMG_7710.heic?table=block&amp;id=12588756-3979-806a-893a-fb268262bc08&amp;t=12588756-3979-806a-893a-fb268262bc08&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979806792fbce0a4913e1fe" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980b79004e710b9a601ee"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F517819b8-f200-41d4-9266-cb4859193187%2FIMG_7712.heic?table=block&amp;id=12588756-3979-80b7-9004-e710b9a601ee&amp;t=12588756-3979-80b7-9004-e710b9a601ee&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12588756397980c0b2eef6c02faf986f"> </div><div class="notion-text notion-block-125887563979804da6dfca49c3bef5f0">看雨小了一些，打算去清水寺逛逛，半路雨又开始大起来</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798094bda1e912b2bac1f3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F50f00687-802b-4730-980b-c5096e94dcbf%2FIMG_7716.heic?table=block&amp;id=12588756-3979-8094-bda1-e912b2bac1f3&amp;t=12588756-3979-8094-bda1-e912b2bac1f3&amp;width=1056&amp;cache=v2" alt="又一个神社⛩️" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">又一个神社⛩️</figcaption></div></figure><div class="notion-text notion-block-125887563979801c8dbde4e5c2119f28">拖着被淋湿大半的身体一路走到了清水寺，真正让我崩溃的是，这里人超！级！多！完全到了国内景点的地步，和高峰期地铁一样。雨大到照片都没法拍，让我马上逃回京都站</div><div class="notion-text notion-block-125887563979807ebbd7df4a7e9ba42d">在京都站外的京都剧场旁边吃了顿很不错的うなぎ丼，然后直奔大阪</div><div class="notion-row notion-block-12588756397980fea076dfcd9c759716"><div class="notion-column notion-block-12588756397980288422d01923fa2fe8" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c78aaac575b18ff186"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F80cdf595-b9f9-4ed0-91bc-7278dad9e00b%2FIMG_7725.heic?table=block&amp;id=12588756-3979-80c7-8aaa-c575b18ff186&amp;t=12588756-3979-80c7-8aaa-c575b18ff186&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-125887563979806c83cade4d74758c31" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-125887563979807a9ae0f2b41dbb8921"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F71045537-d58a-4bdc-adda-d1f29425388e%2FIMG_7726.heic?table=block&amp;id=12588756-3979-807a-9ae0-f2b41dbb8921&amp;t=12588756-3979-807a-9ae0-f2b41dbb8921&amp;width=800&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><div class="notion-blank notion-block-12588756397980efae8ad9fbf3661d16"> </div><div class="notion-text notion-block-12588756397980408d60ed943d1a39ab">但大阪也在下大雨，毕竟京都和大阪也只隔了几十公里，还是被迫窝在酒店里。到了晚上雨停后又去挑战了一次拉面，还好这家口味不重，味道还不错（除了饺子，很难吃</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798076828af7bb291875f3"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F9a402dd3-27fc-46c3-ad24-dafad9511b62%2FIMG_7728.heic?table=block&amp;id=12588756-3979-8076-828a-f7bb291875f3&amp;t=12588756-3979-8076-828a-f7bb291875f3&amp;width=864&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980ad9a6fe2d1e1c8508d"> </div><div class="notion-text notion-block-12588756397980e5aaacd3e3c4fb82ea">因为天气原因，整个关西部分体验都很糟糕，但第二天就得回程了，只能开始收拾行李，打算如果明早天气稍好的话再最后去大阪城逛逛</div><div class="notion-blank notion-block-11788756397980959c8ada9daad95d0c"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-117887563979805fbd44d8d361492d3d" data-id="117887563979805fbd44d8d361492d3d"><span><div id="117887563979805fbd44d8d361492d3d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#117887563979805fbd44d8d361492d3d" title="Day 7（10.4）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Day 7（10.4）</span></span></h2><div class="notion-text notion-block-12588756397980ca820efa1c8a3cef9d">残念，最后一天，还在下雨。继续睡到退房的点后就出发去机场了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798033ad9be74614e0c13d"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fec87e332-ef72-4362-9f5a-d2686acedc98%2FIMG_7731.heic?table=block&amp;id=12588756-3979-8033-ad9b-e74614e0c13d&amp;t=12588756-3979-8033-ad9b-e74614e0c13d&amp;width=960&amp;cache=v2" alt="チカンは犯罪です！" loading="lazy" decoding="async"/><figcaption class="notion-asset-caption">チカンは犯罪です！</figcaption></div></figure><div class="notion-blank notion-block-125887563979804b9820c85b06320624"> </div><div class="notion-text notion-block-121887563979806f972ff9a2e18bd638">在关西国际机场，到处都是 25 年世博会的海报，这个吉祥物看多了居然也觉得挺顺眼，丑萌丑萌的了</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980c3ac65c6b539c9d972"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F93172b23-d774-4113-88c4-e7cb96a75a37%2FIMG_7735.heic?table=block&amp;id=12588756-3979-80c3-ac65-c6b539c9d972&amp;t=12588756-3979-80c3-ac65-c6b539c9d972&amp;width=864&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-12588756397980c4a677ed4e7078abc3">不知道哪来的小车，我也好想开😭</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980709377c5e897a35604"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F7b2262ff-0719-4cd2-8dba-dbab8b2df002%2FIMG_7738.heic?table=block&amp;id=12588756-3979-8070-9377-c5e897a35604&amp;t=12588756-3979-8070-9377-c5e897a35604&amp;width=864&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-125887563979804a992ecb9699b8acd6"> </div><div class="notion-text notion-block-1258875639798073bc9bc092e6a3ac87">机场便利店的肉うどん，在日本的最后一餐</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980b797c0e564db41f40f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Febf0f18f-eeb5-44e0-bd42-1e5d5775e9ef%2FIMG_7739.heic?table=block&amp;id=12588756-3979-80b7-97c0-e564db41f40f&amp;t=12588756-3979-80b7-97c0-e564db41f40f&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-125887563979801bb659fac1a26c3fb3">机场有很多扭蛋机，让游客可以把硬币花完</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-1258875639798086aaefcf70dbeaa138"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F7ead2f8e-58b6-46e9-8e3c-f97338d676e6%2FIMG_7742.heic?table=block&amp;id=12588756-3979-8086-aaef-cf70dbeaa138&amp;t=12588756-3979-8086-aaef-cf70dbeaa138&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-12588756397980898da3f624e505325a"> </div><div class="notion-text notion-block-125887563979807aa2b4ea9148cb168f">登机后隔壁的日本人居然在看甄嬛传hhh</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-12588756397980509d39e894ab4fdf53"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:480px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fde4f077e-d9bd-481e-ab1b-3846a864500f%2FIMG_7743.heic?table=block&amp;id=12588756-3979-8050-9d39-e894ab4fdf53&amp;t=12588756-3979-8050-9d39-e894ab4fdf53&amp;width=960&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-1258875639798086b12cfd9605351148"> </div><div class="notion-text notion-block-1258875639798027995dc871c04dac0a">晚上回到深圳家里，躺在床上后才感叹，终于结束了，时间过得真快啊。这次旅行虽然有一些小遗憾（天气太差啦，时间太短啦，浓度太低啦），但体验还是非常棒的（只要不去游客多得要死的景点）。日本整体很便利干净安全，民众素质也很高，旅游资源丰富，每个城市都能体会到完全不一样的感觉，下次还要来😭</div><div class="notion-blank notion-block-12588756397980cdbae9c3699f0891f8"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PVE 迁移翻车自救]]></title>
        <id>https://xxxuuu.me/post/pve-migration-rescue</id>
        <link href="https://xxxuuu.me/post/pve-migration-rescue"/>
        <updated>2024-10-13T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-11d8875639798080877dcf9a2d058532"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-blank notion-block-11e8875639798042bd16fb14f5341aa6"> </div><div class="notion-text notion-block-11d88756397980668f15f2532a932d53">这两天刚购入了一台天钡 wrtpro 作为新 Homelab 和 NAS。到手后也安装了 PVE，打算组一个 PVE Cluster，将部分业务迁移到新机器上</div><div class="notion-blank notion-block-11e88756397980348610db9ad83ae28f"> </div><div class="notion-text notion-block-11e88756397980ebb3c0d45968be5a8a">但 PVE 这个 Cluster 功能非常不产品化，如果当前有任何 LXC 或 VM 正在运行，就不能加入进 Cluster 中</div><div class="notion-text notion-block-11e88756397980d08807d79299e09793">官方论坛给出了一个方案，可以临时移走 <code class="notion-inline-code">/etc/pve/lxc</code> 和 <code class="notion-inline-code">/etc/pve/qemu-server</code> 下的配置文件，这样 PVE 就认为当前节点上不存在 LXC 和 VM 了，待加入 Cluster 后再恢复配置文件：</div><ul class="notion-list notion-list-disc notion-block-11e88756397980619de4d6f2a201f4a2"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://forum.proxmox.com/threads/cluster-join-failed-this-host-already-contains-virtual-guests.55965/">https://forum.proxmox.com/threads/cluster-join-failed-this-host-already-contains-virtual-guests.55965/</a></li></ul><div class="notion-blank notion-block-11e88756397980dfbee3dac0e0e734b3"> </div><div class="notion-text notion-block-11d88756397980aaaa84cf9900d197e7">于是我就将配置文件都 rename 了一下，成功加入了 Cluster。而在 rename 回来的时候发现！！！配置文件所在的目录都被清空了！！！</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11d887563979805985a3da3005fb060a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F8b4119ea-411b-4ba0-b99c-316594699454%2Fimage.png?table=block&amp;id=11d88756-3979-8059-85a3-da3005fb060a&amp;t=11d88756-3979-8059-85a3-da3005fb060a&amp;width=1415.95166015625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11d887563979801091f8debe3a5441cf"> </div><div class="notion-text notion-block-11d887563979801fad26ec4b7e801d58">两眼一黑，所有 LXC 和 VM 都丢了，真正 all in bomb。但冷静下来后看了下，还好虚拟磁盘都在，应该还能从这里恢复数据</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11d88756397980b0be8ac47535b1e8c4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:320px"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F69f9e5d7-8a1c-43f4-a164-d51513f6f376%2Fb436ab88-ef8c-40bb-b7b6-6dddd9f388db.png?table=block&amp;id=11d88756-3979-80b0-be8a-c47535b1e8c4&amp;t=11d88756-3979-80b0-be8a-c47535b1e8c4&amp;width=1307.8579610538372&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11e88756397980cd81ffd9a426625ab2"> </div><div class="notion-text notion-block-11e887563979805bac83d541341d34dc">丢失的 LXC 和 VM 配置已经找不回来，只能凭着记忆重写一份。或者创建新的再指定磁盘：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e88756397980e29f76e5d2fe161c48"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F5fe823a2-2b41-4cd5-b5ae-4dd56e50072b%2Fimage.png?table=block&amp;id=11e88756-3979-80e2-9f76-e5d2fe161c48&amp;t=11e88756-3979-80e2-9f76-e5d2fe161c48&amp;width=4548&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-11e88756397980bb96a2f6b268258533">有了配置文件后，LXC 也都显示在了界面上，逐个启动确认正常或再次调整配置</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e887563979803b8e7ef994c7bac5f4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:384px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F2c3f56ed-831b-4034-b57a-43cae187c509%2Fimage.png?table=block&amp;id=11e88756-3979-803b-8e7e-f994c7bac5f4&amp;t=11e88756-3979-803b-8e7e-f994c7bac5f4&amp;width=768&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-11e88756397980049d2afc44f8e10d22">现在 Cluster 已经有了，就可以直接在节点之间一键迁移 LXC 和 VM。不过这个 Cluster 比较弱智的另一点是，要求两端的存储在「名字」上是一样的，而不是提供目标节点存储选项，所以不一样的话还得先迁移一下磁盘所在的存储或想办法改个名</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e8875639798070a6d9db93445bc299"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:336px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2Fe397af75-d684-4ee2-9c54-348a35a4ec18%2Fimage.png?table=block&amp;id=11e88756-3979-8070-a6d9-db93445bc299&amp;t=11e88756-3979-8070-a6d9-db93445bc299&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-11e887563979803db7e2eceea1cd7104">然后就可以直接迁移到另一个节点上</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e88756397980e2be42e5187c90d119"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:528px;max-width:100%;flex-direction:column"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F7653fd5f-fde6-4cb8-b80e-0f298bd3660a%2Fimage.png?table=block&amp;id=11e88756-3979-80e2-be42-e5187c90d119&amp;t=11e88756-3979-80e2-be42-e5187c90d119&amp;width=1056&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-text notion-block-11e88756397980f0a17fd4fc91645927">等待所有 LXC 和 VM 都迁移完成后，再次检查业务是否正常</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e887563979803aaf96f8f5f6113e2b"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F4e878163-5a96-4b3e-b3d3-bbfaa359ca33%2Fimage.png?table=block&amp;id=11e88756-3979-803a-af96-f8f5f6113e2b&amp;t=11e88756-3979-803a-af96-f8f5f6113e2b&amp;width=1415.9801025390625&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11e88756397980a18af2ffb147ed099a"> </div><div class="notion-text notion-block-11e88756397980af96bae79317a3033c">总结一下，只要磁盘还在，数据就还能保住，只要恢复 LXC 和 VM 本身的配置文件即可，或者直接重新创建新的 LXC 和 VM，将磁盘挂载进去也行</div><div class="notion-text notion-block-11e887563979801ab88ceea6d42b62a6">从这件事也可以看出，PVE 在一些企业级一点的功能上还远不够产品化，自己操作上也不够谨慎，应该考虑其它的备份目录和方式</div><div class="notion-blank notion-block-11e88756397980acad99dc3779a36f3d"> </div><div class="notion-text notion-block-11e88756397980a88a67fb90eabbd77d">PS：最后，PVE 这个 Cluster 设计是没有 master 节点的，看起来只是单纯的 quorum 操作完成同步（查了下是基于 corosync 实现的），每个节点的所有 LXC 和 VM 配置都会通过 pmxcfs 同步到其他节点上，所以这也可能是加入集群后文件被清空的原因（配置文件夹在初次同步后被覆盖了）</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-11e887563979807d8229e210e145b0cb"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F4cc04375-345a-4a1e-bdf0-3a7c88ef0425%2F8cbba38d-ab4a-46c3-ae8f-cba00ed81f4c%2Fimage.png?table=block&amp;id=11e88756-3979-807d-8229-e210e145b0cb&amp;t=11e88756-3979-807d-8229-e210e145b0cb&amp;width=6508&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-11e887563979804bbec1d0c71a5220ec"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[译：使 Rust library 兼容 no_std]]></title>
        <id>https://xxxuuu.me/post/rust-no-std</id>
        <link href="https://xxxuuu.me/post/rust-no-std"/>
        <updated>2024-09-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Effective Rust Item 33]]></summary>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-4e5d7fc068d54165ba12b2d8bfc7d92c"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><blockquote class="notion-quote notion-block-108887563979808caa6bd32d05329ea6"><div>原文为 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.lurklurk.org/effective-rust/no-std.html">Effective Rust 第 33 条</a>，笔者将其翻译后提交至 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_6/item33-no-std.html">Effective Rust 中文版</a>，同步转载至此处</div></blockquote><div class="notion-blank notion-block-1088875639798017a6c3c5b80c00724a"> </div><div class="notion-text notion-block-108887563979803a95d6c0eb4d744a6d">Rust 附带一个名为 <code class="notion-inline-code">std</code> 的标准库，其中包含了从标准数据结构到网络，从多线程支持到文件 I/O 等用于各种常见任务的代码。为了方便使用， <code class="notion-inline-code">std</code> 中的一些项目会通过 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/prelude/index.html">prelude</a> 自动导入到你的程序中，<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/prelude/index.html">prelude</a> 是一组 <code class="notion-inline-code">use</code> 语句，可以在不需要指定完整名称的情况下直接使用这些常见类型（例如使用 <code class="notion-inline-code">Vec</code> 而不是 <code class="notion-inline-code">std::vec::Vec</code>）。</div><div class="notion-text notion-block-108887563979806299abedac8cb6b1b0">Rust 还支持为无法提供完整标准库的环境构建代码，如引导加载程序、固件或一般的嵌入式平台。通过在 <code class="notion-inline-code">src/lib.rs</code> 文件顶部添加 <code class="notion-inline-code">#![no_std]</code> 属性，可以指示 crate 在这类受限环境中编译。</div><div class="notion-blank notion-block-cd96fc048c7043529bc4d8cc1613a8f4"> </div><div class="notion-text notion-block-1088875639798048afd4c60654c69072">本节将探讨在 <code class="notion-inline-code">no_std</code> 环境中编译时我们会失去哪些功能，以及仍然可用的库函数。我们会发现，即使在这种受限环境中，依然有相当多的功能可供使用。</div><div class="notion-text notion-block-1088875639798059ab85ebbbc08e0b75">不过，这里特别关注的是针对<em>库</em>代码的 <code class="notion-inline-code">no_std</code> 支持。构建 <code class="notion-inline-code">no_std</code> <em>可执行</em>文件的复杂性超出了本文的范围<!-- -->，因此本节重点是对那些不得不在如此极简环境中工作的可怜人来说，如何确保库代码是可用的。</div><div class="notion-blank notion-block-10888756397980dcb205e010b60dc6f4"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-10888756397980568453ee4b2f910e69" data-id="10888756397980568453ee4b2f910e69"><span><div id="10888756397980568453ee4b2f910e69" class="notion-header-anchor"></div><a class="notion-hash-link" href="#10888756397980568453ee4b2f910e69" title="core"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code">core</code></span></span></h3><div class="notion-text notion-block-10888756397980f4978dfe99a34d3dfd">即使在为最受限的平台构建时，标准库中的许多基本类型也仍然可用。例如 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/core/option/enum.Option.html">Option</a></code> 和 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/core/result/enum.Result.html">Result</a></code> 以及各种 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/core/iter/trait.Iterator.html">Iterator</a></code>，尽管它们名称不同。</div><div class="notion-text notion-block-10888756397980709d6dcc1b81595cc8">这些基本类型的不同名称以 <code class="notion-inline-code">core::</code> 开头，表明它们来自 <code class="notion-inline-code">core</code> 库，这是一个即使在大多数 <code class="notion-inline-code">no_std</code> 环境中也可用的标准库。这些 <code class="notion-inline-code">core::</code> 类型的行为与等效的 <code class="notion-inline-code">std::</code> 类型完全相同，因为它们实际上是同个类型 —— 对应的 <code class="notion-inline-code">std::</code> 版本都只是底层 <code class="notion-inline-code">core::</code> 类型的重新导出。</div><div class="notion-text notion-block-108887563979801383c5c66db1561c59">这意味着有一种快速而肮脏的方法来判断某个 <code class="notion-inline-code">std::</code> 项目在 <code class="notion-inline-code">no_std</code> 环境中是否可用： 访问 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/index.html">doc.rust-lang.org</a></code> 并找到感兴趣的 <code class="notion-inline-code">std</code> 项目，点击 “soure”（在右上角）<!-- -->，如果它跳转到了 <code class="notion-inline-code">src/core/...</code> 中，则说明该项可通过 <code class="notion-inline-code">core::</code> 在 <code class="notion-inline-code">no_std</code> 下使用。</div><div class="notion-text notion-block-1088875639798045bdb0c9efafb664ea">正常情况下 <code class="notion-inline-code">core</code> 中的类型可自动用于所有 Rust 程序。但在 <code class="notion-inline-code">no_std</code> 环境需要显式 <code class="notion-inline-code">use</code>，因为此时没有 <code class="notion-inline-code">std</code> <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/prelude/index.html">prelude</a> 帮忙导入。</div><div class="notion-blank notion-block-10888756397980eda2e2f4e3be071e1a"> </div><div class="notion-text notion-block-10888756397980b486abd025eb3480af">实际中，对于许多环境（甚至是 <code class="notion-inline-code">no_std</code>）来说，纯粹依赖 <code class="notion-inline-code">core</code> 会有很大的限制，因为 <code class="notion-inline-code">core</code> 的一个核心（双关语）约束是它不会进行堆分配。</div><div class="notion-text notion-block-72adfc34c8bc43df8b760eedd034a3b6">虽然 Rust 很擅长将数据放入栈中并安全地跟踪其相应的生命周期（<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_3/item14-lifetimes.html">第 14 条</a>），但 <code class="notion-inline-code">core</code> 的这种限制仍然意味着无法提供标准数据结构（vector, map, set），因为它们都需要分配堆空间来存放内部元素。所以这个限制也大大减少了在此环境中可用的 crate 数量。</div><div class="notion-blank notion-block-708cc73e18f24cd8ad23e5e7d7f3cfbe"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1088875639798062b41fd9d4aaaea292" data-id="1088875639798062b41fd9d4aaaea292"><span><div id="1088875639798062b41fd9d4aaaea292" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1088875639798062b41fd9d4aaaea292" title="alloc"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code">alloc</code></span></span></h3><div class="notion-text notion-block-1088875639798021991ade4a5f52027b">但如果所在的 <code class="notion-inline-code">no_std</code> 环境<em>的确</em>支持堆分配，则 <code class="notion-inline-code">std</code> 中的许多标准数据结构仍然可用。这些数据结构以及其他使用分配功能的部分被分组到 Rust 的 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/">alloc</a></code> 库中。</div><div class="notion-text notion-block-10888756397980ac8918fff831f2e55e">和 <code class="notion-inline-code">core</code> 一样，这些 <code class="notion-inline-code">alloc</code> 变体实际上在底层是相同的类型。例如 <code class="notion-inline-code">std::vec::Vec</code> 的真实名称是 <code class="notion-inline-code">alloc::vec::Vec</code>。</div><div class="notion-text notion-block-1088875639798007854ad13605b16c12">如果 <code class="notion-inline-code">no_std</code> 的 crate 要使用 <code class="notion-inline-code">alloc</code>，需要在 <code class="notion-inline-code">src/lib.rs</code> 额外显式声明 <code class="notion-inline-code">extern crate alloc;</code>：</div><div class="notion-text notion-block-10888756397980929453d80071d6020d">引入 <code class="notion-inline-code">alloc</code> 库可以启用许多我们熟悉的朋友，现在他们以真实的名称被称呼：</div><ul class="notion-list notion-list-disc notion-block-10888756397980a6928cc9fc25bf3308"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/boxed/struct.Box.html">alloc::boxed::Box&lt;T&gt;</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-1088875639798051ba76f7415fee5e77"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/rc/struct.Rc.html">alloc::rc::Rc&lt;T&gt;</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-108887563979805b8ad9cfcc858a919c"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/sync/struct.Arc.html">alloc::sync::Arc&lt;T&gt;</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980e4ad6bf61e73b82ba9"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/vec/struct.Vec.html">alloc::vec::Vec&lt;T&gt;</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-108887563979803e968bdb31ec5e9522"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/string/struct.String.html">alloc::string::String</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-00caf07629244a208180fffe6dce0b88"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/macro.format.html">alloc::format!</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980518c8edaa2a444efc1"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/collections/btree_map/struct.BTreeMap.html">alloc::collections::BTreeMap&lt;K, V&gt;</a></code></li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980488288ef53618b1812"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/alloc/collections/btree_set/struct.BTreeSet.html">alloc::collections::BTreeSet&lt;T&gt;</a></code></li></ul><div class="notion-text notion-block-1088875639798059b17fdef07f08f7ca">有了这些朋友，许多 crate 就可以兼容 <code class="notion-inline-code">no_std</code> —— 前提是不涉及 I/O 或网络。</div><div class="notion-blank notion-block-108887563979802ba753dd3b1416c1b5"> </div><div class="notion-text notion-block-10888756397980969b4ff738c318624c">但 <code class="notion-inline-code">alloc</code> 提供的数据结构显然还缺少了两个集合 —— <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/collections/struct.HashMap.html">HashMap</a></code> 和 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/collections/hash_set/struct.HashSet.html">HashSet</a></code>，它们特定于 <code class="notion-inline-code">std</code> 而不是 <code class="notion-inline-code">alloc</code>。这是因为这些基于 hash 的容器依靠随机种子来防止 hash 冲突攻击，但安全的随机数生成需要依赖操作系统的帮助，而 <code class="notion-inline-code">alloc</code> 不能假设操作系统存在。</div><div class="notion-text notion-block-10888756397980e5a55fd146d1a0e50b">另一个缺失的部分是同步功能，例如 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/sync/struct.Mutex.html">std::sync::Mutex</a></code>，这是多线程代码所必需的，但这些类型同样特定于 <code class="notion-inline-code">std</code>，它们依赖操作系统的同步原语，如果没有操作系统，这些同步原语也将不可用。在 <code class="notion-inline-code">no_std</code> 下编写多线程代码，第三方 crate 可能是唯一选择，例如 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.rs/spin/">spin</a></code>。</div><div class="notion-blank notion-block-108887563979807d8f33c1c580350243"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-b136e054ee354a9898d49e7b10035bdd" data-id="b136e054ee354a9898d49e7b10035bdd"><span><div id="b136e054ee354a9898d49e7b10035bdd" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b136e054ee354a9898d49e7b10035bdd" title="为 no_std 编写代码"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">为 <code class="notion-inline-code">no_std</code> 编写代码</span></span></h3><div class="notion-text notion-block-523e6640cd514ad6be025ca8a9dc0bfc">前文已经指出，对于<em>某些</em> crate 库，要使代码兼容 <code class="notion-inline-code">no_std</code> 只需要以下修改：</div><ul class="notion-list notion-list-disc notion-block-1088875639798051b4fbf2367575a088"><li>用相同的 <code class="notion-inline-code">core::</code> 或 <code class="notion-inline-code">alloc::</code> crate 替换 <code class="notion-inline-code">std::</code> 类型（由于缺少 <code class="notion-inline-code">std</code> prelude，还需要 <code class="notion-inline-code">use</code> 完整的类型名称）</li></ul><ul class="notion-list notion-list-disc notion-block-108887563979803d8f16ee1cf9f6a4e9"><li>将 <code class="notion-inline-code">HashMap</code> / <code class="notion-inline-code">HashSet</code> 迁移为 <code class="notion-inline-code">BTreeMap</code> / <code class="notion-inline-code">BTreeSet</code></li></ul><div class="notion-text notion-block-1088875639798097b07cee83750742f5">但这些操作只有在依赖的所有 crate（<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_4/item25-dep-graph.html">第 25 条</a>）也兼容 <code class="notion-inline-code">no_std</code> 时才有意义 —— 如果使用您 crate 的用户被迫链接到任何 <code class="notion-inline-code">std</code> 中，与 <code class="notion-inline-code">no_std</code> 的兼容就会失去意义。</div><div class="notion-blank notion-block-1088875639798045b0adc8fbe058f20c"> </div><div class="notion-text notion-block-10888756397980778938e9aef4bc13f5">这里还有一个问题：Rust 编译器并不会告诉你一个 <code class="notion-inline-code">no_std</code> crate 中是否有引入使用了 <code class="notion-inline-code">std</code> 的依赖。这意味着只要添加或更新一个使用了 <code class="notion-inline-code">std</code> 的依赖，就能轻松破坏掉 <code class="notion-inline-code">no_std</code> crate 的兼容性。</div><div class="notion-text notion-block-108887563979807c80abf91e166edb8a">为了避免这个情况，<b>请为 </b><code class="notion-inline-code"><b>no_std</b></code><b> 构建添加 CI 检查</b>，以便 CI 系统（<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_5/item32-ci.html">第 32 条</a>）能在这种情况发生时发出警告。Rust 工具链支持开箱即用的交叉编译，因此只需为不支持 <code class="notion-inline-code">std</code> 的目标系统（例如 <code class="notion-inline-code">--target thumbv6m-none-eabi</code>）执行<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.reddit.com/r/rust/comments/ef8nd9/how_to_avoid_accidentally_breaking_no_std/fbyz6ix/">交叉编译</a>，任何无意中依赖 <code class="notion-inline-code">std</code> 的代码就会在此时编译失败。</div><div class="notion-blank notion-block-aa5cfbb4c6d143d5801c9850ee0cb3e4"> </div><div class="notion-text notion-block-108887563979806c9a57ce3a4ce30b88">所以，如果依赖项都支持，并且上面的简单修改就够了的话，不妨<b>考虑让库代码兼容 </b><code class="notion-inline-code"><b>no_std</b></code>。这不需要太多额外工作，却能让库有更广泛的适用性。</div><div class="notion-text notion-block-c93a6756928e4fbaba484854f00829a9">如果这些转换并<em>没有</em>覆盖 crate 中的所有代码，但未覆盖的只是代码中的一小部分或包装良好的部分，那么可以考虑向 crate 添加一个 feature （<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_4/item26-features.html">第 26 条</a>）以控制是否启用这部分代码。</div><div class="notion-text notion-block-10888756397980baad86c80095a09281">这种允许使用 <code class="notion-inline-code">std</code> 特定功能的 feature ，通常会将其命名为 <code class="notion-inline-code">std</code>：</div><div class="notion-text notion-block-10888756397980258db0c63f805799d6">或是将控制是否启用了 <code class="notion-inline-code">alloc</code> 派生功能的 feature 命名为 <code class="notion-inline-code">alloc</code>：</div><div class="notion-text notion-block-108887563979806cad61d689708df697">注意，设计这类 feature 时有个容易忽视的陷阱：不要设置一个 <code class="notion-inline-code">no_std</code> feature 来<em>禁用</em>需要 <code class="notion-inline-code">std</code> 的功能（或类似的 <code class="notion-inline-code">no_alloc</code> feature），正如<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_4/item26-features.html">第 26 条</a>中提到的，feature 应当是可累加的，这样做会导致无法将启用了 <code class="notion-inline-code">no_std</code> 和没有启用的两个 crate 用户组合在一起 —— 前者会删除后者所依赖的代码。</div><div class="notion-text notion-block-108887563979804e9194c3c8b549aaa4">和所有带有 feautre 门控的代码一样，确保你的 CI 系统（<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://rustx-labs.github.io/effective-rust-cn/chapter_5/item32-ci.html">第 32 条</a>）构建了所有相关的组合 —— 包括在 <code class="notion-inline-code">no_std</code> 平台上关闭 <code class="notion-inline-code">std</code> 特性的构建。</div><div class="notion-blank notion-block-108887563979807e9f5deb91cc862392"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-15b50c7db2944e88aadd48fa3ee8ddc6" data-id="15b50c7db2944e88aadd48fa3ee8ddc6"><span><div id="15b50c7db2944e88aadd48fa3ee8ddc6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#15b50c7db2944e88aadd48fa3ee8ddc6" title="可错分配（Fallible Allocation）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">可错分配（Fallible Allocation）</span></span></h3><div class="notion-text notion-block-5f5f0f497cc046a1b82c722743a16d83">前面考虑了两种不同的 <code class="notion-inline-code">no_std</code> 环境：不允许堆分配的完全嵌入式的环境（<code class="notion-inline-code">core</code>）和允许堆分配的更宽松的环境（<code class="notion-inline-code">core</code> + <code class="notion-inline-code">alloc</code>）。</div><div class="notion-text notion-block-10888756397980649d39ef55aca5e09c">然而，有一些重要的环境介于两者之间，特别是那些允许堆分配但可能会失败的环境，因为堆空间是有限的。</div><div class="notion-text notion-block-10888756397980aebf42c6f98bab8b63">不幸的是，Rust 的标准 <code class="notion-inline-code">alloc</code> 库假设堆分配不会失败，但这个假设并不总是成立。</div><div class="notion-text notion-block-10888756397980708731dfcd2a0be069">即使简单地使用 <code class="notion-inline-code">alloc::vec::Vec</code>，也可能在每一行代码中都触发分配：</div><div class="notion-text notion-block-1088875639798029be9bffa30a74fb6d">这些操作都不会返回 <code class="notion-inline-code">Result</code>，当这些分配失败了，会发生什么？</div><div class="notion-text notion-block-1088875639798031be64d0798fd0cd28">答案取决于工具链、目标平台和<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/alloc/fn.set_alloc_error_hook.html">配置</a>，但很可能会导致 <code class="notion-inline-code">panic!</code> 和程序终止。这里无法通过某种方式处理第 3 行的分配失败，并让程序继续执行第 4 行。</div><div class="notion-blank notion-block-1088875639798020b028c2e9eef507f5"> </div><div class="notion-text notion-block-108887563979807ba714c77b96412670">这种<em>可靠分配</em>（infallible allocation）的假设简化了在“正常”用户空间中运行的代码，因为在这些环境中，内存几乎是无限的 —— 或者内存耗尽意味着计算机本身出现了更严重的问题。</div><div class="notion-text notion-block-10888756397980fabd6ceda70c8bfc73">但可靠分配不适用于内存有限且程序必须应对内存不足的环境。这是一个在一些较老、内存安全性较差的语言中反而有更好支持的（罕见）领域：</div><ul class="notion-list notion-list-disc notion-block-b47475a0211a4c7b913bab48a624d3de"><li>C 的级别足够低，分配是手动的，因此可以检查 <code class="notion-inline-code">malloc</code> 的返回值是否为 <code class="notion-inline-code">NULL</code>。</li></ul><ul class="notion-list notion-list-disc notion-block-108887563979800093b1f02a344054be"><li>C++ 可以使用异常机制，捕获以 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.cppreference.com/w/cpp/memory/new/bad_alloc">std::bad_alloc</a></code> 异常形式出现的分配失败<!-- -->。</li></ul><div class="notion-text notion-block-10888756397980f5b85cc6609da423e6">历史上，Rust 标准库无法处理分配失败的问题在一些备受瞩目的场合（如 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://lkml.org/lkml/2021/4/14/1099">Linux 内核</a>、Android 和 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/hyperium/hyper/issues/2265#issuecomment-693194229">Curl 工具</a>）中被指出，因此修复这一缺陷的工作正在进行中。</div><div class="notion-blank notion-block-10888756397980639e32edc76ebac631"> </div><div class="notion-text notion-block-108887563979803c9d3af6e6dd0cc425">第一个尝试是<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/rust-lang/rfcs/pull/2116">添加“可错的集合分配”</a>，它为许多涉及分配的集合 API 添加了允许可错分配的替代实现，通常是添加一个会返回 <code class="notion-inline-code">Result&lt;_, AllocError&gt;</code> 的 <code class="notion-inline-code">try_&lt;operation&gt;</code> 操作，例如：</div><ul class="notion-list notion-list-disc notion-block-108887563979807a97b2c7ed9898a882"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.try_reserve">Vec::try_reserve</a></code> 作为 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.reserve">Vec::reserve</a></code> 的替代品</li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980b4b7b2fc3c049ec049"><li><code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.try_new">Box::try_new</a></code> 作为 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.new">Box::new</a></code> 的替代品（在 nightly toolchain 中可用）</li></ul><div class="notion-text notion-block-108887563979801da7b2cadad00076d9">但这些允许可错分配的 API 功能也仅限于此。例如，（目前为止）还没有与 <code class="notion-inline-code">Vec::push</code> 等效的可错分配版本，因此编写组装 vector 的代码时，可能需要进行精确计算，以确保不会发生内存分配错误。</div><div class="notion-text notion-block-108887563979806782dcf8e37d6344e9">除了增加允许可错分配的入口外，还可以通过关闭默认开启的 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/rust-lang/rust/pull/84266">no_global_oom_handling</a></code> 配置来禁用<em>可靠</em>分配操作。在堆内存有限的环境（如 Linux 内核）中，可以显式禁用此标志，以确保不会在代码中无意使用了可靠分配。</div><div class="notion-blank notion-block-10888756397980d9b77bce0283bfec0b"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-1088875639798083946ddccff431121f" data-id="1088875639798083946ddccff431121f"><span><div id="1088875639798083946ddccff431121f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1088875639798083946ddccff431121f" title="要记住的事"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">要记住的事</span></span></h3><ul class="notion-list notion-list-disc notion-block-108887563979805b880ade0916d7e173"><li><code class="notion-inline-code">std</code> crate 中的许多项目实际上来自 <code class="notion-inline-code">core</code> 或 <code class="notion-inline-code">alloc</code>。</li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980e6ab6af5235bc11333"><li>因此，使库代码兼容 <code class="notion-inline-code">no_std</code> 可能比您想象的更简单。</li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980599fe6e67b1050ca53"><li>通过在 CI 中检查 <code class="notion-inline-code">no_std</code> 代码来确认 <code class="notion-inline-code">no_std</code> 代码保持 <code class="notion-inline-code">no_std</code> 兼容。</li></ul><ul class="notion-list notion-list-disc notion-block-10888756397980ad904fc4f8c94a097b"><li>注意，当前支持在有限堆环境中工作的库十分有限。</li></ul><div class="notion-blank notion-block-1088875639798015b7efc57b63666050"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-108887563979806d828aedb5b9c6954b" data-id="108887563979806d828aedb5b9c6954b"><span><div id="108887563979806d828aedb5b9c6954b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#108887563979806d828aedb5b9c6954b" title="注释"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">注释</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-d4e691d2f9bb418d863177225b32915c"><li>有关创建 <code class="notion-inline-code">no_std</code> 可执行文件所涉及的内容，请参阅 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.rust-embedded.org/embedonomicon/">The Embedonomicon</a> 或 Philipp Opperamann 的<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://os.phil-opp.com/freestanding-rust-binary/">早期博客文章</a>。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-108887563979803c9107e1b9770c5cec"><li>注意，该方法不一定正确。例如在撰写本文时，<code class="notion-inline-code">Error</code> trait 在 <code class="notion-inline-code">[core::]</code> 中定义，但被标记为不稳定（unstable），只有 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/1.70.0/std/error/trait.Error.html">std::</a></code><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/1.70.0/std/error/trait.Error.html"> 版本</a>是稳定的（stable）</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-f89a9c50d1f04d88a86dc27e88b2abc0"><li>在 Rust 2018 之前，<code class="notion-inline-code">extern crate</code> 声明用来引入依赖项。现在这些依赖完全由 <code class="notion-inline-code">Cargo.toml</code> 处理，但仍使用 <code class="notion-inline-code">extern crate</code> 机制引入那些 <code class="notion-inline-code">no_std</code> 环境中 Rust 标准库的可选部分（即 <em><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html#an-exception">sysroot crates</a></em>）。</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-dae2425cd32046c7b806ebd9742e4281"><li>还可以为 <code class="notion-inline-code">new</code> 调用添加 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.cppreference.com/w/cpp/memory/new/nothrow">std::nothrow</a></code> 重载，并检查是否返回 <code class="notion-inline-code">nullptr</code>。但一些容器方法比如 <code class="notion-inline-code"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.cppreference.com/w/cpp/container/vector/push_back">vector&lt;T&gt;::push_back</a></code>，在内部进行分配，因此只能通过抛出异常来表示分配失败。</li></ol><div class="notion-blank notion-block-f364c3fb680f4507981e817627f5600c"> </div></main></div>]]></content>
    </entry>
</feed>